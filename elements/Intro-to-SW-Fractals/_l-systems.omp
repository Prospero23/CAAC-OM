; OM File Header - Saved 2023/05/03 18:14:13
; (7.01 :patc (om-make-point 62 262) (om-make-point 50 50) (om-make-point 500 400) "" 183 0 nil "2023/05/01 12:36:41")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"l-systems.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "_l-systems" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 130 31) (quote "variables (ex.)") "" (om-make-point 925 195) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 93 28) (quote "rules (ex.)") "" (om-make-point 921 54) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 925 229) (om-make-point 154 30) (list (list (quote a) (quote c)) (list (quote c) (list (quote x) (quote y) (quote z))) (list (quote z) 10)) "((a c) (c (x y z)) (z 10))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 924 85) (om-make-point 305 30) (list (list (quote b) (quote a)) (list (quote a) (list (quote a) (quote b))) (list (quote c) (quote c)) (list (quote d) (quote c)) (list (quote x) (quote x)) (list (quote y) (quote y)) (list (quote z) (quote z)) (list 10 10)) "((b a) (a (a b)) (c c) (d c) (x x) (y y) (z z) (10 10))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 1059 452) (om-make-point 151 30) (list (list (quote a) (list (quote a) (quote b) (quote a))) (list (quote b) (list (quote b) (quote b) (quote b)))) "((a (a b a)) (b (b b b)))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 49 28) (quote "rules") "" (om-make-point 1069 383) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 1067 413) (om-make-point 109 30) (list (list (quote b) (quote a)) (list (quote a) (list (quote a) (quote b)))) "((b a) (a (a b)))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 101 90) (quote "Modèles :$Algae (start a)$$Cantor set$(start a)") "" (om-make-point 964 399) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 225 99) (quote "L'exemple classique avec a-ab donne des longueurs de listes correspondant à la série de Fibonacci...") "" (om-make-point 79 376) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 184 313) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "get-lenght 2" (om-load-patch-abs1 "get-lenght" (quote ((let ((box (om-load-boxwithed1 (quote box-with-win) "get-lenght" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input0" nil))) (om-make-point 43 142) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 100 180) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 77 253) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 69 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 130 295) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 30 295) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "get-lenght" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 6.13 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 91 303) nil (list (list 2 3 5 8)) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LAST-ELEM" (quote last-elem) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 271 304) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 205 124) (quote "Toutes les récursions sont accumulées, mais seulement la dernière est le résultat du procédé final selon le nombre de récursion demandé...") "" (om-make-point 335 295) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 61 27) (quote "n-times") "" (om-make-point 190 105) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 64 40) (quote "initial value") "" (om-make-point 153 149) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 331 284) (quote "Variables : listes de deux atomes ou atome + sous-liste. $Exemples:$(a c) = si a, alors nth-random entre a et c$(c (x y z)) = si c, alors nth-random entre c x y z$$ATTENTION : les variables doivent toutes aussi être listées dans les rules pour déterminer ce qui arrive une fois qu'elles sont dans la chaîne!!$$Si pas de variable nécessaire, mettre 'nil'$$À noter qu'en mettant plusieurs fois la même valeur dans la liste des variables, on augmente sa probabilité d'être sélectionnée par nth-random...") "" (om-make-point 592 222) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 341 182) (quote "Rules : listes de deux atomes ou atome + sous-liste. $Exemples:$(b a) = si b, alors a$(a (a b)) = si a, alors a b$(c (b a d)) = si c, alors b a d$$NB: pour qu'une liste aille croissant, il faut qu'un nombre suffisant de règles génèrent plus qu'un atome (par ex. (a (a b)) ") "" (om-make-point 573 36) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 74 27) (quote "variables") "" (om-make-point 325 112) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 327 141) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 252 108) (om-make-point 27 30) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 224 150) (om-make-point 37 30) (list (quote a)) "(a)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 241 52) (om-make-point 109 30) (list (list (quote b) (quote a)) (list (quote a) (list (quote a) (quote b)))) "((b a) (a (a b)))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 49 28) (quote "rules") "" (om-make-point 240 26) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "l-systems" (quote ("elements" "PATCHES" "_utilities" "tools" "l-systems" "l-systems")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "rules" nil) (om-load-inputfun (quote input-funbox) "" "n-times" nil) (om-load-inputfun (quote input-funbox) "def = 1 (don't change)" "last-n" 1) (om-load-inputfun (quote input-funbox) "" "variables" nil))) (om-make-point 273 178) nil (list (list (quote a) (list (quote a) (quote b)) (list (quote a) (quote b) (quote a)) (list (quote a) (quote b) (quote a) (quote a) (quote b)) (list (quote a) (quote b) (quote a) (quote a) (quote b) (quote a) (quote b) (quote a)) (list (quote a) (quote b) (quote a) (quote a) (quote b) (quote a) (quote b) (quote a) (quote a) (quote b) (quote a) (quote a) (quote b)) (list (quote a) (quote b) (quote a) (quote a) (quote b) (quote a) (quote b) (quote a) (quote a) (quote b) (quote a) (quote a) (quote b) (quote a) (quote b) (quote a) (quote a) (quote b) (quote a) (quote b) (quote a)) (list (quote a) (quote b) (quote a) (quote a) (quote b) (quote a) (quote b) (quote a) (quote a) (quote b) (quote a) (quote a) (quote b) (quote a) (quote b) (quote a) (quote a) (quote b) (quote a) (quote b) (quote a) (quote a) (quote b) (quote a) (quote a) (quote b) (quote a) (quote b) (quote a) (quote a) (quote b) (quote a) (quote a) (quote b)))) nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((23 0 9 0 nil 0) (9 0 10 0 nil 0) (23 0 11 0 nil 0) (20 0 23 0 nil 0) (21 0 23 1 nil 0) (19 0 23 2 nil 0) (18 0 23 4 nil 0))) nil 6.13))
