; OM File Header - Saved 2023/05/03 18:14:15
; (7.01 :patc (om-make-point 280 10) (om-make-point 94 110) (om-make-point 936 521) "" 183 0 nil "2023/05/03 18:14:15")
; End File Header
(in-package :om)(load-lib-for (quote ("Chaos")))(setf *om-current-persistent* (om-load-patch1 "001-chaos-verhulst" (quote ((let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 130 26) (om-make-point 38 30) 2.8 "2.8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 287 101) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 77 29) (om-make-point 28 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 573 188) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 410 228) (om-make-point 191 137) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0 200.0 300.0 400.0 500.0 600.0 700.0 800.0 900.0 1000.0 1100.0 1200.0 1300.0 1400.0 1500.0 1600.0 1700.0 1800.0 1900.0 2000.0)) (quote (0.1 0.352 0.991 1.017 0.969 1.052 0.898 1.154 0.655 1.288 0.25 0.776 1.263 0.333 0.955 1.075 0.848 1.209 0.502 1.202 0.521)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF 2") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 247 189) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 93 225) (om-make-point 191 137) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000)) (quote (0 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 0 1 1 0 1)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 646 77) (om-make-point 618 443))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VERHULST" (quote alea::verhulst) (quote ((om-load-inputfun (quote input-funbox) "first value" "SEED" 0.1) (om-load-inputfun (quote input-funbox) "chaotic factor (between 0 and 3.0)" "LAMBDA" 2.8) (om-load-inputfun (quote input-funbox) "length of the sequence" "LONG" 20))) (om-make-point 64 69) (om-make-point 159 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 1 0 nil 0) (7 0 4 2 nil 0) (3 0 4 3 nil 0) (7 0 6 2 nil 0) (5 0 6 3 nil 0) (2 0 7 0 nil 0) (0 0 7 1 nil 0))) nil 7.01))
