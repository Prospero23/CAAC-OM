; OM File Header - Saved 2023/05/13 13:20:31
; (7.01 :patc (om-make-point 388 10) (om-make-point 255 32) (om-make-point 1199 818) "" 183 0 nil "2023/05/13 13:20:31")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "005-psappha" (quote ((let ((box (om-load-boxcall (quote abstraction) "G" (om-load-patch-abs1 "G" (quote ((let ((box (om-load-boxout "output 2" 1 (om-make-point 420 415) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "sieve-object" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 294 415) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "points" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 3" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 310 337) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 2" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 689 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD 2" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 835 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE 2" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 40) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 717 295) (om-make-point 122 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 1 6 11 16 21 26 31 36)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-INTERSECTION" (quote c-intersection) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 359 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 18 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 40) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 68 358) (om-make-point 122 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 6 14 22 30 38)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 148 267) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 564 40) (om-make-point 66 30) (list 5 1 40) "(5 1 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 4" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 556 137) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 1 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 176 34) (om-make-point 66 30) (list 8 6 40) "(8 6 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 2" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 121 73) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 6 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 1 0 nil 0) (6 0 2 0 nil 0) (11 0 3 0 nil 0) (10 0 4 0 nil 0) (4 0 5 1 nil 0) (3 0 5 2 nil 0) (13 0 6 0 nil 0) (11 0 6 1 nil 0) (12 0 7 0 nil 0) (7 0 8 1 nil 0) (9 0 8 2 nil 0) (13 0 9 0 nil 0) (10 0 11 1 nil 0) (12 0 13 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 1072 472) nil (list (list 6) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list "crible-i" (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 6 40) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 1 40) :from-file t))) :from-file t))) nil "G"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "F" (om-load-patch-abs1 "F" (quote ((let ((box (om-load-boxout "output 2" 1 (om-make-point 420 415) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "sieve-object" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 294 415) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "points" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 3" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 310 337) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 2" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 689 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD 2" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 835 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE 2" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 40) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 717 295) (om-make-point 122 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 2 7 12 17 22 27 32 37)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-INTERSECTION" (quote c-intersection) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 359 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 18 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 40) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 68 358) (om-make-point 122 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 1 9 17 25 33)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 148 267) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 564 40) (om-make-point 66 30) (list 5 2 40) "(5 2 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 4" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 556 137) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 2 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 176 34) (om-make-point 56 30) (list 8 1 40) "(8 1 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 2" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 121 73) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 1 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 1 0 nil 0) (6 0 2 0 nil 0) (11 0 3 0 nil 0) (10 0 4 0 nil 0) (4 0 5 1 nil 0) (3 0 5 2 nil 0) (13 0 6 0 nil 0) (11 0 6 1 nil 0) (12 0 7 0 nil 0) (7 0 8 1 nil 0) (9 0 8 2 nil 0) (13 0 9 0 nil 0) (10 0 11 1 nil 0) (12 0 13 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 856 468) nil (list (list 17) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list "crible-i" (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 1 40) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 2 40) :from-file t))) :from-file t))) nil "F"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "E" (om-load-patch-abs1 "E" (quote ((let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 759 50) (om-make-point 66 30) (list 5 4 40) "(5 4 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 6" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 749 94) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 4 40) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 437 503) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "sieve-object" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 281 506) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "points" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 3" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 306 408) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE 2" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 661 397) (om-make-point 156 151) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 2 3 4 7 8 9 12 13 14 17 18 19 22 23 24 27 28 29 32 33 34 37 38 39)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD 2" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 631 322) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 39 357) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 62 428) (om-make-point 150 123) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 5 6 13 14 21 22 29 30 37 38)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 2" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 714 307) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 91 309) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-INTERSECTION" (quote c-intersection) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 366 309) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-UNION 2" (quote c-union) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil) (om-load-inputfun (quote input-funbox) "" "REST" nil))) (om-make-point 571 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-UNION" (quote c-union) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 184 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 662 51) (om-make-point 66 30) (list 5 3 40) "(5 3 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 561 47) (om-make-point 66 30) (list 5 2 40) "(5 2 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 208 47) (om-make-point 66 30) (list 8 6 40) "(8 6 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 108 51) (om-make-point 66 30) (list 8 5 40) "(8 5 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 5" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 629 95) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 3 40) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 4" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 523 87) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 2 40) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 2" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 180 83) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 6 40) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 79 86) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 5 40) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 1 nil 0) (11 0 2 0 nil 0) (4 0 3 0 nil 0) (11 0 4 0 nil 0) (6 0 5 1 nil 0) (9 0 5 2 nil 0) (14 0 6 0 nil 0) (17 0 7 0 nil 0) (7 0 8 1 nil 0) (10 0 8 2 nil 0) (12 0 9 0 nil 0) (13 0 10 0 nil 0) (13 0 11 0 nil 0) (12 0 11 1 nil 0) (19 0 12 0 nil 0) (18 0 12 1 nil 0) (1 0 12 2 nil 0) (21 0 13 0 nil 0) (20 0 13 1 nil 0) (14 0 18 1 nil 0) (15 0 19 1 nil 0) (16 0 20 1 nil 0) (17 0 21 1 nil 0))) 7.01 nil "" (om-make-point 0 32) (om-make-point 1512 922)) (quote nil) (om-make-point 589 479) nil (list (list 13 14 22 29 37 38) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list "crible-i" (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list "crible-u" (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 5 40) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 6 40) :from-file t))) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list "crible-u" (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 2 40) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 3 40) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 4 40) :from-file t))) :from-file t))) :from-file t))) nil "E"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "D" (om-load-patch-abs1 "D" (quote ((let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 438 33) (om-make-point 66 30) (list 5 4 40) "(5 4 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 6" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 422 79) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 4 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 354 37) (om-make-point 66 30) (list 5 3 40) "(5 3 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 5" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 338 83) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 3 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 420 415) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "sieve-object" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 294 415) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "points" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 3" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 310 337) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 2" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 689 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD 2" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 835 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE 2" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 40) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 715 295) (om-make-point 122 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 4 12 20 28 36)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-INTERSECTION" (quote c-intersection) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 359 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 18 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 40) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 68 358) (om-make-point 122 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 148 267) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-UNION" (quote c-union) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil) (om-load-inputfun (quote input-funbox) "" "REST" nil) (om-load-inputfun (quote input-funbox) "" "REST" nil) (om-load-inputfun (quote input-funbox) "" "REST" nil))) (om-make-point 121 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 564 40) (om-make-point 66 30) (list 8 4 40) "(8 4 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 4" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 557 104) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 4 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 271 32) (om-make-point 66 30) (list 5 2 40) "(5 2 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 176 34) (om-make-point 66 30) (list 5 1 40) "(5 1 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 62 38) (om-make-point 66 30) (list 5 0 40) "(5 0 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 3" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 255 78) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 2 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 2" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 155 77) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 1 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 48 76) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 0 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 1 nil 0) (2 0 3 1 nil 0) (10 0 4 0 nil 0) (6 0 5 0 nil 0) (10 0 6 0 nil 0) (16 0 7 0 nil 0) (15 0 8 0 nil 0) (8 0 9 1 nil 0) (7 0 9 2 nil 0) (14 0 10 0 nil 0) (16 0 10 1 nil 0) (19 0 11 0 nil 0) (11 0 12 1 nil 0) (13 0 12 2 nil 0) (14 0 13 0 nil 0) (22 0 14 0 nil 0) (21 0 14 1 nil 0) (20 0 14 2 nil 0) (3 0 14 3 nil 0) (1 0 14 4 nil 0) (15 0 16 1 nil 0) (17 0 20 1 nil 0) (18 0 21 1 nil 0) (19 0 22 1 nil 0))) 7.01 nil "" (om-make-point 608 41) (om-make-point 953 400)) (quote nil) (om-make-point 207 484) nil (list (list 4 12 20 28 36) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list "crible-i" (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list "crible-u" (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 0 40) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 1 40) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 2 40) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 3 40) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 4 40) :from-file t))) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 4 40) :from-file t))) :from-file t))) nil "D"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "C" (om-load-patch-abs1 "C" (quote ((let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 438 33) (om-make-point 66 30) (list 5 4 40) "(5 4 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 6" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 422 79) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 4 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 354 37) (om-make-point 66 30) (list 5 3 40) "(5 3 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 5" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 338 83) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 3 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 420 415) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "sieve-object" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 294 415) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "points" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 3" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 310 337) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 2" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 689 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD 2" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 835 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE 2" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 40) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 715 295) (om-make-point 122 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 3 11 19 27 35)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-INTERSECTION" (quote c-intersection) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 359 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 18 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 40) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 68 358) (om-make-point 122 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 148 267) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-UNION" (quote c-union) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil) (om-load-inputfun (quote input-funbox) "" "REST" nil) (om-load-inputfun (quote input-funbox) "" "REST" nil) (om-load-inputfun (quote input-funbox) "" "REST" nil))) (om-make-point 121 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 564 40) (om-make-point 66 30) (list 8 3 40) "(8 3 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 4" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 557 104) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 3 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 271 32) (om-make-point 66 30) (list 5 2 40) "(5 2 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 176 34) (om-make-point 66 30) (list 5 1 40) "(5 1 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 62 38) (om-make-point 66 30) (list 5 0 40) "(5 0 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 3" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 255 78) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 2 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 2" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 155 77) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 1 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 48 76) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 0 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 1 nil 0) (2 0 3 1 nil 0) (10 0 4 0 nil 0) (6 0 5 0 nil 0) (10 0 6 0 nil 0) (16 0 7 0 nil 0) (15 0 8 0 nil 0) (8 0 9 1 nil 0) (7 0 9 2 nil 0) (14 0 10 0 nil 0) (16 0 10 1 nil 0) (19 0 11 0 nil 0) (11 0 12 1 nil 0) (13 0 12 2 nil 0) (14 0 13 0 nil 0) (22 0 14 0 nil 0) (21 0 14 1 nil 0) (20 0 14 2 nil 0) (3 0 14 3 nil 0) (1 0 14 4 nil 0) (15 0 16 1 nil 0) (17 0 20 1 nil 0) (18 0 21 1 nil 0) (19 0 22 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 776 114) nil (list (list 3 11 19 27 35) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list "crible-i" (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list "crible-u" (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 0 40) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 1 40) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 2 40) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 3 40) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 4 40) :from-file t))) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 3 40) :from-file t))) :from-file t))) nil "C"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE 7" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 40) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 1016 560) (om-make-point 122 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 6)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE 6" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 40) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 809 549) (om-make-point 122 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 17)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE 5" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 40) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 520 569) (om-make-point 122 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 13 14 22 29 37 38)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE 4" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 40) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 152 578) (om-make-point 122 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 4 12 20 28 36)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE 3" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 40) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 711 211) (om-make-point 122 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 3 11 19 27 35)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE 2" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 40) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 407 216) (om-make-point 122 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 0 10 25 40)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 40) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 88 225) (om-make-point 122 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 1 8 16 23 31 33)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 8" (om-make-point 272 30) (quote "Class activity_realize the sieve of Psappha") "" (om-make-point 394 43) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "B" (om-load-patch-abs1 "B" (quote ((let ((box (om-load-boxout "output 2" 1 (om-make-point 420 415) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "sieve-object" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 294 415) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "points" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 3" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 310 337) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 2" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 689 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD 2" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 835 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE 2" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 40) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 717 295) (om-make-point 122 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 0 5 10 15 20 25 30 35 40)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-INTERSECTION" (quote c-intersection) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 359 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 18 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 40) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 68 358) (om-make-point 122 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 0 1 2 8 9 10 16 17 18 24 25 26 32 33 34 40)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 148 267) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-UNION" (quote c-union) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil) (om-load-inputfun (quote input-funbox) "" "REST" nil))) (om-make-point 121 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 564 40) (om-make-point 66 30) (list 5 0 40) "(5 0 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 4" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 557 104) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 0 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 271 32) (om-make-point 56 30) (list 8 2 40) "(8 2 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 176 34) (om-make-point 56 30) (list 8 1 40) "(8 1 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 62 38) (om-make-point 56 30) (list 8 0 40) "(8 0 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 3" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 255 78) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 2 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 2" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 155 77) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 1 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 48 76) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 0 40) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (2 0 1 0 nil 0) (6 0 2 0 nil 0) (12 0 3 0 nil 0) (11 0 4 0 nil 0) (4 0 5 1 nil 0) (3 0 5 2 nil 0) (10 0 6 0 nil 0) (12 0 6 1 nil 0) (15 0 7 0 nil 0) (7 0 8 1 nil 0) (9 0 8 2 nil 0) (10 0 9 0 nil 0) (18 0 10 0 nil 0) (17 0 10 1 nil 0) (16 0 10 2 nil 0) (11 0 12 1 nil 0) (13 0 16 1 nil 0) (14 0 17 1 nil 0) (15 0 18 1 nil 0))) 7.01 nil "" (om-make-point 534 493) (om-make-point 956 400)) (quote nil) (om-make-point 487 116) nil (list (list 0 10 25 40) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list "crible-i" (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list "crible-u" (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 0 40) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 1 40) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 2 40) :from-file t))) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 0 40) :from-file t))) :from-file t))) nil "B"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "A" (om-load-patch-abs1 "A" (quote ((let ((box (om-load-boxout "output 2" 1 (om-make-point 437 503) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "sieve-object" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 281 506) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "points" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 3" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 306 408) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE 2" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 661 397) (om-make-point 156 151) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 1 3 6 8 11 13 16 18 21 23 26 28 31 33 36 38)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD 2" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 631 322) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 39 357) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 62 428) (om-make-point 150 123) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 40 :puntos (list (list 0 1 7 8 9 15 16 17 23 24 25 31 32 33 39 40)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 2" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 714 307) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 91 309) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-INTERSECTION" (quote c-intersection) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 366 309) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-UNION 2" (quote c-union) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 571 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-UNION" (quote c-union) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil) (om-load-inputfun (quote input-funbox) "" "REST" nil))) (om-make-point 184 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 662 51) (om-make-point 56 30) (list 5 3 40) "(5 3 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 561 47) (om-make-point 56 30) (list 5 1 40) "(5 1 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 306 52) (om-make-point 56 30) (list 8 7 40) "(8 7 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 208 47) (om-make-point 56 30) (list 8 1 40) "(8 1 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 108 51) (om-make-point 56 30) (list 8 0 40) "(8 0 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 5" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 624 91) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 3 40) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 4" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 523 87) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 1 40) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 3" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 276 81) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 7 40) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 2" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 180 83) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 1 40) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 79 86) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 0 40) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 0 0 nil 0) (2 0 1 0 nil 0) (9 0 2 0 nil 0) (4 0 3 1 nil 0) (7 0 3 2 nil 0) (12 0 4 0 nil 0) (16 0 5 0 nil 0) (5 0 6 1 nil 0) (8 0 6 2 nil 0) (10 0 7 0 nil 0) (11 0 8 0 nil 0) (11 0 9 0 nil 0) (10 0 9 1 nil 0) (18 0 10 0 nil 0) (17 0 10 1 nil 0) (21 0 11 0 nil 0) (20 0 11 1 nil 0) (19 0 11 2 nil 0) (12 0 17 1 nil 0) (13 0 18 1 nil 0) (14 0 19 1 nil 0) (15 0 20 1 nil 0) (16 0 21 1 nil 0))) 7.01 nil "" (om-make-point 29 49) (om-make-point 830 747)) (quote nil) (om-make-point 191 118) nil (list (list 1 8 16 23 31 33) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list "crible-i" (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list "crible-u" (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 0 40) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 1 40) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 7 40) :from-file t))) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list "crible-u" (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 1 40) :from-file t)) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 3 40) :from-file t))) :from-file t))) :from-file t))) nil "A"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 105 30) (quote "8@6 AND 5@1") "" (om-make-point 1041 429) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 105 30) (quote "8@1 AND 5@2") "" (om-make-point 816 434) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 238 30) (quote "(8@5+8@6) AND (5@2+5@3+5@4)") "" (om-make-point 477 442) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 265 30) (quote "8@4 AND (5@0+5@1+5@2+5@3+5@4)") "" (om-make-point 75 436) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 265 30) (quote "8@3 AND (5@0+5@1+5@2+5@3+5@4)") "" (om-make-point 702 78) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 201 30) (quote "(8@0+8@1+8@2) AND (5@0)") "" (om-make-point 407 80) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 238 30) (quote "(8@0+8@1+8@7) AND (5@1+5@3)") "" (om-make-point 118 76) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 5 2 nil 0) (1 0 6 2 nil 0) (2 0 7 2 nil 0) (3 0 8 2 nil 0) (4 0 9 2 nil 0) (13 0 10 2 nil 0) (14 0 11 2 nil 0))) nil 7.01))
