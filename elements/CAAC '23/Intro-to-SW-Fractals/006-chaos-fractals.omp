; OM File Header - Saved 2023/05/01 10:50:28
; (7.01 :patc (om-make-point 10 60) (om-make-point 50 50) (om-make-point 615 511) "" 183 0 "2023/05/01 10:27:31" "2023/05/01 10:36:32")
; End File Header
(in-package :om)(load-lib-for (quote ("Chaos")))(setf *om-current-persistent* (om-load-patch1 "006-chaos-fractals" (quote ((let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 290 221) (om-make-point 183 188) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quotequote (7 8 8 7 8 8 8 8 8 9 9 8 7 7 7 7 15 18 18 15 19 18 18 19 19 24 24 20 13 14 14 13 13 14 14 13 13 12 12 13 13 13 13 13 13 13 13 13 10 11 11 10 12 13 13 12 12 15 15 13 9 9 9 9 26 26 26 26 27 27 27 27 27 27 27 27 26 26 26 26 33 35 35 33 36 36 36 36 36 41 41 37 31 32 32 31 31 32 32 31 31 30 30 31 31 31 31 31 31 31 31 31 28 29 29 28 30 31 31 30 30 33 33 31 27 28 28 27 27 27 27 27 29 30 30 29 29 32 32 30 26 26 26 26 52 56 56 54 66 70 70 67 66 81 81 70 47 50 50 48 49 51 51 49 52 52 52 52 52 57 57 54 47 48 48 48 33 36 36 34 37 36 36 36 37 41 41 38 32 32 32 32 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 5 6 6 5 8 8 8 8 8 11 11 8 4 5 5 4 4 5 5 4 5 5 5 5 5 6 6 5 4 4 4 4 1 2 2 2 2 2 2 2 2 3 3 2 1 1 1 1 199 200 200 199 202 203 203 203 202 207 207 204 197 198 198 198 236 251 251 240 256 254 254 255 256 281 281 263 228 233 233 229 228 231 231 228 226 221 221 224 226 224 224 225 228 228 228 228 211 216 216 212 223 227 227 224 223 239 239 228 206 209 209 207 297 299 299 298 301 302 302 301 301 305 305 302 296 297 297 296 335 349 349 339 356 356 355 356 356 381 381 363 328 332 332 329 327 331 331 328 327 323 323 326 327 327 327 327 328 327 327 328 309 314 314 310 321 323 323 321 321 334 334 324 305 307 307 305 301 306 306 302 314 319 319 316 314 330 330 319 296 299 299 297 438 458 458 444 509 534 534 516 509 592 592 532 411 427 427 416 419 433 433 423 440 439 439 440 440 465 465 447 411 416 416 413 335 349 349 339 352 350 350 352 352 375 375 359 328 332 332 329 161 162 162 161 163 164 164 164 163 166 166 164 160 161 161 160 187 191 191 188 200 205 205 201 200 216 216 205 182 185 185 183 183 186 186 184 187 186 186 186 187 191 191 188 182 183 183 182 167 170 170 168 171 171 171 171 171 176 176 173 166 167 167 166 171 171 171 171 173 173 173 173 173 175 175 173 170 170 170 170 193 197 197 194 205 207 207 205 205 218 218 208 188 191 191 189 189 191 191 190 192 191 191 191 192 195 195 192 188 189 189 189 176 179 179 177 180 180 180 180 180 185 185 182 175 176 176 175 195 195 195 195 195 195 195 195 195 195 195 195 195 195 195 195 193 197 197 194 192 189 189 191 192 192 192 192 193 193 193 193 192 192 192 192 189 187 187 188 189 185 185 188 193 193 193 193 196 196 196 196 199 200 200 199 199 202 202 199 195 195 195 195 197 198 198 197 200 201 201 201 200 205 205 201 195 196 196 195 234 248 248 238 254 254 254 254 254 279 279 261 227 231 231 228 226 230 230 227 226 222 222 225 226 226 226 226 227 226 226 227 208 213 213 210 220 222 222 220 220 233 233 224 204 206 206 205 160 160 160 160 161 161 161 161 161 162 162 161 160 160 160 160 167 168 168 167 170 172 172 171 170 174 174 172 166 166 166 166 166 167 167 166 167 167 167 167 167 168 168 167 166 166 166 166 162 163 163 162 163 163 163 163 163 164 164 163 162 162 162 162 55 56 56 56 58 59 59 58 58 61 61 59 55 55 55 55 80 85 85 82 93 97 97 94 93 109 109 98 75 78 78 76 76 79 79 77 79 78 78 79 79 82 82 80 75 76 76 76 62 65 65 63 66 66 66 66 66 72 72 68 60 61 61 61 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 82 80 83 83 81 79 75 75 78 79 78 78 79 80 80 80 80 79 78 78 79 75 73 73 75 75 71 71 74 80 79 79 80 83 83 83 83 86 88 88 86 86 89 89 87 82 82 82 82 84 85 85 84 88 89 89 88 88 93 93 89 82 83 83 83 125 140 140 129 147 147 147 147 147 175 174 155 117 122 122 118 116 120 120 117 115 111 111 114 115 115 115 115 117 117 117 117 97 102 102 98 110 112 112 110 110 125 125 114 92 95 95 93 44 45 45 44 45 45 45 45 45 46 46 45 44 44 44 44 52 53 53 52 55 57 57 56 55 60 60 57 50 51 51 50 51 51 51 51 51 51 51 51 51 53 53 52 50 50 50 50 46 47 47 46 47 47 47 47 47 48 48 48 46 46 46 46)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPC") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 236 57) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IFSX" (quote alea::ifsx) (quote ((om-load-inputfun (quote input-funbox) "data list" "DATA" nil) (om-load-inputfun (quote input-funbox) "number of iterations" "INTS" 1) (om-load-inputfun (quote input-funbox) "object, may be a list of pairs or a bpf" "OBJET" (list (list 1 1))) (om-load-inputfun (quote input-funbox) "multiplicative horizontal translation factor" "EFACT" 100) (om-load-inputfun (quote input-funbox) "multiplicative vertical translation factor" "FFACT" 100) (om-load-inputfunmenu1 (quote input-funmenu) "mode" "MODE" 1 (list (list "deter" 1) (list "random" 2))))) (om-make-point 202 101) (om-make-point 209 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IFS-LIB" (quote alea::ifs-lib) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "data list" "DATA" "fern1" (list (list "syerp" "syerp") (list "tree0" "tree0") (list "fern" "fern") (list "drag" "drag") (list "cantor" "cantor") (list "twig" "twig") (list "cristal" "cristal") (list "fern1" "fern1") (list "tree1" "tree1") (list "castle" "castle") (list "cloud" "cloud") (list "frnsqr" "frnsqr") (list "jewel" "jewel") (list "jewel2" "jewel2") (list "frntre7" "frntre7") (list "fern2" "fern2") (list "plant1" "plant1") (list "plant2" "plant2") (list "mountain" "mountain"))))) (om-make-point 151 19) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 1 0 1 nil 0) (2 2 0 2 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0))) nil 7.01))
