; OM File Header - Saved 2023/05/01 11:39:43
; (7.01 :patc (om-make-point 10 110) (om-make-point 50 50) (om-make-point 848 655) "" 183 0 "2023/05/01 10:40:05" "2023/05/01 11:39:43")
; End File Header
(in-package :om)(load-lib-for (quote ("Chaos")))(setf *om-current-persistent* (om-load-patch1 "003-chaos-henon" (quote ((let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 186 27) (om-make-point 38 30) 1.1 "1.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 139 26) (om-make-point 28 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 458 273) (om-make-point 214 152) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0 200.0 300.0 400.0 500.0 600.0 700.0 800.0 900.0 1000.0 1100.0 1200.0 1300.0 1400.0 1500.0 1600.0 1700.0 1800.0 1900.0 2000.0 2100.0 2200.0 2300.0 2400.0 2500.0 2600.0 2700.0 2800.0 2900.0 3000.0 3100.0 3200.0 3300.0 3400.0 3500.0 3600.0 3700.0 3800.0 3900.0 4000.0 4100.0 4200.0 4300.0 4400.0 4500.0 4600.0 4700.0 4800.0 4900.0 5000.0 5100.0 5200.0 5300.0 5400.0 5500.0 5600.0 5700.0 5800.0 5900.0 6000.0 6100.0 6200.0 6300.0 6400.0 6500.0 6600.0 6700.0 6800.0 6900.0 7000.0 7100.0 7200.0 7300.0 7400.0 7500.0 7600.0 7700.0 7800.0 7900.0 8000.0 8100.0 8200.0 8300.0 8400.0 8500.0 8600.0 8700.0 8800.0 8900.0 9000.0 9100.0 9200.0 9300.0 9400.0 9500.0 9600.0 9700.0 9800.0)) (quote (-0.047 -0.312 0.356 -0.07 0.262 -0.166 0.301 -0.142 0.317 0.088 0.177 -0.217 0.32 -0.126 0.313 0.104 0.21 0.034 -0.281 0.344 -0.102 0.306 0.115 0.225 0.17 0.198 0.176 0.139 -0.114 -0.335 0.372 0.034 0.258 0.149 0.207 0.165 0.114 -0.247 0.333 -0.104 0.277 -0.155 0.297 -0.145 0.319 0.098 0.212 0.021 -0.288 0.36 0.056 0.249 0.155 0.206 0.18 0.192 0.173 0.105 -0.251 0.333 -0.113 0.309 0.112 0.226 0.167 0.19 0.119 -0.147 -0.267 -0.382 0.38 -0.033 0.282 0.125 0.182 -0.069 -0.319 0.357 -0.084 0.3 0.116 0.206 0.047 -0.278 0.357 0.06 0.246 0.142 0.136 -0.24 0.347 0.074 0.242 0.16 0.205 0.184 0.21 0.3 1.1)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF 2") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 132 273) (om-make-point 214 152) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800)) (quote (1 0 -1 1 0 1 -1 1 0 1 0 1 -1 1 0 1 0 1 0 -1 1 0 1 0 1 1 1 1 0 0 -1 1 0 1 0 1 1 0 -1 1 0 1 -1 1 0 1 0 1 0 -1 1 0 1 1 1 1 1 1 0 -1 1 0 1 0 1 1 1 0 0 -1 -1 1 0 1 0 1 0 -1 1 0 1 0 1 0 -1 1 0 1 0 0 -1 1 0 1 1 1 1 1 1)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 402 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 321 33) (om-make-point 38 30) 0.3 "0.3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 252 35) (om-make-point 38 30) 1.4 "1.4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 315 235) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 612 202) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HENON" (quote alea::henon) (quote ((om-load-inputfun (quote input-funbox) "first x value" "XINIT" 1.0) (om-load-inputfun (quote input-funbox) "first y value" "YINIT" 1.0) (om-load-inputfun (quote input-funbox) "first parameter around 1.4" "A" 1.4) (om-load-inputfun (quote input-funbox) "second  parameter around 0.3" "B" 0.3) (om-load-inputfun (quote input-funbox) "number of iterations steps" "PAS" 100))) (om-make-point 132 80) (om-make-point 289 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 2 2 2 nil 0) (8 0 2 3 nil 0) (9 1 3 2 nil 0) (7 0 3 3 nil 0) (9 2 4 0 nil 0) (1 0 9 0 nil 0) (0 0 9 1 nil 0) (6 0 9 2 nil 0) (5 0 9 3 nil 0))) nil 7.01))
