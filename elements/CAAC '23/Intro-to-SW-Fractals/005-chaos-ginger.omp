; OM File Header - Saved 2023/05/01 11:39:43
; (7.01 :patc (om-make-point 10 160) (om-make-point 50 50) (om-make-point 1036 684) "" 183 0 "2023/05/01 11:04:57" "2023/05/01 11:39:43")
; End File Header
(in-package :om)(load-lib-for (quote ("Chaos")))(setf *om-current-persistent* (om-load-patch1 "005-chaos-ginger" (quote ((let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 223 22) (om-make-point 38 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 123 263) (om-make-point 178 137) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)) (quote (0 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 1)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF 2") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 336 263) (om-make-point 300 143) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.142 -0.142 -0.14 -0.138 -0.135 -0.132 -0.131 -0.127 -0.121 -0.115 -0.108 -0.102 -0.099 -0.091 -0.08 -0.072 -0.059 -0.046 -0.035 -0.019 -0.007 0.01 0.028 0.043 0.063 0.079 0.1 0.122 0.14 0.164 0.182 0.207 0.231 0.249 0.273 0.291 0.297 0.315 0.339 0.356 0.38 0.398 0.404 0.422 0.445 0.463 0.486 0.504 0.51 0.528 0.551 0.568 0.592 0.609 0.615 0.633 0.656 0.673 0.696 0.713 0.719 0.737 0.759 0.776 0.799 0.822 0.839 0.862 0.878 0.901 0.924 0.941 0.963 0.98 1.0 1.019 1.033 1.051 1.064 1.08 1.095 1.105 1.118 1.128 1.131 1.139 1.149 1.156 1.165 1.171 1.173 1.177 1.183 1.186 1.19 1.193 1.193 1.194 1.195)) (quote (0.504 0.528 0.463 0.568 0.422 0.609 0.398 0.633 0.356 0.673 0.315 0.713 0.291 0.737 0.249 0.776 0.207 0.182 0.839 0.14 0.878 0.1 0.079 0.941 0.043 0.98 1.0 -0.007 1.033 -0.035 1.064 1.08 -0.072 1.105 -0.091 1.128 -0.102 1.139 -0.115 1.156 -0.127 1.171 -0.132 1.177 -0.138 1.186 -0.142 1.193 -0.142 1.194 -0.14 1.195 -0.135 1.193 -0.131 1.19 -0.121 1.183 -0.108 1.173 -0.099 1.165 -0.08 1.149 -0.059 -0.046 1.118 -0.019 1.095 0.01 0.028 1.051 0.063 1.019 1.0 0.122 0.963 0.164 0.924 0.901 0.231 0.862 0.273 0.822 0.297 0.799 0.339 0.759 0.38 0.719 0.404 0.696 0.445 0.656 0.486 0.51 0.615 0.592 0.551)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 276 226) (om-make-point 17 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 623 202) (om-make-point 17 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GINGER" (quote alea::ginger) (quote ((om-load-inputfun (quote input-funbox) "first x value" "XINIT" 1.0) (om-load-inputfun (quote input-funbox) "first y value" "YINIT" 1.0) (om-load-inputfun (quote input-funbox) "contraction parameter (between 0 and 1)" "CR" 0.9) (om-load-inputfun (quote input-funbox) "number of iterations steps" "PAS" 100))) (om-make-point 114 68) (om-make-point 210 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 1 1 1 nil 0) (5 2 1 2 nil 0) (3 0 1 3 nil 0) (5 1 2 1 nil 0) (5 2 2 2 nil 0) (4 0 2 3 nil 0) (0 0 5 2 nil 0))) nil 7.01))
