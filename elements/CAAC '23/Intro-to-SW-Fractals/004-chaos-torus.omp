; OM File Header - Saved 2023/05/01 11:39:43
; (7.01 :patc (om-make-point 172 110) (om-make-point 50 50) (om-make-point 801 505) "" 183 0 "2023/05/01 11:01:17" "2023/05/01 11:39:43")
; End File Header
(in-package :om)(load-lib-for (quote ("Chaos")))(setf *om-current-persistent* (om-load-patch1 "004-chaos-torus" (quote ((let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 194 39) (om-make-point 38 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 581 186) (om-make-point 17 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 256 206) (om-make-point 17 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 316 243) (om-make-point 300 143) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.984 0.984 0.985 0.99 0.991 0.995 1.0 1.001 1.011 1.016 1.025 1.032 1.04 1.046 1.055 1.056 1.067 1.075 1.08 1.082 1.089 1.099 1.101 1.107 1.118 1.119 1.134 1.144 1.156 1.172 1.182 1.197 1.205 1.214 1.222 1.225 1.231 1.233 1.24 1.241 1.243 1.244 1.247 1.249 1.251 1.253 1.253 1.255 1.255 1.775 1.775 1.779 1.781 1.786 1.791 1.797 1.811 1.812 1.829 1.841 1.846 1.862 1.874 1.88 1.884 1.914 1.917 1.932 1.941 1.954 1.959 1.972 1.987 2.001 2.014 2.03 2.034 2.061 2.078 2.098 2.12 2.137 2.15 2.169 2.17 2.181 2.192 2.204 2.206 2.209 2.214 2.215 2.22 2.222 2.224 2.224 2.224 2.224 2.225)) (quote (0.913 0.922 0.938 0.963 0.089 0.094 1.0 0.1 0.108 6.257 0.12 6.236 0.908 6.221 0.913 6.212 0.919 0.926 1.169 0.932 1.182 0.142 1.201 0.136 0.127 1.228 0.113 1.264 0.093 6.151 1.111 6.141 1.155 6.135 1.189 6.133 6.133 1.212 1.228 1.384 1.379 1.371 1.359 1.343 6.271 6.263 6.212 6.25 6.233 5.382 2.688 5.382 2.703 5.382 2.729 5.38 2.774 5.378 2.737 2.841 2.759 2.78 2.8 5.241 2.816 5.203 5.326 5.313 5.175 5.292 5.156 5.142 5.262 3.17 3.197 5.22 3.235 3.289 3.189 3.361 3.275 4.979 3.338 3.381 4.944 3.409 4.921 5.02 4.908 5.009 4.902 4.995 4.978 4.959 3.607 3.604 3.583 3.566 3.596)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF 2") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 103 243) (om-make-point 178 137) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2)) (quote (1 0 1 0 1 6 1 6 1 6 1 0 1 0 1 6 1 6 1 6 1 0 1 0 1 6 1 6 1 6 1 0 1 0 1 6 1 6 1 6 1 0 1 0 1 6 1 6 1 5 3 5 4 5 3 5 3 5 3 5 3 5 4 5 3 5 3 5 3 5 3 5 4 5 3 5 3 5 3 5 3 5 4 5 3 5 3 5 3 5 3 5 4 5 3 5 3 5 3)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TORUS" (quote alea::torus) (quote ((om-load-inputfun (quote input-funbox) "first phase space value" "IINIT" 1.0) (om-load-inputfun (quote input-funbox) "second phase space value" "TINIT" 1.0) (om-load-inputfun (quote input-funbox) "deviation factor" "K" 1.0) (om-load-inputfun (quote input-funbox) "number of iterations steps" "PAS" 100))) (om-make-point 77 85) (om-make-point 173 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 1 3 1 nil 0) (5 2 3 2 nil 0) (1 0 3 3 nil 0) (5 1 4 1 nil 0) (5 2 4 2 nil 0) (2 0 4 3 nil 0) (0 0 5 2 nil 0))) nil 7.01))
