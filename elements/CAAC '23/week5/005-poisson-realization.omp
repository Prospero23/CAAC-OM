; OM File Header - Saved 2023/03/17 20:32:42
; (7.01 :patc (om-make-point 10 110) (om-make-point 379 145) (om-make-point 850 689) "" 183 0 nil "2023/02/22 13:39:41")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "005-poisson-realization" (quote ((let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 263 301) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 189 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 352 531) (om-make-point 44 30) (list 50) "(50)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 144 573) (om-make-point 277 114) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500 6500) (6900 7900 7200 8200) (6200 7300 8400 7900 8100 5900 6800 7000) (7500 8400 6500 7400 7600) (7500 6500) (8600 6700 7700 7800 8800) (6500 7600 8700 8100 8400 5900 6200 7000 7300) (7600 6700 7800) (6800) (6500 7600 8700 8100 8400 5900 6200 7000 7300) (6900 7200 7500) (7500 6500) (6900 8000 7200 7500 8300 8600) (6800 7700 7900) (7500 7800 8600 6500 6800 7600 7900) (6200 7200 7300 7000 8000 5900 6900) (6500 7600 8700 8100 8400 5900 6200 7000 7300) (7500 7800 6500 6800) (8600 6700 7700 7800 8800) (6800 7100 7900 8200) (6900 8000 7200 7500 8300 8600) (7500 7800 6500 6800) (6900 7200) (8500 6500 7500) (7600 6700 7000 7800 8100) (6900 7200) (6500 7600 7000 7300 5900 6200) (6200 7300 7000 5900) (6800 7100 7900 8200) (7500 6500) (7500 7800 6500 6800) (8500 6500 7500) (7500 7800 8600 6500 6800 7600 7900) (6800 7100 7900 8200) (6800 7800) (7600 6700 7000 7800 8100) (6800 7700 7900) (6800 7700 7900) (6800 7700 7900) (6900 7200 7500) (7500 7800 8600 6500 6800 7600 7900) (6900 7900 7200 8200) (6200 7200 7300 7000 8000 5900 6900) (6900 8000 7200 7500 8300 8600) (7500 7800 8600 6500 6800 7600 7900) (6800 7100) (7500 8400 6500 7400 7600) (6200 7200 7300 7000 8000 5900 6900) (6800 7800) (6200 7200 7300 7000 8000 5900 6900) (6500 7600 7000 7300 5900 6200) (7500 8400 6500 7400 7600) (6900 7200) (6200 7300 7000 5900) (6200 7300 8400 7900 8100 5900 6800 7000) (7600 6700 7000 7800 8100) (6900 7200 7500) (6800 7800) (7500 8400 6500 7400 7600) (7500 7800 8600 6500 6800 7600 7900) (6800) (8600 6700 7700 7800 8800) (6800) (6200 7300 8400 7900 8100 5900 6800 7000) (6500 7600 8700 8100 8400 5900 6200 7000 7300) (6200 7300 8400 7900 8100 5900 6800 7000) (7600 6700 7000 7800 8100) (7800 8000 7200 8100 8300) (6500 7600 7000 7300 5900 6200) (7500 6500) (6800 7800) (6800 7100 7900 8200) (6800 7700 7900) (6900 7200) (7600 6700 7000 7800 8100) (6800 7800) (8500 6500 7500) (6800 7100) (7600 6700 7800) (8600 6700 7700 7800 8800) (6800 7700 7900) (7500 6500) (8600 6700 7700 7800 8800) (6200 7300 8400 7900 8100 5900 6800 7000) (7500 6500) (6900 8000 7200 7500 8300 8600) (8500 6500 7500) (6900 8000 7200 7500 8300 8600) (6200 7300 8400 7900 8100 5900 6800 7000) (8500 6500 7500) (7500 6500) (8500 6700 7600 7800 8700 8900) (7600 6700 7000 7800 8100) (6800 7100) (6200 7300 7000 5900) (7600 6700 7800) (7500 7800 6500 6800) (6900 8000 7200 7500 8300 8600) (6800 7800) (6900 8000 7200 7500 8300 8600) (6900 7200) (6500 7600 7000 7300 5900 6200) (6900 7900 7200 8200) (6200 7300 8400 7900 8100 5900 6800 7000) (8600 6700 7700 7800 8800) (6200 7200 7300 7000 8000 5900 6900) (6200 7200 7300 7000 8000 5900 6900) (7500 7800 6500 6800) (6200 7300 7000 5900) (6800 7100) (6900 7200 7500) (6800 7700 7900) (6800) (8600 6700 7700 7800 8800) (6500 7600 7000 7300 5900 6200) (8500 6500 7500) (7500 8400 6500 7400 7600) (7500 6500) (6200 7200 7300 7000 8000 5900 6900) (6500 7600 8700 8100 8400 5900 6200 7000 7300) (7600 6700 7000 7800 8100) (6800 7800) (6800 7700 7900) (6800 7800) (6900 7200) (7500 6500) (6900 7200 7500) (6200 7300 7000 5900) (7600 8700 6700 7000 7800 8100 8900 9200) (6200 7300 8400 7900 8100 5900 6800 7000) (7800 8000 7200 8100 8300) (6500 7600 8700 8100 8400 5900 6200 7000 7300) (6200 7300 8400 7900 8100 5900 6800 7000) (7500 6500) (8500 6700 7600 7800 8700 8900) (8600 6700 7700 7800 8800) (7500 6500) (6800 7100) (7500 7800 8600 6500 6800 7600 7900) (6800) (7800 8000 7200 8100 8300) (7500 6500) (6500 7600 8700 8100 8400 5900 6200 7000 7300) (6800 7700 7900) (7800 8000 7200 8100 8300) (8500 6700 7600 7800 8700 8900) (6200 7200 7300 7000 8000 5900 6900) (6900 7900 7200 8200) (8600 6700 7700 7800 8800) (6800 7100) (7500 8400 6500 7400 7600) (7500 7800 8600 6500 6800 7600 7900) (6800 7700 7900) (6800 7100 7900 8200) (7600 6700 7800) (7800 8000 7200 8100 8300) (8500 6500 7500) (6900 7200) (7500 7800 8600 6500 6800 7600 7900) (7500 7800 8600 6500 6800 7600 7900) (6900 8000 7200 7500 8300 8600) (6800 7100 7900 8200) (8500 6700 7600 7800 8700 8900) (7600 6700 7800) (6800 7700 7900) (6800) (6900 7200 7500) (6200 7200 7300 7000 8000 5900 6900) (6900 7200) (6200 7300 7000 5900) (6800 7700 7900) (6800) (7500 7800 8600 6500 6800 7600 7900) (7500 7800 6500 6800) (7500 8400 6500 7400 7600) (6800) (8500 6500 7500) (6500 7600 8700 8100 8400 5900 6200 7000 7300) (7500 7800 6500 6800) (8500 6500 7500) (7500 6500) (7800 8000 7200 8100 8300) (7500 7800 6500 6800) (7500 7800 6500 6800) (7600 6700 7800) (6800 7800) (6800 7800) (6200 7300 8400 7900 8100 5900 6800 7000) (7600 8700 6700 7000 7800 8100 8900 9200) (6200 7200 7300 7000 8000 5900 6900) (7600 6700 7800) (7500 8400 6500 7400 7600) (6500 7600 7000 7300 5900 6200) (6800 7700 7900) (6800 7700 7900) (7500 7800 6500 6800) (7500 7800 8600 6500 6800 7600 7900) (6800 7100 7900 8200) (6500 7600 8700 8100 8400 5900 6200 7000 7300) (7500 7800 8600 6500 6800 7600 7900) (7600 8700 6700 7000 7800 8100 8900 9200) (7800 8000 7200 8100 8300) (6500 7600 7000 7300 5900 6200) (6200 7200 7300 7000 8000 5900 6900) (7600 6700 7000 7800 8100) (8500 6700 7600 7800 8700 8900) (6200 7300 7000 5900) (7500 7800 6500 6800) (6800) (7500 8400 6500 7400 7600) (6200 7300 7000 5900) (7600 6700 7000 7800 8100) (6900 7200) (7600 6700 7000 7800 8100) (6200 7200 7300 7000 8000 5900 6900) (7500 7800 8600 6500 6800 7600 7900) (7500 6500) (6500 7600 7000 7300 5900 6200) (7800 8000 7200 8100 8300) (7600 8700 6700 7000 7800 8100 8900 9200) (6500 7600 8700 8100 8400 5900 6200 7000 7300) (7500 8400 6500 7400 7600) (6200 7300 7000 5900) (6800 7700 7900) (7600 6700 7000 7800 8100) (6200 7300 8400 7900 8100 5900 6800 7000) (6500 7600 8700 8100 8400 5900 6200 7000 7300) (6900 7900 7200 8200) (6800 7700 7900) (7500 6500) (6900 8000 7200 7500 8300 8600) (8600 6700 7700 7800 8800) (6800 7800) (6800 7100) (6800) (7500 7800 8600 6500 6800 7600 7900) (7600 6700 7800) (6900 7200) (7600 6700 7800) (8500 6500 7500) (6200 7200 7300 7000 8000 5900 6900) (6200 7200 7300 7000 8000 5900 6900) (7500 6500) (7500 7800 6500 6800) (6800 7700 7900) (7600 6700 7000 7800 8100) (8500 6700 7600 7800 8700 8900) (6800 7800) (6900 7200 7500) (8500 6700 7600 7800 8700 8900) (6800) (6800 7100) (8500 6500 7500) (6800 7100) (8600 6700 7700 7800 8800) (6200 7300 7000 5900) (6900 7900 7200 8200) (7500 8400 6500 7400 7600) (8500 6700 7600 7800 8700 8900) (7600 6700 7800) (7800 8000 7200 8100 8300) (6500 7600 8700 8100 8400 5900 6200 7000 7300) (6200 7300 7000 5900) (8600 6700 7700 7800 8800) (6800 7100) (6800 7100 7900 8200) (6900 7200) (6500 7600 8700 8100 8400 5900 6200 7000 7300) (7500 7800 8600 6500 6800 7600 7900) (6800) (6900 8000 7200 7500 8300 8600) (6900 7200) (8500 6700 7600 7800 8700 8900) (7800 8000 7200 8100 8300) (6800 7100 7900 8200) (7600 8700 6700 7000 7800 8100 8900 9200) (7600 6700 7000 7800 8100) (6200 7200 7300 7000 8000 5900 6900) (6800) (6500 7600 8700 8100 8400 5900 6200 7000 7300) (7500 7800 8600 6500 6800 7600 7900) (7500 7800 6500 6800) (8600 6700 7700 7800 8800) (6500 7600 7000 7300 5900 6200) (7600 6700 7800) (7600 8700 6700 7000 7800 8100 8900 9200) (7500 7800 8600 6500 6800 7600 7900) (6800) (8500 6500 7500) (7600 6700 7800) (7600 6700 7800) (7600 6700 7000 7800 8100) (8500 6500 7500) (6200 7300 7000 5900) (7800 8000 7200 8100 8300) (6900 7200 7500) (6800 7100 7900 8200) (6800 7800) (7600 6700 7000 7800 8100) (6800 7100 7900 8200) (7500 8400 6500 7400 7600) (6200 7300 8400 7900 8100 5900 6800 7000) (6200 7300 8400 7900 8100 5900 6800 7000) (8600 6700 7700 7800 8800) (6800 7700 7900) (6200 7300 8400 7900 8100 5900 6800 7000))) :lonset (quote (0 200 1000 1200 1600 2400 3000 3600 5000 5600 6200 6400 6600 7200 8600 10200 12400 12600 13000 13200 13400 14200 14800 15000 15400 15800 16400 16800 17000 17200 17400 19000 19200 20200 20800 22000 23000 23200 24000 25000 25400 27800 29200 29400 29800 31400 32000 32200 32400 33000 33200 33600 33800 34000 34200 34400 34600 34800 35600 35800 36200 38800 39000 40000 40400 40600 41000 41600 42000 42800 43000 43200 43600 44400 44800 45000 46000 46200 46400 46600 47000 48400 49000 49200 49400 49600 50000 50200 50600 50800 51000 51800 52000 52200 52600 52800 53800 54400 54600 55600 55800 56200 57000 57200 58600 58800 59200 59400 59600 60000 60200 60600 60800 61000 61600 62000 62600 63200 63400 63600 64400 64800 65000 65400 65800 66400 67400 68000 68200 68600 69400 69800 70400 70800 71000 71200 71400 71600 72000 72200 72400 72600 72800 73800 74200 74600 74800 75000 75200 75600 75800 76200 76600 78000 78400 78600 79000 79400 79600 80000 80400 80600 81000 81400 82200 82600 82800 83400 83600 84000 84400 85400 85600 85800 86000 86200 87600 87800 88000 88400 88800 89000 89400 89800 90000 90800 91200 91400 91800 92200 92400 92600 92800 93000 93400 93600 93800 94600 94800 95600 96000 96200 96400 96800 97000 97600 98000 98600 99200 99400 99800 100200 100400 100600 100800 101000 101200 101600 101800 102000 102200 102400 102600 103200 103800 104200 104400 105000 106000 106400 107000 107200 107600 107800 108000 109000 109200 109400 109600 109800 110200 110600 111600 113000 114200 114600 115000 115400 116600 117200 118200 118400 118800 119000 119600 120200 120400 120600 121400 121600 121800 122200 123000 123400 124200 124400 125000 125200 125800 126000 126800 127200 127400 127800 128000 128200 128400 128600 128800 129400 130400 131000 132000 132400 132600 133200 134000 134200 134400 134600 135000 135200 135600 136000 136200 136400 136800 137800 140000 140400 140600 140800 141800 142200 143200 143800 144000)) :ldur (quote ((200 200) (200 200 200 200) (200 200 200 200 200 200 200 200) (600 600 600 600 600) (400 400) (200 200 200 200 200) (200 200 200 200 200 200 200 200 200) (800 800 800) (200) (1600 1600 1600 1600 1600 1600 1600 1600 1600) (200 200 200) (400 400) (200 200 200 200 200 200) (200 200 200) (200 200 200 200 200 200 200) (200 200 200 200 200 200 200) (800 800 800 800 800 800 800 800 800) (400 400 400 400) (1000 1000 1000 1000 1000) (200 200 200 200) (200 200 200 200 200 200) (200 200 200 200) (200 200) (2200 2200 2200) (200 200 200 200 200) (600 600) (200 200 200 200 200 200) (400 400 400 400) (600 600 600 600) (400 400) (200 200 200 200) (200 200 200) (400 400 400 400 400 400 400) (200 200 200 200) (200 200) (600 600 600 600 600) (800 800 800) (800 800 800) (400 400 400) (400 400 400) (400 400 400 400 400 400 400) (400 400 400 400) (800 800 800 800 800 800 800) (1000 1000 1000 1000 1000 1000) (1200 1200 1200 1200 1200 1200 1200) (600 600) (200 200 200 200 200) (600 600 600 600 600 600 600) (200 200) (200 200 200 200 200 200 200) (200 200 200 200 200 200) (200 200 200 200 200) (1200 1200) (200 200 200 200) (600 600 600 600 600 600 600 600) (1000 1000 1000 1000 1000) (400 400 400) (600 600) (200 200 200 200 200) (1000 1000 1000 1000 1000 1000 1000) (200) (200 200 200 200 200) (1400) (200 200 200 200 200 200 200 200) (400 400 400 400 400 400 400 400 400) (400 400 400 400 400 400 400 400) (200 200 200 200 200) (200 200 200 200 200) (200 200 200 200 200 200) (600 600) (200 200) (400 400 400 400) (400 400 400) (200 200) (400 400 400 400 400) (800 800) (1400 1400 1400) (200 200) (400 400 400) (800 800 800 800 800) (200 200 200) (200 200) (200 200 200 200 200) (200 200 200 200 200 200 200 200) (400 400) (200 200 200 200 200 200) (200 200 200) (400 400 400 400 400 400) (1400 1400 1400 1400 1400 1400 1400 1400) (200 200 200) (800 800) (600 600 600 600 600 600) (400 400 400 400 400) (600 600) (1200 1200 1200 1200) (200 200 200) (400 400 400 400) (200 200 200 200 200 200) (200 200) (400 400 400 400 400 400) (200 200) (400 400 400 400 400 400) (200 200 200 200) (200 200 200 200 200 200 200 200) (2400 2400 2400 2400 2400) (400 400 400 400 400 400 400) (200 200 200 200 200 200 200) (400 400 400 400) (200 200 200 200) (400 400) (400 400 400) (1000 1000 1000) (400) (200 200 200 200 200) (200 200 200 200 200 200) (1000 1000 1000) (200 200 200 200 200) (400 400) (600 600 600 600 600 600 600) (200 200 200 200 200 200 200 200 200) (1000 1000 1000 1000 1000) (600 600) (600 600 600) (200 200) (200 200) (200 200) (200 200 200) (1000 1000 1000 1000) (200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200) (600 600 600 600 600) (400 400 400 400 400 400 400 400 400) (400 400 400 400 400 400 400 400) (600 600) (200 200 200 200 200 200) (200 200 200 200 200) (800 800) (200 200) (200 200 200 200 200 200 200) (200) (1600 1600 1600 1600 1600) (200 200) (200 200 200 200 200 200 200 200 200) (200 200 200) (400 400 400 400 400) (200 200 200 200 200 200) (400 400 400 400 400 400 400) (400 400 400 400) (400 400 400 400 400) (400 400) (1000 1000 1000 1000 1000) (2200 2200 2200 2200 2200 2200 2200) (1000 1000 1000) (200 200 200 200) (200 200 200) (600 600 600 600 600) (200 200 200) (600 600) (200 200 200 200 200 200 200) (600 600 600 600 600 600 600) (600 600 600 600 600 600) (400 400 400 400) (200 200 200 200 200 200) (1400 1400 1400) (200 200 200) (1400) (200 200 200) (400 400 400 400 400 400 400) (200 200) (800 800 800 800) (200 200 200) (200) (400 400 400 400 400 400 400) (1000 1000 1000 1000) (200 200 200 200 200) (600) (1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (600 600 600 600) (400 400 400) (400 400) (200 200 200 200 200) (600 600 600 600) (800 800 800 800) (200 200 200) (200 200) (400 400) (400 400 400 400 400 400 400 400) (200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200) (600 600 600) (400 400 400 400 400) (200 200 200 200 200 200) (200 200 200) (200 200 200) (200 200 200 200) (200 200 200 200 200 200 200) (800 800 800 800) (400 400 400 400 400 400 400 400 400) (400 400 400 400 400 400 400) (400 400 400 400 400 400 400 400) (400 400 400 400 400) (1600 1600 1600 1600 1600 1600) (200 200 200 200 200 200 200) (600 600 600 600 600) (800 800 800 800 800 800) (400 400 400 400) (200 200 200 200) (200) (400 400 400 400 400) (400 400 400 400) (200 200 200 200 200) (1400 1400) (400 400 400 400 400) (200 200 200 200 200 200 200) (400 400 400 400 400 400 400) (200 200) (1000 1000 1000 1000 1000 1000) (800 800 800 800 800) (400 400 400 400 400 400 400 400) (200 200 200 200 200 200 200 200 200) (400 400 400 400 400) (200 200 200 200) (200 200 200) (200 200 200 200 200) (400 400 400 400 400 400 400 400) (200 200 200 200 200 200 200 200 200) (400 400 400 400) (1000 1000 1000) (800 800) (800 800 800 800 800 800) (600 600 600 600 600) (600 600) (400 400) (200) (200 200 200 200 200 200 200) (400 400 400) (1000 1000) (600 600 600) (200 200 200) (800 800 800 800 800 800 800) (200 200 200 200 200 200 200) (200 200) (200 200 200 200) (600 600 600) (400 400 400 400 400) (200 200 200 200 200 200) (600 600) (200 200 200) (600 600 600 600 600 600) (600) (2600 2600) (800 800 800) (200 200) (400 400 400 400 400) (400 400 400 400) (200 200 200 200) (200 200 200 200 200) (600 600 600 600 600 600) (400 400 400) (200 200 200 200 200) (200 200 200 200 200 200 200 200 200) (200 200 200 200) (400 400 400 400 400) (1000 1000) (800 800 800 800) (400 400) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (200 200 200 200 200 200 200) (200) (200 200 200 200 200 200) (400 400) (200 200 200 200 200 200) (400 400 400 400 400) (400 400 400 400) (400 400 400 400 400 400 400 400) (400 400 400 400 400) (400 400 400 400 400 400 400) (200) (400 400 400 400 400 400 400 400 400) (600 600 600 600 600 600 600) (1000 1000 1000 1000) (1400 1400 1400 1400 1400) (200 200 200 200 200 200) (400 400 400) (200 200 200 200 200 200 200 200) (600 600 600 600 600 600 600) (600) (400 400 400) (200 200 200) (400 400 400) (400 400 400 400 400) (400 400 400) (400 400 400 400) (800 800 800 800 800) (1400 1400 1400) (200 200 200 200) (200 200) (200 200 200 200 200) (400 400 400 400) (200 200 200 200 200) (200 200 200 200 200 200 200 200) (200 200 200 200 200 200 200 200) (200 200 200 200 200) (200 200 200) (200 200 200 200 200 200 200 200))) :lvel (quote ((50 50) (50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50) (50 50) (50 50 50 50 50) (50 50 50 50 50 50 50 50 50) (50 50 50) (50) (50 50 50 50 50 50 50 50 50) (50 50 50) (50 50) (50 50 50 50 50 50) (50 50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50 50) (50 50 50 50) (50 50 50 50 50) (50 50 50 50) (50 50 50 50 50 50) (50 50 50 50) (50 50) (50 50 50) (50 50 50 50 50) (50 50) (50 50 50 50 50 50) (50 50 50 50) (50 50 50 50) (50 50) (50 50 50 50) (50 50 50) (50 50 50 50 50 50 50) (50 50 50 50) (50 50) (50 50 50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50) (50 50 50 50 50 50 50) (50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50) (50 50 50 50 50) (50 50 50 50 50 50 50) (50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50) (50 50 50 50 50) (50 50) (50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50) (50 50 50) (50 50) (50 50 50 50 50) (50 50 50 50 50 50 50) (50) (50 50 50 50 50) (50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50) (50 50 50 50 50) (50 50 50 50 50 50) (50 50) (50 50) (50 50 50 50) (50 50 50) (50 50) (50 50 50 50 50) (50 50) (50 50 50) (50 50) (50 50 50) (50 50 50 50 50) (50 50 50) (50 50) (50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50) (50 50 50 50 50 50) (50 50 50) (50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50) (50 50) (50 50 50 50 50 50) (50 50 50 50 50) (50 50) (50 50 50 50) (50 50 50) (50 50 50 50) (50 50 50 50 50 50) (50 50) (50 50 50 50 50 50) (50 50) (50 50 50 50 50 50) (50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50) (50 50 50 50) (50 50) (50 50 50) (50 50 50) (50) (50 50 50 50 50) (50 50 50 50 50 50) (50 50 50) (50 50 50 50 50) (50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50 50) (50 50 50 50 50) (50 50) (50 50 50) (50 50) (50 50) (50 50) (50 50 50) (50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50) (50 50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50) (50 50 50 50 50 50) (50 50 50 50 50) (50 50) (50 50) (50 50 50 50 50 50 50) (50) (50 50 50 50 50) (50 50) (50 50 50 50 50 50 50 50 50) (50 50 50) (50 50 50 50 50) (50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50) (50 50 50 50 50) (50 50) (50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50) (50 50 50 50) (50 50 50) (50 50 50 50 50) (50 50 50) (50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50) (50 50 50 50) (50 50 50 50 50 50) (50 50 50) (50 50 50) (50) (50 50 50) (50 50 50 50 50 50 50) (50 50) (50 50 50 50) (50 50 50) (50) (50 50 50 50 50 50 50) (50 50 50 50) (50 50 50 50 50) (50) (50 50 50) (50 50 50 50 50 50 50 50 50) (50 50 50 50) (50 50 50) (50 50) (50 50 50 50 50) (50 50 50 50) (50 50 50 50) (50 50 50) (50 50) (50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50) (50 50 50 50 50) (50 50 50 50 50 50) (50 50 50) (50 50 50) (50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50) (50 50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50) (50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50 50) (50 50 50 50 50 50) (50 50 50 50) (50 50 50 50) (50) (50 50 50 50 50) (50 50 50 50) (50 50 50 50 50) (50 50) (50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50) (50 50 50 50 50 50) (50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50 50) (50 50 50 50 50) (50 50 50 50) (50 50 50) (50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50 50) (50 50 50 50) (50 50 50) (50 50) (50 50 50 50 50 50) (50 50 50 50 50) (50 50) (50 50) (50) (50 50 50 50 50 50 50) (50 50 50) (50 50) (50 50 50) (50 50 50) (50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50) (50 50 50 50) (50 50 50) (50 50 50 50 50) (50 50 50 50 50 50) (50 50) (50 50 50) (50 50 50 50 50 50) (50) (50 50) (50 50 50) (50 50) (50 50 50 50 50) (50 50 50 50) (50 50 50 50) (50 50 50 50 50) (50 50 50 50 50 50) (50 50 50) (50 50 50 50 50) (50 50 50 50 50 50 50 50 50) (50 50 50 50) (50 50 50 50 50) (50 50) (50 50 50 50) (50 50) (50 50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50) (50 50 50 50 50 50) (50 50) (50 50 50 50 50 50) (50 50 50 50 50) (50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50) (50 50 50 50 50 50 50) (50) (50 50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50 50 50 50) (50 50 50 50 50) (50 50 50 50 50 50) (50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50) (50) (50 50 50) (50 50 50) (50 50 50) (50 50 50 50 50) (50 50 50) (50 50 50 50) (50 50 50 50 50) (50 50 50) (50 50 50 50) (50 50) (50 50 50 50 50) (50 50 50 50) (50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50) (50 50 50) (50 50 50 50 50 50 50 50))) :loffset (quote ((0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0) (0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0) (0 0) (0 0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0) (0) (0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0) (0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0) (0 0 0 0 0 0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1 1) (1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1) (1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1) (1) (1 1 1 1 1 1 1 1 1) (1 1 1) (1 1) (1 1 1 1 1 1) (1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1) (1 1 1) (1 1 1 1 1) (1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1) (1 1 1 1) (1 1 1) (1 1 1 1 1 1 1) (1 1 1 1) (1 1) (1 1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1) (1 1 1 1 1) (1 1 1 1 1 1 1) (1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1) (1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1) (1 1) (1 1 1 1 1) (1 1 1 1 1 1 1) (1) (1 1 1 1 1) (1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1) (1 1) (1 1 1 1) (1 1 1) (1 1) (1 1 1 1 1) (1 1) (1 1 1) (1 1) (1 1 1) (1 1 1 1 1) (1 1 1) (1 1) (1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1) (1 1 1 1 1 1) (1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1) (1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1 1 1) (1 1) (1 1 1 1 1 1) (1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1) (1 1 1) (1 1 1) (1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1) (1 1 1 1 1) (1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1) (1 1 1) (1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1) (1 1) (1 1 1 1 1 1 1) (1) (1 1 1 1 1) (1 1) (1 1 1 1 1 1 1 1 1) (1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1) (1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1 1) (1 1 1) (1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1) (1 1 1) (1 1 1) (1) (1 1 1) (1 1 1 1 1 1 1) (1 1) (1 1 1 1) (1 1 1) (1) (1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1) (1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1) (1 1 1) (1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1) (1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1) (1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1) (1 1 1) (1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1) (1 1) (1) (1 1 1 1 1 1 1) (1 1 1) (1 1) (1 1 1) (1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1) (1 1 1 1) (1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1) (1 1 1) (1 1 1 1 1 1) (1) (1 1) (1 1 1) (1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1) (1 1 1 1) (1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1) (1 1 1 1 1 1) (1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1) (1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1) (1 1 1 1) (1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1) (1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0) (0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0) (0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0) (0 0) (0 0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0) (0) (0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0) (0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0) (0 0 0 0 0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0) (0 0 0) (0 0 0 0 0 0) (0) (0 0) (0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 348 425) nil (list (list (list 7500 6500) (list 6900 7900 7200 8200) (list 6200 7300 8400 7900 8100 5900 6800 7000) (list 7500 8400 6500 7400 7600) (list 7500 6500) (list 8600 6700 7700 7800 8800) (list 6500 7600 8700 8100 8400 5900 6200 7000 7300) (list 7600 6700 7800) (list 6800) (list 6500 7600 8700 8100 8400 5900 6200 7000 7300) (list 6900 7200 7500) (list 7500 6500) (list 6900 8000 7200 7500 8300 8600) (list 6800 7700 7900) (list 7500 7800 8600 6500 6800 7600 7900) (list 6200 7200 7300 7000 8000 5900 6900) (list 6500 7600 8700 8100 8400 5900 6200 7000 7300) (list 7500 7800 6500 6800) (list 8600 6700 7700 7800 8800) (list 6800 7100 7900 8200) (list 6900 8000 7200 7500 8300 8600) (list 7500 7800 6500 6800) (list 6900 7200) (list 8500 6500 7500) (list 7600 6700 7000 7800 8100) (list 6900 7200) (list 6500 7600 7000 7300 5900 6200) (list 6200 7300 7000 5900) (list 6800 7100 7900 8200) (list 7500 6500) (list 7500 7800 6500 6800) (list 8500 6500 7500) (list 7500 7800 8600 6500 6800 7600 7900) (list 6800 7100 7900 8200) (list 6800 7800) (list 7600 6700 7000 7800 8100) (list 6800 7700 7900) (list 6800 7700 7900) (list 6800 7700 7900) (list 6900 7200 7500) (list 7500 7800 8600 6500 6800 7600 7900) (list 6900 7900 7200 8200) (list 6200 7200 7300 7000 8000 5900 6900) (list 6900 8000 7200 7500 8300 8600) (list 7500 7800 8600 6500 6800 7600 7900) (list 6800 7100) (list 7500 8400 6500 7400 7600) (list 6200 7200 7300 7000 8000 5900 6900) (list 6800 7800) (list 6200 7200 7300 7000 8000 5900 6900) (list 6500 7600 7000 7300 5900 6200) (list 7500 8400 6500 7400 7600) (list 6900 7200) (list 6200 7300 7000 5900) (list 6200 7300 8400 7900 8100 5900 6800 7000) (list 7600 6700 7000 7800 8100) (list 6900 7200 7500) (list 6800 7800) (list 7500 8400 6500 7400 7600) (list 7500 7800 8600 6500 6800 7600 7900) (list 6800) (list 8600 6700 7700 7800 8800) (list 6800) (list 6200 7300 8400 7900 8100 5900 6800 7000) (list 6500 7600 8700 8100 8400 5900 6200 7000 7300) (list 6200 7300 8400 7900 8100 5900 6800 7000) (list 7600 6700 7000 7800 8100) (list 7800 8000 7200 8100 8300) (list 6500 7600 7000 7300 5900 6200) (list 7500 6500) (list 6800 7800) (list 6800 7100 7900 8200) (list 6800 7700 7900) (list 6900 7200) (list 7600 6700 7000 7800 8100) (list 6800 7800) (list 8500 6500 7500) (list 6800 7100) (list 7600 6700 7800) (list 8600 6700 7700 7800 8800) (list 6800 7700 7900) (list 7500 6500) (list 8600 6700 7700 7800 8800) (list 6200 7300 8400 7900 8100 5900 6800 7000) (list 7500 6500) (list 6900 8000 7200 7500 8300 8600) (list 8500 6500 7500) (list 6900 8000 7200 7500 8300 8600) (list 6200 7300 8400 7900 8100 5900 6800 7000) (list 8500 6500 7500) (list 7500 6500) (list 8500 6700 7600 7800 8700 8900) (list 7600 6700 7000 7800 8100) (list 6800 7100) (list 6200 7300 7000 5900) (list 7600 6700 7800) (list 7500 7800 6500 6800) (list 6900 8000 7200 7500 8300 8600) (list 6800 7800) (list 6900 8000 7200 7500 8300 8600) (list 6900 7200) (list 6500 7600 7000 7300 5900 6200) (list 6900 7900 7200 8200) (list 6200 7300 8400 7900 8100 5900 6800 7000) (list 8600 6700 7700 7800 8800) (list 6200 7200 7300 7000 8000 5900 6900) (list 6200 7200 7300 7000 8000 5900 6900) (list 7500 7800 6500 6800) (list 6200 7300 7000 5900) (list 6800 7100) (list 6900 7200 7500) (list 6800 7700 7900) (list 6800) (list 8600 6700 7700 7800 8800) (list 6500 7600 7000 7300 5900 6200) (list 8500 6500 7500) (list 7500 8400 6500 7400 7600) (list 7500 6500) (list 6200 7200 7300 7000 8000 5900 6900) (list 6500 7600 8700 8100 8400 5900 6200 7000 7300) (list 7600 6700 7000 7800 8100) (list 6800 7800) (list 6800 7700 7900) (list 6800 7800) (list 6900 7200) (list 7500 6500) (list 6900 7200 7500) (list 6200 7300 7000 5900) (list 7600 8700 6700 7000 7800 8100 8900 9200) (list 6200 7300 8400 7900 8100 5900 6800 7000) (list 7800 8000 7200 8100 8300) (list 6500 7600 8700 8100 8400 5900 6200 7000 7300) (list 6200 7300 8400 7900 8100 5900 6800 7000) (list 7500 6500) (list 8500 6700 7600 7800 8700 8900) (list 8600 6700 7700 7800 8800) (list 7500 6500) (list 6800 7100) (list 7500 7800 8600 6500 6800 7600 7900) (list 6800) (list 7800 8000 7200 8100 8300) (list 7500 6500) (list 6500 7600 8700 8100 8400 5900 6200 7000 7300) (list 6800 7700 7900) (list 7800 8000 7200 8100 8300) (list 8500 6700 7600 7800 8700 8900) (list 6200 7200 7300 7000 8000 5900 6900) (list 6900 7900 7200 8200) (list 8600 6700 7700 7800 8800) (list 6800 7100) (list 7500 8400 6500 7400 7600) (list 7500 7800 8600 6500 6800 7600 7900) (list 6800 7700 7900) (list 6800 7100 7900 8200) (list 7600 6700 7800) (list 7800 8000 7200 8100 8300) (list 8500 6500 7500) (list 6900 7200) (list 7500 7800 8600 6500 6800 7600 7900) (list 7500 7800 8600 6500 6800 7600 7900) (list 6900 8000 7200 7500 8300 8600) (list 6800 7100 7900 8200) (list 8500 6700 7600 7800 8700 8900) (list 7600 6700 7800) (list 6800 7700 7900) (list 6800) (list 6900 7200 7500) (list 6200 7200 7300 7000 8000 5900 6900) (list 6900 7200) (list 6200 7300 7000 5900) (list 6800 7700 7900) (list 6800) (list 7500 7800 8600 6500 6800 7600 7900) (list 7500 7800 6500 6800) (list 7500 8400 6500 7400 7600) (list 6800) (list 8500 6500 7500) (list 6500 7600 8700 8100 8400 5900 6200 7000 7300) (list 7500 7800 6500 6800) (list 8500 6500 7500) (list 7500 6500) (list 7800 8000 7200 8100 8300) (list 7500 7800 6500 6800) (list 7500 7800 6500 6800) (list 7600 6700 7800) (list 6800 7800) (list 6800 7800) (list 6200 7300 8400 7900 8100 5900 6800 7000) (list 7600 8700 6700 7000 7800 8100 8900 9200) (list 6200 7200 7300 7000 8000 5900 6900) (list 7600 6700 7800) (list 7500 8400 6500 7400 7600) (list 6500 7600 7000 7300 5900 6200) (list 6800 7700 7900) (list 6800 7700 7900) (list 7500 7800 6500 6800) (list 7500 7800 8600 6500 6800 7600 7900) (list 6800 7100 7900 8200) (list 6500 7600 8700 8100 8400 5900 6200 7000 7300) (list 7500 7800 8600 6500 6800 7600 7900) (list 7600 8700 6700 7000 7800 8100 8900 9200) (list 7800 8000 7200 8100 8300) (list 6500 7600 7000 7300 5900 6200) (list 6200 7200 7300 7000 8000 5900 6900) (list 7600 6700 7000 7800 8100) (list 8500 6700 7600 7800 8700 8900) (list 6200 7300 7000 5900) (list 7500 7800 6500 6800) (list 6800) (list 7500 8400 6500 7400 7600) (list 6200 7300 7000 5900) (list 7600 6700 7000 7800 8100) (list 6900 7200) (list 7600 6700 7000 7800 8100) (list 6200 7200 7300 7000 8000 5900 6900) (list 7500 7800 8600 6500 6800 7600 7900) (list 7500 6500) (list 6500 7600 7000 7300 5900 6200) (list 7800 8000 7200 8100 8300) (list 7600 8700 6700 7000 7800 8100 8900 9200) (list 6500 7600 8700 8100 8400 5900 6200 7000 7300) (list 7500 8400 6500 7400 7600) (list 6200 7300 7000 5900) (list 6800 7700 7900) (list 7600 6700 7000 7800 8100) (list 6200 7300 8400 7900 8100 5900 6800 7000) (list 6500 7600 8700 8100 8400 5900 6200 7000 7300) (list 6900 7900 7200 8200) (list 6800 7700 7900) (list 7500 6500) (list 6900 8000 7200 7500 8300 8600) (list 8600 6700 7700 7800 8800) (list 6800 7800) (list 6800 7100) (list 6800) (list 7500 7800 8600 6500 6800 7600 7900) (list 7600 6700 7800) (list 6900 7200) (list 7600 6700 7800) (list 8500 6500 7500) (list 6200 7200 7300 7000 8000 5900 6900) (list 6200 7200 7300 7000 8000 5900 6900) (list 7500 6500) (list 7500 7800 6500 6800) (list 6800 7700 7900) (list 7600 6700 7000 7800 8100) (list 8500 6700 7600 7800 8700 8900) (list 6800 7800) (list 6900 7200 7500) (list 8500 6700 7600 7800 8700 8900) (list 6800) (list 6800 7100) (list 8500 6500 7500) (list 6800 7100) (list 8600 6700 7700 7800 8800) (list 6200 7300 7000 5900) (list 6900 7900 7200 8200) (list 7500 8400 6500 7400 7600) (list 8500 6700 7600 7800 8700 8900) (list 7600 6700 7800) (list 7800 8000 7200 8100 8300) (list 6500 7600 8700 8100 8400 5900 6200 7000 7300) (list 6200 7300 7000 5900) (list 8600 6700 7700 7800 8800) (list 6800 7100) (list 6800 7100 7900 8200) (list 6900 7200) (list 6500 7600 8700 8100 8400 5900 6200 7000 7300) (list 7500 7800 8600 6500 6800 7600 7900) (list 6800) (list 6900 8000 7200 7500 8300 8600) (list 6900 7200) (list 8500 6700 7600 7800 8700 8900) (list 7800 8000 7200 8100 8300) (list 6800 7100 7900 8200) (list 7600 8700 6700 7000 7800 8100 8900 9200) (list 7600 6700 7000 7800 8100) (list 6200 7200 7300 7000 8000 5900 6900) (list 6800) (list 6500 7600 8700 8100 8400 5900 6200 7000 7300) (list 7500 7800 8600 6500 6800 7600 7900) (list 7500 7800 6500 6800) (list 8600 6700 7700 7800 8800) (list 6500 7600 7000 7300 5900 6200) (list 7600 6700 7800) (list 7600 8700 6700 7000 7800 8100 8900 9200) (list 7500 7800 8600 6500 6800 7600 7900) (list 6800) (list 8500 6500 7500) (list 7600 6700 7800) (list 7600 6700 7800) (list 7600 6700 7000 7800 8100) (list 8500 6500 7500) (list 6200 7300 7000 5900) (list 7800 8000 7200 8100 8300) (list 6900 7200 7500) (list 6800 7100 7900 8200) (list 6800 7800) (list 7600 6700 7000 7800 8100) (list 6800 7100 7900 8200) (list 7500 8400 6500 7400 7600) (list 6200 7300 8400 7900 8100 5900 6800 7000) (list 6200 7300 8400 7900 8100 5900 6800 7000) (list 8600 6700 7700 7800 8800) (list 6800 7700 7900) (list 6200 7300 8400 7900 8100 5900 6800 7000))) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 2" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 527 451) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 475 338) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500 8400 6500 7400 7600) (6200 7300 8400 7900 8100 5900 6800 7000) (7800 8000 7200 8100 8300) (6800 7700 7900) (8500 6700 7600 7800 8700 8900))) :lonset (quote (0 4000 8000 12000 16000 20000)) :ldur (quote ((4000 4000 4000 4000 4000) (4000 4000 4000 4000 4000 4000 4000 4000) (4000 4000 4000 4000 4000) (4000 4000 4000) (4000 4000 4000 4000 4000 4000))) :lvel (quote ((50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50) (50 50 50) (50 50 50 50 50 50))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 422 272) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 236 395) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 349 20) (om-make-point 287 209) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8500 6500 7500) (6200 7200 7300 7000 8000 5900 6900) (6900 7900 7200 8200) (6800 7800) (8600 6700 7700 7800 8800))) :lonset (quote (0 4000 8000 12000 16000 20000)) :ldur (quote ((4000 4000 4000) (4000 4000 4000 4000 4000 4000 4000) (4000 4000 4000 4000) (4000 4000) (4000 4000 4000 4000 4000))) :lvel (quote ((50 50 50) (50 50 50 50 50 50 50) (50 50 50 50) (50 50) (50 50 50 50 50))) :loffset (quote ((0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1) (1 1 1 1 1 1 1) (1 1 1 1) (1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500 7800 8600 6500 6800 7600 7900) (6500 7600 8700 8100 8400 5900 6200 7000 7300) (6900 8000 7200 7500 8300 8600) (6800 7100 7900 8200) (7600 8700 6700 7000 7800 8100 8900 9200))) :lonset (quote (0 4000 8000 12000 16000 20000)) :ldur (quote ((4000 4000 4000 4000 4000 4000 4000) (4000 4000 4000 4000 4000 4000 4000 4000 4000) (4000 4000 4000 4000 4000 4000) (4000 4000 4000 4000) (4000 4000 4000 4000 4000 4000 4000 4000))) :lvel (quote ((50 50 50 50 50 50 50) (50 50 50 50 50 50 50 50 50) (50 50 50 50 50 50) (50 50 50 50) (50 50 50 50 50 50 50 50))) :loffset (quote ((0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500 7800 6500 6800) (6500 7600 7000 7300 5900 6200) (6900 7200 7500) (6800 7100) (7600 6700 7000 7800 8100))) :lonset (quote (0 4000 8000 12000 16000 20000)) :ldur (quote ((4000 4000 4000 4000) (4000 4000 4000 4000 4000 4000) (4000 4000 4000) (4000 4000) (4000 4000 4000 4000 4000))) :lvel (quote ((50 50 50 50) (50 50 50 50 50 50) (50 50 50) (50 50) (50 50 50 50 50))) :loffset (quote ((0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1 1 1) (1 1 1) (1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500 6500) (6200 7300 7000 5900) (6900 7200) (6800) (7600 6700 7800))) :lonset (quote (0 4000 8000 12000 16000 20000)) :ldur (quote ((4000 4000) (4000 4000 4000 4000) (4000 4000) (4000) (4000 4000 4000))) :lvel (quote ((50 50) (50 50 50 50) (50 50) (50) (50 50 50))) :loffset (quote ((0 0) (0 0 0 0) (0 0) (0) (0 0 0))) :lchan (quote ((1 1) (1 1 1 1) (1 1) (1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0 0 0) (0 0) (0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500 8400 6500 7400 7600) (6200 7300 8400 7900 8100 5900 6800 7000) (7800 8000 7200 8100 8300) (6800 7700 7900) (8500 6700 7600 7800 8700 8900))) :lonset (quote (0 4000 8000 12000 16000 20000)) :ldur (quote ((4000 4000 4000 4000 4000) (4000 4000 4000 4000 4000 4000 4000 4000) (4000 4000 4000 4000 4000) (4000 4000 4000) (4000 4000 4000 4000 4000 4000))) :lvel (quote ((50 50 50 50 50) (50 50 50 50 50 50 50 50) (50 50 50 50 50) (50 50 50) (50 50 50 50 50 50))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0)) ((0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0)) ((0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0) (0 0 0 0 0)) ((0 0) (0 0 0 0) (0 0) (0) (0 0 0)) ((0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0 0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 82 124) (om-make-point 1067 583) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 127 425) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 22 280) (om-make-point 27 30) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 43 332) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 69 209) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 82 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "rhythmic-grid" (om-load-patch-abs1 "rhythmic-grid" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 245 285) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 164 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 180 37) (om-make-point 41 30) 200 "200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 134 36) (om-make-point 41 30) 800 "800" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 94 36) (om-make-point 21 25) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 86 74) (om-make-point 122 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (5 0 1 0 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0) (2 0 5 2 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 212 74) nil (list (list 200 800 0 400 600)) nil "rhythmic-grid"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "classes<->attack-points" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "density-class" nil) (om-load-inputfun (quote input-funbox) "" "grid-value" nil))) (om-make-point 105 183) nil nil "x" (list (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 131 478) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 323 454) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 100 323) (om-make-point 20 27) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 71 349) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 78 419) (om-make-point 38 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 39 452) (om-make-point 63 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 204 429) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "count" (quote counter) (quote ((om-load-inputfun (quote input-funbox) "things to count" "SOMETHING" nil))) (om-make-point 23 248) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 116 362) (om-make-point 85 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 203 275) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 95 187) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "grid-value" 1 (om-make-point 312 58) "" "grid-value" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "density-class" 0 (om-make-point 5 45) "" "density-class" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 403 593) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 302 593) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((8 0 0 0 nil 0) (6 0 1 0 nil 0) (7 0 3 0 nil 0) (2 0 3 1 nil 0) (3 0 5 0 nil 0) (4 0 5 1 nil 0) (0 0 6 0 nil 0) (5 0 6 1 nil 0) (12 0 7 0 nil 0) (9 0 8 0 nil 0) (10 0 8 1 nil 0) (11 0 9 0 nil 0) (12 0 10 0 nil 0) (1 1 13 0 nil 0) (1 0 14 0 nil 0))) 1 "classes<->attack-points" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote patch-box) "004-discrete-poisson" (quote ("elements" "Week4" "004-discrete-poisson")) (quote nil) (om-make-point 55 77) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 55 77)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (10 0 1 0 nil 0) (4 0 3 1 nil 0) (10 0 3 2 nil 0) (0 0 3 3 nil 0) (2 0 3 4 nil 0) (5 0 4 0 nil 0) (8 0 4 1 nil 0) (6 1 5 0 nil 0) (7 0 6 0 nil 0) (9 1 7 0 nil 0) (10 0 8 0 nil 0) (12 0 10 0 nil 0) (11 0 12 0 nil 0) (14 0 12 1 nil 0) (13 0 14 0 nil 0) (16 0 14 1 nil 0) (17 0 16 0 nil 0) (15 0 16 1 nil 0))) nil 7.01))
