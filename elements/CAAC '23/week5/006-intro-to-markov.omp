; OM File Header - Saved 2023/04/03 14:29:14
; (7.01 :patc (om-make-point 118 110) (om-make-point 437 38) (om-make-point 1055 747) "" 183 0 nil "2023/04/03 14:29:14")
; End File Header
(in-package :om)(load-lib-for (quote ("Alea")))(setf *om-current-persistent* (om-load-patch1 "006-intro-to-markov" (quote ((let ((box (om-load-boxout "output 4" 3 (om-make-point 724 524) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "transition-prob-matrix2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 771 233) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "interval-space" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 315 565) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "transition-prob-matrix1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 357 278) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "pitch-space" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 660 390) (om-make-point 182 100) (load-buffer-textfile (quote ("(0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0)" "(0.0 0.0 0.0 0.0 0.0 0.25 0.25 0.5 0.0)" "(0.0 0.0 0.0 0.0 0.0 0.833 0.0 0.0 0.167)" "(0.0 0.0 0.143 0.286 0.0 0.143 0.143 0.143 0.143)" "(0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)" "(0.0 0.286 0.286 0.0 0.0 0.0 0.286 0.143 0.0)" "(0.333 0.167 0.0 0.5 0.0 0.0 0.0 0.0 0.0)" "(0.0 0.0 0.75 0.0 0.0 0.25 0.0 0.0 0.0)" "(0.0 0.5 0.0 0.5 0.0 0.0 0.0 0.0 0.0)" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND 2" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 481 321) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 452 391) (om-make-point 182 100) (load-buffer-textfile (quote ("(0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0)" "(0.0 0.0 0.0 0.0 0.25 0.25 0.5 0.0)" "(0.0 0.0 0.0 0.0 0.833 0.0 0.0 0.167)" "(0.0 0.0 0.143 0.286 0.143 0.143 0.143 0.143)" "(0.0 0.286 0.286 0.0 0.0 0.286 0.143 0.0)" "(0.333 0.167 0.0 0.5 0.0 0.0 0.0 0.0)" "(0.0 0.0 0.75 0.0 0.25 0.0 0.0 0.0)" "(0.0 0.5 0.0 0.5 0.0 0.0 0.0 0.0)" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 252 441) (om-make-point 182 100) (load-buffer-textfile (quote ("(0.0 0.25 0.25 0.25 0.25)" "(0.25 0.0 0.25 0.25 0.25)" "(0.25 0.25 0.0 0.25 0.25)" "(0.25 0.25 0.25 0.0 0.25)" "(0.286 0.286 0.286 0.143 0.0)" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 32 442) (om-make-point 182 100) (load-buffer-textfile (quote ("(0.0 0.25 0.25 0.25 0.25)" "(0.25 0.0 0.25 0.25 0.25)" "(0.25 0.25 0.0 0.25 0.25)" "(0.25 0.25 0.25 0.0 0.25)" "(0.286 0.286 0.286 0.143 0.0)" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 66 376) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 694 132) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER 2" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 634 161) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MAX 2" (quote list-max) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 642 52) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN 2" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 583 52) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ANA-MARK2 2" (quote alea::ana-mark2) (quote ((om-load-inputfun (quote input-funbox) "sequence" "DATA" (list 0 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "espace" "ESPACE" (list 0 1 2 3 4 5)))) (om-make-point 599 235) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ANA-MARK 2" (quote alea::ana-mark) (quote ((om-load-inputfun (quote input-funbox) "sequence" "DATA" 0))) (om-make-point 447 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 459 139) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 358 158) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 298 187) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MAX" (quote list-max) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 306 78) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 222 78) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ANA-MARK2" (quote alea::ana-mark2) (quote ((om-load-inputfun (quote input-funbox) "sequence" "DATA" (list 0 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "espace" "ESPACE" (list 0 1 2 3 4 5)))) (om-make-point 266 278) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ANA-MARK" (quote alea::ana-mark) (quote ((om-load-inputfun (quote input-funbox) "sequence" "DATA" 0))) (om-make-point 106 279) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 32 52) (om-make-point 87 88) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 6800 6600 7000 6700 7000 6800 6900 6600 6900 6700 6800 6600 6700 6900 6800 7000 6600 6800 6700 6600 7000 6900 7000 6700 6900 6600 6700 7000 6800 6900 6700 6800 7000 6600 6800 6700 6600 6900 7000)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 36 230) (om-make-point 1431 260) 3 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 1 0 0 nil 0) (11 0 1 0 nil 0) (8 1 2 0 nil 0) (18 0 3 0 nil 0) (14 0 4 1 nil 0) (15 0 5 0 nil 0) (5 0 6 1 nil 0) (21 0 7 1 nil 0) (9 0 8 1 nil 0) (22 0 9 0 nil 0) (13 0 11 0 nil 0) (12 0 11 1 nil 0) (10 0 11 2 nil 0) (16 0 12 0 nil 0) (16 0 13 0 nil 0) (16 0 14 0 nil 0) (11 0 14 1 nil 0) (16 0 15 0 nil 0) (23 1 16 0 nil 0) (20 0 18 0 nil 0) (19 0 18 1 nil 0) (17 0 18 2 nil 0) (23 1 19 0 nil 0) (23 1 20 0 nil 0) (23 1 21 0 nil 0) (18 0 21 1 nil 0) (23 1 22 0 nil 0))) nil 7.01))
