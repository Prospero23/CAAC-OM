; OM File Header - Saved 2023/03/19 13:19:30
; (7.01 :patc (om-make-point 118 160) (om-make-point 768 38) (om-make-point 1512 916) "" 183 0 nil "2023/03/19 13:19:30")
; End File Header
(in-package :om)(load-lib-for (quote ("Alea")))(setf *om-current-persistent* (om-load-patch1 "008-intro-to-Brownian-motion" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 534 600) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 752 341) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 16" (quote list) (quote nil) (om-make-point 905 314) (om-make-point 17 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X 2" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 911 353) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 287 494) (om-make-point 126 90) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 10000 10100 10200 10300 10400 10500 10600 10700 10800 10900 11000 11100 11200 11300 11400 11500 11600 11700 11800 11900 12000 12100 12200 12300 12400 12500 12600 12700 12800 12900 13000 13100 13200 13300 13400 13500 13600 13700 13800 13900 14000 14100 14200 14300 14400)) (quote (7200 7300 7400 7500 7600 7500 7400 7500 7600 7500 7600 7500 7600 7400 7500 7400 7600 7400 7500 7400 7500 7600 7500 7600 7500 7700 7800 7900 8000 7800 8000 7900 7800 7900 8000 7900 7800 8000 7900 8000 8100 7900 7800 7900 8000 8100 8000 7900 8000 8100 8000 8100 8000 7900 8000 8200 8300 8100 8400 8500 8400 8200 8100 8300 8400 8500 8400 8500 8400 8500 8400 8600 8500 8600 8500 8300 8500 8400 8200 8100 8200 8300 8200 8100 8400 8500 8400 8500 8300 8400 8600 8500 8600 8300 8200 8300 8500 8700 8800 8900 9000 8900 8800 8900 8800 8500 8600 8500 8400 8300 8100 8000 8100 8200 8300 8400 8300 8200 8100 8000 7900 7800 8000 7900 8000 7800 7600 7800 7700 7800 7700 7900 7800 7700 7300 7200 7400 7600 7700 7600 7700 7800 7700 7800 7700)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF 3") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 15" (quote list) (quote nil) (om-make-point 594 421) (om-make-point 52 30) (list 0 100) "(0 100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 14" (quote list) (quote nil) (om-make-point 714 425) (om-make-point 34 30) (list 34) "(34)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 475 494) (om-make-point 468 75) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7400) (7200) (7000) (6900) (7000) (7100) (6900) (6700) (6600) (6700) (6600) (6800) (7000) (6800) (6700) (6900) (6800) (6900) (6800) (6600) (6700) (6800) (6600) (6700) (6600) (6400) (6200) (6400) (6500) (6600) (6700) (6800) (7000) (7200) (7100) (7300) (7200) (7300) (7400) (7300) (7400) (7500) (7600) (7800) (7700) (7500) (7300) (7200) (7400) (7300) (7200) (7000) (6900) (7100) (7200) (7000) (6800) (6900) (7000) (7300) (7400) (7500) (7600) (7500) (7600) (7500) (7700) (7600) (7500) (7300) (7400) (7500) (7600) (7500) (7600) (7800) (7400) (7300) (7200) (7100) (7300) (7400) (7500) (7600) (7500) (7400) (7300) (7400) (7600) (7700) (7800) (7500) (7600) (7800) (7700) (7600) (7800) (7900) (7800) (7600) (7500) (7600) (7400) (7300) (7500) (7600) (7700) (7600) (7700) (7600) (7700) (7800) (7700) (7800) (8000) (7900) (8000) (8200) (8000) (7900) (8000) (7900) (7800) (7900) (7800) (7900) (8100) (8000) (8100) (8200) (8100) (7900) (8100) (8200) (8300) (8500) (8400) (8300) (8400) (8500) (8400) (8500) (8400) (8300) (8200) (8100) (8000) (7900) (7700) (7600) (7500) (7400) (7600) (7500) (7600) (7700) (7900) (8100) (8200) (8100) (8000) (8200) (8300) (8400) (8300) (8500) (8600) (8800) (8700) (8600) (8700) (8400) (8300) (8400) (8600) (8500) (8600) (8400) (8100) (8200) (8300) (7900) (8000) (8200) (8000) (8100) (8200) (8100) (8200) (8300) (8200) (8300) (8000) (8100) (8000) (7800) (7900) (7800) (7900) (7800))) :lonset (quote (0 100 200 300 500 600 800 900 1000 1100 1200 1400 1500 1600 1700 1900 2100 2200 2400 2500 2600 2800 2900 3000 3100 3300 3400 3500 3600 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 5200 5400 5500 5600 5700 5800 5900 6000 6100 6200 6400 6500 6600 6700 6800 6900 7100 7200 7300 7400 7500 7600 7700 7800 7900 8100 8200 8300 8400 8500 8700 8800 8900 9100 9500 9600 9800 9900 10100 10200 10300 10500 10700 10800 10900 11100 11300 11400 11500 11600 11800 12000 12100 12300 12400 12500 12700 12800 12900 13000 13200 13300 13400 13500 13700 13800 14000 14100 14200 14300 14400 14600 14700 14800 14900 15000 15100 15200 15400 15700 15800 15900 16000 16100 16200 16300 16600 16700 16800 16900 17000 17300 17400 17500 17600 17800 17900 18100 18200 18300 18500 18700 18800 18900 19000 19100 19200 19400 19600 19700 19800 19900 20100 20200 20400 20500 20700 20900 21100 21200 21300 21400 21600 21700 21800 21900 22000 22100 22300 22400 22500 22700 22800 22900 23000 23100 23200 23300 23500 23700 24000 24100 24200 24400 24500 24700 25000 25200 25300 25400 25600 25800 25900 26200 26300 26400 26500 26600 26700 26800 27000 27200 28200)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 17 108) (om-make-point 1227 432) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 538 423) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 13" (quote list) (quote nil) (om-make-point 500 371) (om-make-point 38 30) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 612 337) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 705 205) (om-make-point 17 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 731 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 805 92) (om-make-point 31 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 754 80) (om-make-point 31 30) 400 "400" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 685 100) (om-make-point 46 30) -400 "-400" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 692 141) (om-make-point 121 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 428 85) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 492 49) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 609 181) (om-make-point 41 30) 200 "200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 526 228) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 364 15) (om-make-point 162 30) (list 0.01 0.021 0.136 0.341) "(0.01 0.021 0.136 0.341)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOIXMULTIPLE" (quote alea::choixmultiple) (quote ((om-load-inputfun (quote input-funbox) "probability vector" "VECTPROB" (list 0.5 0.5)))) (om-make-point 483 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 340 175) (om-make-point 30 40) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 216 212) (om-make-point 133 107) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0 200.0 300.0 400.0 500.0 600.0 700.0 800.0 900.0 1000.0 1100.0 1200.0 1300.0 1400.0 1500.0 1600.0 1700.0 1800.0 1900.0 2000.0 2100.0 2200.0 2300.0 2400.0 2500.0 2600.0 2700.0 2800.0 2900.0 3000.0 3100.0 3200.0 3300.0 3400.0 3500.0 3600.0 3700.0 3800.0 3900.0 4000.0 4100.0 4200.0 4300.0 4400.0 4500.0 4600.0 4700.0 4800.0 4900.0 5000.0 5100.0 5200.0 5300.0 5400.0 5500.0 5600.0 5700.0 5800.0 5900.0 6000.0 6100.0 6200.0 6300.0 6400.0 6500.0 6600.0 6700.0 6800.0 6900.0 7000.0 7100.0 7200.0 7300.0 7400.0 7500.0 7600.0 7700.0 7800.0 7900.0 8000.0 8100.0 8200.0 8300.0 8400.0 8500.0 8600.0 8700.0 8800.0 8900.0 9000.0 9100.0 9200.0 9300.0 9400.0 9500.0 9600.0 9700.0 9800.0 9900.0 10000.0 10100.0 10200.0 10300.0 10400.0 10500.0 10600.0 10700.0 10800.0 10900.0 11000.0 11100.0 11200.0 11300.0 11400.0 11500.0 11600.0 11700.0 11800.0 11900.0 12000.0 12100.0 12200.0 12300.0 12400.0 12500.0 12600.0 12700.0 12800.0 12900.0 13000.0 13100.0 13200.0 13300.0 13400.0 13500.0 13600.0 13700.0 13800.0 13900.0 14000.0 14100.0 14200.0 14300.0 14400.0 14500.0 14600.0 14700.0 14800.0 14900.0 15000.0 15100.0 15200.0 15300.0 15400.0 15500.0 15600.0 15700.0 15800.0 15900.0 16000.0 16100.0 16200.0 16300.0 16400.0 16500.0 16600.0 16700.0 16800.0 16900.0 17000.0 17100.0 17200.0 17300.0 17400.0 17500.0 17600.0 17700.0 17800.0 17900.0 18000.0 18100.0 18200.0 18300.0 18400.0 18500.0 18600.0 18700.0 18800.0 18900.0 19000.0 19100.0 19200.0 19300.0 19400.0 19500.0 19600.0 19700.0 19800.0 19900.0 20000.0 20100.0 20200.0 20300.0 20400.0 20500.0 20600.0 20700.0 20800.0 20900.0 21000.0 21100.0 21200.0 21300.0 21400.0 21500.0 21600.0 21700.0 21800.0 21900.0 22000.0 22100.0 22200.0 22300.0 22400.0 22500.0 22600.0 22700.0 22800.0 22900.0 23000.0 23100.0 23200.0 23300.0 23400.0 23500.0 23600.0 23700.0 23800.0 23900.0 24000.0 24100.0 24200.0 24300.0 24400.0 24500.0 24600.0 24700.0 24800.0 24900.0)) (quote (50.0 49.4511 44.7114 46.1225 46.0352 44.2278 41.7346 41.4059 42.6213 38.2119 40.7331 43.4668 43.1788 44.3681 44.6226 48.6325 48.3956 50.5802 51.5209 54.7205 55.3401 55.4166 55.5109 54.0658 54.2589 58.8319 59.3397 61.4598 58.8305 57.8871 55.2111 55.3176 54.3622 55.8744 53.2498 54.3 54.5913 56.3409 58.0704 58.4193 55.1009 56.6764 57.1775 57.1669 58.9864 57.0371 54.992 56.6708 61.1149 57.4376 58.9114 57.0925 56.8399 56.0445 51.9599 51.6465 51.843 54.193 53.7125 48.8801 50.0371 53.9326 55.3843 54.884 53.536 54.1716 54.7099 52.5766 53.4918 51.9985 52.1813 52.1945 53.4731 55.5893 55.3105 54.4265 55.9536 55.916 57.7152 60.5831 62.5735 62.0795 63.4847 64.5594 63.5546 60.2386 62.4168 58.8632 60.5392 63.3692 60.8064 61.2568 59.7267 61.1395 59.8888 57.3324 56.3377 54.0264 55.4988 56.9498 58.2855 60.8639 58.8021 59.7681 61.3405 60.9546 58.0944 53.5957 54.7341 54.9114 55.749 53.9051 51.2557 50.6475 50.279 54.9321 53.5436 54.3186 52.4775 52.5746 54.3654 54.4102 55.0243 50.5045 52.5117 53.4891 52.072 52.5671 53.2878 48.1776 48.551 47.0941 46.8191 46.8046 45.6098 42.5638 44.3389 44.8162 45.3855 44.2926 43.7345 42.2498 46.2275 48.3314 49.6314 45.7378 48.129 49.6773 49.6696 50.1006 49.7211 50.0873 50.4451 51.4434 51.1571 51.8325 50.8947 52.9291 56.5071 55.9327 56.0799 57.0702 54.7496 53.7613 55.6096 54.7295 53.372 55.9881 52.135 50.5068 52.0036 48.9921 49.6084 48.0681 46.6768 44.9179 47.7285 49.933 49.8797 50.4853 50.7554 50.1971 51.4316 50.6634 51.5688 50.8193 50.2929 50.5925 53.5807 54.0302 50.2894 50.6577 51.7842 51.9146 54.0411 54.2161 53.6569 56.3235 57.8642 58.4969 53.7489 54.997 53.8277 54.0359 57.2848 58.6052 58.4311 60.8075 60.0031 56.3513 55.6698 57.4945 52.901 52.6824 51.9485 51.9628 53.0005 51.8709 51.1674 50.9448 47.6002 47.5524 45.0469 45.2562 44.6156 43.4076 42.9672 41.9263 41.7032 43.3729 40.6241 42.2624 43.5176 42.484 40.8518 40.1379 42.21 42.833 41.1217 39.9025 39.4508 38.5272 37.4989 35.9352 39.4579 41.0022 42.4081 41.8633 40.2686 39.1741)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF 2") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 48 214) (om-make-point 133 107) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 10000 10100 10200 10300 10400 10500 10600 10700 10800 10900 11000 11100 11200 11300 11400 11500 11600 11700 11800 11900 12000 12100 12200 12300 12400 12500 12600 12700 12800 12900 13000 13100 13200 13300 13400 13500 13600 13700 13800 13900 14000 14100 14200 14300 14400 14500 14600 14700 14800 14900 15000 15100 15200 15300 15400 15500 15600 15700 15800 15900 16000 16100 16200 16300 16400 16500 16600 16700 16800 16900 17000 17100 17200 17300 17400 17500 17600 17700 17800 17900 18000 18100 18200 18300 18400 18500 18600 18700 18800 18900 19000 19100 19200 19300 19400 19500 19600 19700 19800 19900 20000 20100 20200 20300 20400 20500 20600 20700 20800 20900 21000 21100 21200 21300 21400 21500 21600 21700 21800 21900 22000 22100 22200 22300 22400 22500 22600 22700 22800 22900 23000 23100 23200 23300 23400 23500 23600 23700 23800 23900 24000 24100 24200 24300 24400 24500 24600 24700 24800 24900)) (quote (50 49 45 46 46 44 42 41 43 38 41 43 43 44 45 49 48 51 52 55 55 55 56 54 54 59 59 61 59 58 55 55 54 56 53 54 55 56 58 58 55 57 57 57 59 57 55 57 61 57 59 57 57 56 52 52 52 54 54 49 50 54 55 55 54 54 55 53 53 52 52 52 53 56 55 54 56 56 58 61 63 62 63 65 64 60 62 59 61 63 61 61 60 61 60 57 56 54 55 57 58 61 59 60 61 61 58 54 55 55 56 54 51 51 50 55 54 54 52 53 54 54 55 51 53 53 52 53 53 48 49 47 47 47 46 43 44 45 45 44 44 42 46 48 50 46 48 50 50 50 50 50 50 51 51 52 51 53 57 56 56 57 55 54 56 55 53 56 52 51 52 49 50 48 47 45 48 50 50 50 51 50 51 51 52 51 50 51 54 54 50 51 52 52 54 54 54 56 58 58 54 55 54 54 57 59 58 61 60 56 56 57 53 53 52 52 53 52 51 51 48 48 45 45 45 43 43 42 42 43 41 42 44 42 41 40 42 43 41 40 39 39 37 36 39 41 42 42 40 39)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 227 52) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 179 49) (om-make-point 31 30) 250 "250" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 137 51) (om-make-point 31 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 98 51) (om-make-point 17 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 60 52) (om-make-point 24 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BROWNIAN1" (quote alea::brownian1) (quote ((om-load-inputfun (quote input-funbox) "first value" "NC" 50) (om-load-inputfun (quote input-funbox) "lower boundary" "BINF" 0.0) (om-load-inputfun (quote input-funbox) "upper boundary" "BSUP" 100.0) (om-load-inputfun (quote input-funbox) "sequence length" "LONG" 20) (om-load-inputfun (quote input-funbox) "bandwidth of the gaussian distribution" "SIGMA" 2))) (om-make-point 61 93) (om-make-point 167 75) (list (list 50 49.45112 44.71143 46.122536 46.035248 44.22781 41.734616 41.405915 42.621323 38.211865 40.733128 43.4668 43.178814 44.368077 44.62262 48.632523 48.395623 50.580216 51.52086 54.72052 55.340134 55.41656 55.51094 54.065777 54.25891 58.831868 59.339737 61.459786 58.830464 57.887116 55.21106 55.31762 54.36223 55.874428 53.249775 54.29996 54.591317 56.340908 58.070427 58.419304 55.10085 56.676445 57.177464 57.166893 58.986435 57.037133 54.99199 56.6708 61.11489 57.437577 58.911438 57.092534 56.8399 56.044545 51.95994 51.646458 51.843003 54.192963 53.712536 48.88009 50.037125 53.93255 55.384262 54.88396 53.536034 54.17163 54.709923 52.576577 53.491757 51.99851 52.181336 52.194523 53.47309 55.589287 55.310505 54.426526 55.953583 55.916024 57.71515 60.58314 62.57348 62.079483 63.48468 64.55942 63.55457 60.23855 62.41678 58.863205 60.53922 63.36917 60.80642 61.25676 59.726654 61.139508 59.888825 57.332386 56.337655 54.02643 55.498795 56.949776 58.28553 60.863903 58.80206 59.768113 61.340523 60.954598 58.094426 53.595684 54.7341 54.911396 55.74899 53.905056 51.255703 50.647484 50.279015 54.932084 53.54361 54.318566 52.477524 52.574593 54.36543 54.410237 55.024285 50.504548 52.511685 53.489098 52.072003 52.567086 53.287823 48.177624 48.550976 47.094063 46.8191 46.80456 45.609787 42.563828 44.33894 44.816227 45.385544 44.292584 43.734475 42.249768 46.227478 48.3314 49.631447 45.737793 48.129006 49.6773 49.669575 50.100617 49.72107 50.087334 50.445137 51.443383 51.157143 51.832535 50.8947 52.929074 56.50712 55.932717 56.07991 57.070237 54.749627 53.761307 55.609604 54.729546 53.372017 55.988076 52.135025 50.506825 52.003563 48.992104 49.608368 48.068142 46.67675 44.917946 47.72854 49.93296 49.879692 50.485318 50.75544 50.19708 51.431588 50.663365 51.56884 50.81927 50.292866 50.592545 53.580697 54.03022 50.28944 50.657723 51.784157 51.91462 54.04113 54.21613 53.65693 56.32347 57.864163 58.49693 53.748894 54.996994 53.827736 54.035885 57.284768 58.605225 58.431145 60.80748 60.00309 56.35134 55.669793 57.494526 52.900975 52.68239 51.9485 51.96278 53.00046 51.87085 51.167427 50.944764 47.600235 47.552384 45.046898 45.256234 44.615586 43.407635 42.967244 41.92633 41.703164 43.372857 40.624146 42.262406 43.517598 42.483998 40.85181 40.137925 42.21001 42.83301 41.121697 39.9025 39.450844 38.527153 37.498948 35.935158 39.457943 41.00221 42.40809 41.863327 40.26864 39.17414)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (10 0 1 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (8 0 4 2 nil 0) (8 0 7 1 nil 0) (3 0 7 2 nil 0) (6 0 7 4 nil 0) (9 0 8 0 nil 0) (10 0 8 1 nil 0) (12 0 10 0 nil 0) (20 0 10 1 nil 0) (11 0 12 0 nil 0) (16 0 12 1 nil 0) (15 0 16 0 nil 0) (14 0 16 1 nil 0) (13 0 16 2 nil 0) (21 0 17 0 nil 0) (18 0 17 1 nil 0) (21 0 18 0 nil 0) (22 0 20 0 nil 0) (19 0 20 1 nil 0) (17 0 22 0 nil 0) (31 0 24 2 nil 0) (23 0 24 3 nil 0) (31 0 25 2 nil 0) (30 0 31 0 nil 0) (29 0 31 1 nil 0) (28 0 31 2 nil 0) (27 0 31 3 nil 0) (26 0 31 4 nil 0))) nil 7.01))