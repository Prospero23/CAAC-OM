; OM File Header - Saved 2023/04/03 14:29:14
; (7.01 :patc (om-make-point 172 110) (om-make-point 75 39) (om-make-point 1512 916) "" 183 0 "2023/03/27 10:05:12" "2023/04/03 14:29:14")
; End File Header
(in-package :om)(load-lib-for (quote ("Alea")))(setf *om-current-persistent* (om-load-patch1 "patch c" (quote ((let ((box (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 229 38) (om-make-point 152 65) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 68 69 71 73 74 75 76 77 78 80 81 83 84 85 86 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104)) (quote (15 -4 15 16 19 21 23 25 26 29 31 32 34 35 36 36 35 35 34 31 39 27 19 16 15 13 11 10 10 10 10 11 12 16 22 26 29 31 51 54 55 56 57 58 58 58 58 57 57 56 55 54 52 49 42 39 37 35 34 32 30 27 24 24 22 20 -1 16 14 12 11 10 10 10 10 9 8 7 7 6 6 6 6 6 5 4 3 2 1 1 0 0 0 0 0 -1)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF 3") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 0 42) (om-make-point 500 400))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 506 15) (om-make-point 152 65) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 68 69 71 72 73 74 75 76 77 78 80 81 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105)) (quote (15 15 15 16 19 21 23 25 26 29 31 32 34 35 36 36 35 35 34 31 29 27 30 30 30 30 30 31 30 29 29 30 30 30 29 29 29 31 36 42 48 51 54 55 56 57 58 58 58 58 57 57 56 55 54 52 49 42 39 37 35 34 32 30 27 24 24 22 20 18 17 16 14 12 11 10 10 10 10 9 8 18 7 18 6 20 6 17 6 18 4 3 18 1 18 0 0 0 18 0 -1 19)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF 2") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 0 42) (om-make-point 500 400))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 194 30) (quote "dynamic envelop of sequence") "" (om-make-point 312 4) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "concat-chord-seq" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "chord-seq" nil))) (om-make-point 349 647) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "CONCAT" (quote concat) (quote ((om-load-inputfun (quote input-funbox) "a musical sequence" "S1" nil) (om-load-inputfun (quote input-funbox) "a musical sequence" "S2" nil))) (om-make-point 520 135) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "accum" (quote accumulator) (quote ((om-load-inputfun (quote input-funbox) "items to collect" "DATA" nil) (om-load-inputfun (quote input-funbox) "initial value" "INIT" nil) (om-load-inputfun (quote input-funbox) "accumulation function" "FUN" nil))) (om-make-point 290 209) (om-make-point 180 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 95 114) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 29 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 132 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chord-seq" 0 (om-make-point 5 45) "" "chord-seq" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 465 364) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 273 360) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 1 0 nil 0) (3 0 1 1 nil 0) (0 0 1 2 nil 0) (5 0 2 0 nil 0) (5 0 3 0 nil 0) (2 0 4 0 nil 0) (1 1 6 0 nil 0) (1 0 7 0 nil 0))) 1 "concat-chord-seq" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOIX" (quote alea::choix) (quote ((om-load-inputfun (quote input-funbox) "first choice" "X1" 1) (om-load-inputfun (quote input-funbox) "second choice" "X2" 2) (om-load-inputfun (quote input-funbox) "probability" "PX1" 0.39))) (om-make-point 324 273) (om-make-point 163 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 356 448) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 463 412) (om-make-point 34 30) 25 "25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 347 746) (om-make-point 338 152) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4827) (4929) (5089) (5249) (4885) (4949) (5196) (4808) (5086) (5086) (6000) (6707) (7091) (7213) (8141) (8264) (8772) (8773) (8595) (8103) (6968) (7727) (7035) (6904) (6424) (5172) (4926) (4996) (4787) (5133) (5133) (6000) (6156) (6577) (6783) (7515) (7876) (8451) (8474) (8773) (8687) (7438) (7573) (8503) (8397) (8079) (7277) (7596) (6947) (6312) (6917) (6000) (6671) (7043) (6805) (6957) (6772) (6545) (6556) (7487) (7850) (7864) (7875) (8270) (7811) (7654) (7581) (7088) (6971) (5042) (4824) (5084) (5202) (4786) (5169) (4802) (4995) (4995) (6000) (6297) (6804) (7426) (7487) (8239) (8490) (7950) (8573) (8566) (8627) (8226) (8832) (8691) (8700) (8473) (8662) (8955) (8986) (8859) (8566) (8798) (8763) (8809) (8756) (4858) (5040) (5173) (5414) (5178) (5091) (5091) (4995) (4794) (4942) (4814) (5511) (5298) (4965) (4965) (4889) (5126) (5085) (4983) (5013) (5051) (4934) (4934) (6000) (6258) (6970) (7330) (7351) (6350) (6281) (6461) (7214) (7331) (6702) (6262) (6245) (6128) (6113) (6066) (6323) (6765) (7568) (7869) (6847) (7099) (7171) (7297) (7249) (6818) (6168) (7091) (7027) (7044) (5139) (4583) (5009) (5021) (4682) (4883) (5259) (5259) (6000) (6202) (6079) (6219) (6470) (6016) (6458) (6261) (6077) (7275) (6947) (7598) (8324) (8405) (7790) (7748) (8396) (7975) (8298) (8432) (8429) (8106) (7099) (5040) (5142) (5119) (5039) (4790) (5074) (5270) (5062) (5023) (4987) (4987) (6000) (6216) (6057) (6719) (7312) (6564) (6285) (6663) (6139) (6679) (6696) (6256) (6457) (6440) (7737) (7812) (7903) (8274) (7743) (8150) (7663) (8838) (6000) (6306) (6919) (6640) (6545) (6261) (6735) (6584) (6633) (6214) (6067) (6409) (6122) (6722) (6833) (7603) (6734) (6397) (6000) (6104) (6110) (6603) (6785) (6501) (6668) (6219) (6049) (6377) (6117) (6302) (6040) (6103) (6009) (7152) (7561) (6000) (6536) (6392) (6901) (6554) (6022) (6402) (6278) (7299) (7278) (7440) (6935) (6996) (7288) (8084) (8133) (8969) (4919) (4932) (5118) (5308) (5253) (5253) (6000) (6374) (6672) (6642) (6329) (6627) (6613) (6576) (6316) (6766) (6155) (6765) (6965) (6952) (7684) (8358) (8073) (8542) (8339) (8212) (8762) (8787) (8613) (8756) (8107) (8117) (5066) (5187) (5055) (5008) (4914) (4704) (4902) (5069) (5010) (5010) (4683) (4736) (4967) (5043) (5429) (5429) (4960) (4886) (5061) (4812) (4829) (4887) (4887) (6000) (6729) (7408) (7464) (7641) (7403) (8107) (8453) (7732) (6949) (6833) (6696) (6623) (6636) (6855) (6794) (7350) (6966) (7275) (7929) (7981) (7374) (5084) (5004) (4756) (4937) (4942) (4927) (4927))) :lonset (quoteldur (quotelvel (quote ((20) (54) (21) (40) (100) (63) (27) (10) (17) (27) (35) (51) (68) (40) (27) (61) (100) (99) (68) (48) (33) (27) (21) (14) (10) (24) (47) (100) (53) (10) (32) (35) (45) (60) (65) (42) (27) (35) (69) (97) (100) (92) (65) (48) (12) (27) (26) (21) (19) (12) (10) (34) (47) (64) (62) (33) (28) (58) (95) (100) (91) (63) (46) (35) (27) (22) (21) (13) (10) (24) (62) (16) (79) (100) (41) (15) (10) (32) (34) (42) (54) (65) (64) (45) (28) (27) (49) (74) (96) (100) (97) (83) (64) (48) (37) (34) (27) (26) (22) (21) (16) (12) (10) (16) (57) (39) (100) (24) (10) (24) (26) (63) (17) (100) (61) (21) (10) (33) (26) (63) (17) (100) (61) (21) (10) (33) (34) (39) (50) (60) (66) (63) (46) (31) (27) (32) (55) (77) (95) (100) (98) (94) (74) (63) (50) (45) (19) (29) (27) (26) (22) (21) (19) (13) (12) (10) (26) (63) (17) (100) (61) (21) (10) (33) (34) (43) (57) (66) (59) (35) (27) (37) (65) (95) (100) (97) (79) (62) (48) (11) (29) (27) (22) (21) (17) (12) (10) (30) (58) (51) (24) (97) (100) (56) (30) (18) (10) (37) (35) (44) (59) (67) (69) (32) (27) (50) (79) (99) (100) (93) (67) (51) (37) (32) (27) (24) (21) (18) (12) (10) (34) (47) (64) (62) (33) (28) (58) (95) (100) (91) (63) (46) (35) (27) (22) (21) (13) (10) (35) (48) (65) (65) (28) (33) (75) (100) (98) (70) (48) (17) (27) (23) (21) (13) (10) (35) (48) (65) (65) (28) (33) (75) (100) (98) (70) (48) (17) (27) (23) (21) (13) (10) (24) (47) (100) (53) (10) (32) (35) (41) (53) (64) (65) (57) (32) (27) (39) (62) (92) (100) (99) (94) (71) (59) (47) (15) (30) (27) (25) (21) (21) (15) (12) (10) (20) (54) (21) (40) (100) (63) (27) (10) (17) (27) (24) (47) (100) (53) (10) (32) (16) (57) (39) (100) (24) (10) (24) (35) (44) (59) (67) (69) (32) (27) (50) (79) (99) (100) (93) (67) (51) (37) (32) (27) (24) (21) (18) (12) (10) (16) (57) (39) (100) (24) (10) (24))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 0 42) (om-make-point 500 400) 0 1000 nil 193/100 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 401 30) (quote "This concatenates all chord-sequences to one chord-seq object.") "" (om-make-point 454 661) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "process 2" (om-load-patch-abs1 "process 2" (quote ((let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 470 100) (om-make-point 38 30) 2000 "2000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 574 171) (om-make-point 24 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 520 155) (om-make-point 17 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 477 763) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 745 244) (om-make-point 31 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 718 231) (om-make-point 24 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 676 271) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 5) (om-load-inputfun (quote input-funbox) "max" "HIGH" 10))) (om-make-point 508 209) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SAMPLE" (quote om-sample) (quote ((om-load-inputfun (quote input-funbox) "object to resample" "SELF" nil) (om-load-inputfun (quote input-funbox) "number of samples (int) or sample rate (float)" "SAMPLE-RATE" 1))) (om-make-point 664 164) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "loudness" 0 (om-make-point 658 47) "" "loudness" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 468 606) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5148) (4911) (5206) (4827) (4601))) :lonset (quote (0 3084 4866 7278 8532 9532)) :ldur (quote ((1000) (1000) (1000) (1000) (1000))) :lvel (quote ((80) (80) (80) (80) (80))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote f) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 796 432) (om-make-point 0 42) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GAUSS 2" (quote alea::gauss) (quote ((om-load-inputfun (quote input-funbox) "average" "MU" 0.0) (om-load-inputfun (quote input-funbox) "bandwidth" "SIGMA" 1.0))) (om-make-point 322 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 318 69) (om-make-point 48 30) 5000 "5000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 370 308) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GAUSS" (quote alea::gauss) (quote ((om-load-inputfun (quote input-funbox) "average" "MU" 0.0) (om-load-inputfun (quote input-funbox) "bandwidth" "SIGMA" 1.0))) (om-make-point 470 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 517 307) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 380 78) (om-make-point 41 30) 200 "200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 524 374) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 534 95) (om-make-point 41 30) 600 "600" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 604 367) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-NTH" (quote remove-nth) (quote ((om-load-inputfun (quote input-funbox) "list" "SEQUENCE" (list 0 1 2 3 4)) (om-load-inputfun (quote input-funbox) "pos" "NTH" 1))) (om-make-point 489 508) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 593 446) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 362 418) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 3 0 nil 0) (8 2 6 0 nil 0) (5 0 6 1 nil 0) (4 0 6 2 nil 0) (2 0 7 0 nil 0) (1 0 7 1 nil 0) (9 0 8 0 nil 0) (19 0 8 1 nil 0) (22 0 10 1 nil 0) (20 0 10 2 nil 0) (6 0 10 4 ((om-make-point 703 328) (om-make-point 703 467) (om-make-point 657 518) (om-make-point 538 606)) 0) (12 0 11 0 nil 0) (16 0 11 1 nil 0) (11 0 13 0 nil 0) (7 0 13 1 nil 0) (0 0 14 0 nil 0) (18 0 14 1 nil 0) (14 0 15 0 nil 0) (7 0 15 1 nil 0) (15 0 17 1 nil 0) (17 0 19 0 nil 0) (17 0 20 0 nil 0) (21 0 20 1 nil 0) (19 0 21 0 nil 0) (13 0 22 0 nil 0))) 7.01 nil "" (om-make-point 0 42) (om-make-point 1512 917)) (quote ((om-load-inputfun (quote input-funbox) "" "loudness" nil))) (om-make-point 447 102) nil (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5084) (5004) (4756) (4937) (4942) (4927) (4927))) :lonset (quote (0 1012 2730 4882 7718 9233 10749 11749)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((16) (57) (39) (100) (24) (10) (24))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil "process 2"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "process 1" (om-load-patch-abs1 "process 1" (quote ((let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 674 561) (om-make-point 24 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 449 365) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 549 551) (om-make-point 62 30) (list 0 100) "(0 100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 382 529) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 541 611) (om-make-point 211 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6897) (7167) (7786) (7796) (8268) (8003) (8908) (8883) (8533) (7845) (7261) (7489) (7423) (7585))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1410)) :ldur (quote ((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10))) :lvel (quote ((80) (80) (80) (80) (80) (80) (80) (80) (80) (80) (80) (80) (80) (80) (80))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 500 400) (om-make-point 0 42) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 47 585) (om-make-point 237 129) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6000 6040 6122 6169 6221 6250 6265 6278 6423 6573 6646 6709 6915 6936 7205)) (quote (0 100 600 300 1100 1200 1400 500 1000 400 200 800 1300 700 900)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BROWNIAN1" (quote alea::brownian1) (quote ((om-load-inputfun (quote input-funbox) "first value" "NC" 6000) (om-load-inputfun (quote input-funbox) "lower boundary" "BINF" 6000) (om-load-inputfun (quote input-funbox) "upper boundary" "BSUP" 9000) (om-load-inputfun (quote input-funbox) "sequence length" "LONG" 20) (om-load-inputfun (quote input-funbox) "bandwidth of the gaussian distribution" "SIGMA" 500))) (om-make-point 310 398) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SAMPLE" (quote om-sample) (quote ((om-load-inputfun (quote input-funbox) "object to resample" "SELF" nil) (om-load-inputfun (quote input-funbox) "number of samples (int) or sample rate (float)" "SAMPLE-RATE" 1))) (om-make-point 651 188) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 663 295) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 705 255) (om-make-point 24 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 732 268) (om-make-point 31 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "dynamics" 0 (om-make-point 597 17) "" "dynamics" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 375 203) (om-make-point 34 30) 30 "30" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 296 204) (om-make-point 34 30) 15 "15" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 322 277) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 600 736) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 3 0 nil 0) (6 0 4 1 nil 0) (2 0 4 2 nil 0) (0 0 4 3 nil 0) (8 0 4 4 nil 0) (6 0 5 1 nil 0) (14 0 6 3 nil 0) (11 0 7 0 nil 0) (3 0 7 1 nil 0) (7 2 8 0 nil 0) (9 0 8 1 nil 0) (10 0 8 2 nil 0) (13 0 14 0 nil 0) (12 0 14 1 nil 0) (4 0 15 0 nil 0))) 7.01 nil "" (om-make-point 284 142) (om-make-point 1512 916)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 279 114) nil (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6035) (6025) (6325) (6185) (6788) (6113) (6008) (6159) (6263) (6373) (6722) (6100) (6407) (6290) (6143) (6250) (6011) (6068) (6642) (7799) (6989) (7101) (6536))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2310)) :ldur (quote ((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10))) :lvel (quote ((35) (43) (56) (66) (64) (38) (27) (30) (57) (88) (100) (100) (94) (69) (56) (46) (28) (27) (27) (22) (21) (16) (12) (10))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil "process 1"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 3 0 nil 0) (10 0 4 0 nil 0) (9 0 4 1 nil 0) (4 0 5 0 nil 0) (6 0 5 1 nil 0) (3 0 7 0 nil 0) (1 0 9 0 nil 0) (0 0 10 0 nil 0))) nil 7.01))
