; OM File Header - Saved 2023/04/03 14:29:14
; (7.01 :patc (om-make-point 10 60) (om-make-point 0 50) (om-make-point 1512 872) "" 183 0 "2023/04/02 18:37:50" "2023/04/03 14:29:14")
; End File Header
(in-package :om)(load-lib-for (quote ("Alea")))(setf *om-current-persistent* (om-load-patch1 "psappha-2-forms" (quote ((let ((box (om-load-boxout "output 2" 1 (om-make-point 855 755) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "method-2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 236 738) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "method-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 420 45) (quote "This loop converts s to 0 and l to 1, since the ana-mark function in$the Alea library only understand numbers and not characters.") "" (om-make-point 526 141) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 267 146) (quote "The second method uses Markov chains to model the $transitional probability matrix of the following events: s->s, s->l, l->s, l->s. $It then uses the transitional probability matrix to a Markov1 functions and draws a number of values equal to the length of the original sequence.") "" (om-make-point 727 350) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 560 670) (om-make-point 316 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 288 20) "(l s l l s s l l l l l s l l s l s s s l s s s s l s)" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 231 191) (quote "The first method computes the probability of s and l durations. $It then feeds the probability values to a Bernoulli distribution (CHOIX function) and draws a number of$values equal to the length of the original sequence.") "" (om-make-point 279 389) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "count-s-l 3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 720 756) nil nil nil (list (let ((box (om-load-boxcomment "comment 2" (om-make-point 330 45) (quote "Since s and l are characters, input them as strings. $Call the string function from Classes->Lisp->String") "" (om-make-point 325 51) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 359 75) (quote "Notice that in this case we are counting instances$of characters s and l. The OM= function tests equality $between numbers, not characters. For equality between $characters, use the eql function.") "" (om-make-point 326 105) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQL 2" (quote eql) (quote ((om-load-inputfun (quote input-funbox) "A" "A" nil) (om-load-inputfun (quote input-funbox) "B" "B" nil))) (om-make-point 238 106) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQL" (quote eql) (quote ((om-load-inputfun (quote input-funbox) "A" "A" nil) (om-load-inputfun (quote input-funbox) "B" "B" nil))) (om-make-point 114 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 281 57) (om-make-point 23 30) (quote l) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "count 2" (quote counter) (quote ((om-load-inputfun (quote input-funbox) "things to count" "SOMETHING" nil))) (om-make-point 264 151) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 151 82) (om-make-point 26 30) (quote s) "s" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "count" (quote counter) (quote ((om-load-inputfun (quote input-funbox) "things to count" "SOMETHING" nil))) (om-make-point 156 170) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 62 74) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 320 430) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 214 432) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((8 0 2 0 nil 0) (4 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 3 1 nil 0) (2 0 5 0 nil 0) (3 0 7 0 nil 0) (9 0 8 0 nil 0) (7 1 10 0 nil 0) (5 1 10 1 nil 0) (7 0 11 0 nil 0) (5 0 11 1 nil 0))) 2 "count-s-l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 608 560) (om-make-point 33 30) (list (quote s) (quote l)) "(s l)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 620 597) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 707 505) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 681 532) (om-make-point 30 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 668 353) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 637 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 532 436) (om-make-point 123 59) nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MARKOV1" (quote alea::markov1) (quote ((om-load-inputfun (quote input-funbox) "markovian matrix written in the list" "L" nil) (om-load-inputfun (quote input-funbox) "last element" "PRIM" nil))) (om-make-point 589 337) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "convert-sl-to-01" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 432 152) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 344 387) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 296 236) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 244 237) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 165 270) (om-make-point 213 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQL" (quote eql) (quote ((om-load-inputfun (quote input-funbox) "A" "A" nil) (om-load-inputfun (quote input-funbox) "B" "B" nil))) (om-make-point 147 179) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "string" (quote string) (quote nil) (om-make-point 182 116) (om-make-point 26 30) (quote s) "s" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 92 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 373 469) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 292 478) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (4 0 3 0 nil 0) (2 0 3 1 nil 0) (1 0 3 2 nil 0) (6 0 4 0 nil 0) (5 0 4 1 nil 0) (7 0 6 0 nil 0) (0 1 8 0 nil 0) (0 0 9 0 nil 0))) 1 "convert-sl-to-01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ANA-MARK" (quote alea::ana-mark) (quote ((om-load-inputfun (quote input-funbox) "sequence" "DATA" 0))) (om-make-point 532 236) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "count-s-l 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 144 738) nil nil nil (list (let ((box (om-load-boxcomment "comment 2" (om-make-point 330 45) (quote "Since s and l are characters, input them as strings. $Call the string function from Classes->Lisp->String") "" (om-make-point 325 51) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 359 75) (quote "Notice that in this case we are counting instances$of characters s and l. The OM= function tests equality $between numbers, not characters. For equality between $characters, use the eql function.") "" (om-make-point 326 105) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQL 2" (quote eql) (quote ((om-load-inputfun (quote input-funbox) "A" "A" nil) (om-load-inputfun (quote input-funbox) "B" "B" nil))) (om-make-point 238 106) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQL" (quote eql) (quote ((om-load-inputfun (quote input-funbox) "A" "A" nil) (om-load-inputfun (quote input-funbox) "B" "B" nil))) (om-make-point 114 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 281 57) (om-make-point 23 30) (quote l) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "count 2" (quote counter) (quote ((om-load-inputfun (quote input-funbox) "things to count" "SOMETHING" nil))) (om-make-point 264 151) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 151 82) (om-make-point 26 30) (quote s) "s" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "count" (quote counter) (quote ((om-load-inputfun (quote input-funbox) "things to count" "SOMETHING" nil))) (om-make-point 156 170) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 62 74) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 320 430) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 214 432) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((8 0 2 0 nil 0) (4 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 3 1 nil 0) (2 0 5 0 nil 0) (3 0 7 0 nil 0) (9 0 8 0 nil 0) (7 1 10 0 nil 0) (5 1 10 1 nil 0) (7 0 11 0 nil 0) (5 0 11 1 nil 0))) 2 "count-s-l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 33 673) (om-make-point 316 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 288 20) "(s s s s l l s l l s s l s l s l s s s s s s l l s l)" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 181 583) (om-make-point 123 59) nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "string 2" (quote string) (quote nil) (om-make-point 144 415) (om-make-point 23 30) (quote l) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "string" (quote string) (quote nil) (om-make-point 109 415) (om-make-point 26 30) (quote s) "s" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOIX" (quote alea::choix) (quote ((om-load-inputfun (quote input-funbox) "first choice" "X1" 1) (om-load-inputfun (quote input-funbox) "second choice" "X2" 2) (om-load-inputfun (quote input-funbox) "probability" "PX1" 0.5))) (om-make-point 108 459) (om-make-point 132 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 91 30) (quote "prob-of-long") "" (om-make-point 256 326) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 97 30) (quote "prob-of-short") "" (om-make-point 81 323) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLOAT 2" (quote float) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil))) (om-make-point 197 319) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLOAT" (quote float) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil))) (om-make-point 37 321) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/ 2" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 208 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 60 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 224 168) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "count-s-l" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 137 152) nil nil nil (list (let ((box (om-load-boxcomment "comment 2" (om-make-point 330 45) (quote "Since s and l are characters, input them as strings. $Call the string function from Classes->Lisp->String") "" (om-make-point 325 51) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 359 75) (quote "Notice that in this case we are counting instances$of characters s and l. The OM= function tests equality $between numbers, not characters. For equality between $characters, use the eql function.") "" (om-make-point 326 105) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQL 2" (quote eql) (quote ((om-load-inputfun (quote input-funbox) "A" "A" nil) (om-load-inputfun (quote input-funbox) "B" "B" nil))) (om-make-point 238 106) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQL" (quote eql) (quote ((om-load-inputfun (quote input-funbox) "A" "A" nil) (om-load-inputfun (quote input-funbox) "B" "B" nil))) (om-make-point 114 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 281 57) (om-make-point 23 30) (quote l) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "count 2" (quote counter) (quote ((om-load-inputfun (quote input-funbox) "things to count" "SOMETHING" nil))) (om-make-point 264 151) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 151 82) (om-make-point 26 30) (quote s) "s" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "count" (quote counter) (quote ((om-load-inputfun (quote input-funbox) "things to count" "SOMETHING" nil))) (om-make-point 156 170) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 62 74) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 320 430) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 214 432) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((8 0 2 0 nil 0) (4 0 2 1 nil 0) (8 0 3 0 nil 0) (6 0 3 1 nil 0) (2 0 5 0 nil 0) (3 0 7 0 nil 0) (9 0 8 0 nil 0) (7 1 10 0 nil 0) (5 1 10 1 nil 0) (7 0 11 0 nil 0) (5 0 11 1 nil 0))) 2 "count-s-l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 188 49) (om-make-point 404 34) (load-buffer-textfile (quote ("s l s l l l s s s s l s l s l s l l s s l l l s s l ; sieve of Psappha" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (18 0 1 0 nil 0) (8 0 4 0 nil 0) (4 0 6 0 nil 0) (7 0 8 0 nil 0) (10 0 8 1 nil 0) (13 0 10 0 nil 0) (9 0 10 1 nil 0) (16 0 12 0 nil 0) (14 0 13 0 nil 0) (29 0 13 1 nil 0) (12 0 14 0 nil 0) (11 0 14 1 nil 0) (31 1 15 0 nil 0) (15 0 16 0 nil 0) (18 0 17 0 nil 0) (19 0 18 0 nil 0) (22 0 19 0 nil 0) (29 0 19 1 nil 0) (21 0 22 0 nil 0) (20 0 22 1 nil 0) (26 0 22 2 nil 0) (27 0 25 0 nil 0) (28 0 26 0 nil 0) (30 1 27 0 nil 0) (29 0 27 1 nil 0) (30 0 28 0 nil 0) (29 0 28 1 nil 0) (31 1 29 0 nil 0) (31 1 30 0 nil 0))) nil 7.01))
