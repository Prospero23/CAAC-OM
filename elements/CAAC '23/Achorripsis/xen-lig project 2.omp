; OM File Header - Saved 2023/12/09 00:42:39
; (7.01 :patc (om-make-point 118 60) (om-make-point 0 38) (om-make-point 1512 916) "" 183 0 "2023/03/18 09:33:57" "2023/12/09 00:42:39")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"recursive-poisson-step.omp\""))
(in-package :om)(load-lib-for (quote ("Alea")))(setf *om-current-persistent* (om-load-patch1 "xen-lig project 2" (quote ((let ((box (om-load-boxcall (quote lispfun) "CONCATENATE 5" (quote concatenate) (quote ((om-load-inputfun (quote input-funbox) "RESULT-TYPE" "RESULT-TYPE" (quote string)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1404 269) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CONCATENATE 4" (quote concatenate) (quote ((om-load-inputfun (quote input-funbox) "RESULT-TYPE" "RESULT-TYPE" (quote string)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1108 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CONCATENATE 3" (quote concatenate) (quote ((om-load-inputfun (quote input-funbox) "RESULT-TYPE" "RESULT-TYPE" (quote string)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 913 284) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CONCATENATE 2" (quote concatenate) (quote ((om-load-inputfun (quote input-funbox) "RESULT-TYPE" "RESULT-TYPE" (quote string)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 729 305) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 13" (quote list) (quote nil) (om-make-point 1290 239) (om-make-point 112 30) "Event Type 4: " "\"Event Type 4: \"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 1045 231) (om-make-point 112 30) "Event Type 3: " "\"Event Type 3: \"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 549 286) (om-make-point 112 30) "Event Type 0: " "\"Event Type 0: \"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 862 248) (om-make-point 112 30) "Event Type 2: " "\"Event Type 2: \"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 669 269) (om-make-point 102 30) "Event Type 1: " "\"Event Type 1: \"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CONCATENATE" (quote concatenate) (quote ((om-load-inputfun (quote input-funbox) "RESULT-TYPE" "RESULT-TYPE" (quote string)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 594 319) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 114 60) (quote "Matrix of results$$") "" (om-make-point 746 739) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 8" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 860 730) (om-make-point 332 159) (load-buffer-textfile (quote ("Event Type 0: (5 2 2 1 2 0 4 2 0 3 2 2 2 2 4 2 5 1 4 1)" "" "Event Type 1: (3 1 3 0 3 0 1 0 1 1 2 3 1 3 1 2 5 1 4 0)" "" "Event Type 2: (1 0 0 0 1 2 1 1 0 0 0 1 0 1 0 1 1 0 2 2)" "" "Event Type 3: (0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 1 0 0)" "" "Event Type 4: (0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0)" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NUMBER-TO-STRING 5" (quote number-to-string) (quote ((om-load-inputfun (quote input-funbox) "INT" "INT" nil))) (om-make-point 1385 194) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NUMBER-TO-STRING 4" (quote number-to-string) (quote ((om-load-inputfun (quote input-funbox) "INT" "INT" nil))) (om-make-point 1122 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NUMBER-TO-STRING 3" (quote number-to-string) (quote ((om-load-inputfun (quote input-funbox) "INT" "INT" nil))) (om-make-point 910 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NUMBER-TO-STRING 2" (quote number-to-string) (quote ((om-load-inputfun (quote input-funbox) "INT" "INT" nil))) (om-make-point 726 219) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NUMBER-TO-STRING" (quote number-to-string) (quote ((om-load-inputfun (quote input-funbox) "INT" "INT" nil))) (om-make-point 615 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 101 30) (quote "total # events") "" (om-make-point 462 560) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 708 44) (om-make-point 24 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 687 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND 2" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 774 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD 2" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 946 149) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FOURTH 2" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1154 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIFTH 2" (quote fifth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1422 135) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "second-level" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "probs" nil) (om-load-inputfun (quote input-funbox) "" "divs" nil))) (om-make-point 675 68) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 212 101) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 246 284) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "divs" 1 (om-make-point 331 52) "" "divs" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "recursive-poisson-step" (quote ("elements" "CAAC '23" "Xen Project 2" "recursive-poisson-step")) (quote ((om-load-inputfun (quote input-funbox) "" "prob" nil) (om-load-inputfun (quote input-funbox) "" "divs" nil))) (om-make-point 194 195) (om-make-point 133 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "probs" 0 (om-make-point 240 37) "" "probs" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 352 416) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 199 380) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 0 0 nil 0) (3 0 1 0 nil 0) (0 0 3 0 nil 0) (2 0 3 1 nil 0) (1 1 5 0 nil 0) (1 0 6 0 nil 0))) 1 "second-level" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1360 332) (om-make-point 273 148) (load-buffer-textfile (quote ("Event Type 4: (0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0)" "")) (quote textfile) "supersede" "text") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 929 634) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 7" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 875 347) (om-make-point 174 157) (load-buffer-textfile (quote ("Event Type 2: (1 0 0 0 1 2 1 1 0 0 0 1 0 1 0 1 1 0 2 2)" "")) (quote textfile) "supersede" "text") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 6" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 732 357) (om-make-point 109 172) (load-buffer-textfile (quote ("Event Type 1: (3 1 3 0 3 0 1 0 1 1 2 3 1 3 1 2 5 1 4 0)" "")) (quote textfile) "supersede" "text") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 5" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 588 385) (om-make-point 114 48) (load-buffer-textfile (quote ("Event Type 0: (5 2 2 1 2 0 4 2 0 3 2 2 2 2 4 2 5 1 4 1)" "")) (quote textfile) "supersede" "text") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1067 338) (om-make-point 273 148) (load-buffer-textfile (quote ("Event Type 3: (0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 1 0 0)" "")) (quote textfile) "supersede" "text") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 484 591) (om-make-point 31 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 435 625) (om-make-point 32 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 463 524) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 0))) (om-make-point 408 561) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 458 437) (om-make-point 28 30) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE/SUM" (quote om-scale/sum) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" (list 1 2 3)) (om-load-inputfun (quote input-funbox) "number" "SUM" 10))) (om-make-point 396 466) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "list-sum 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "sequence-of-numbers" nil))) (om-make-point 300 467) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 106 110) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "sum" (quote sum) (quote ((om-load-inputfun (quote input-funbox) "numbers to sum" "NUMBER" nil))) (om-make-point 217 113) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "sequence-of-numbers" 0 (om-make-point 5 45) "" "sequence-of-numbers" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 200 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (1 1 3 0 nil 0) (1 0 4 0 nil 0))) 1 "list-sum" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 25 512) (om-make-point 147 100) (load-buffer-textfile (quote ("P(0-class): 0.4602" "P(1-class): 0.354" "P(2-class): 0.1437" "P(3-class): 0.0343" "P(4-class): 0.0078" "" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "prob-of-each-class?" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "number-of-occurences" nil) (om-load-inputfun (quote input-funbox) "" "total-number" nil))) (om-make-point 234 385) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 140 222) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 111 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 384 210) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 0))) (om-make-point 282 241) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 485 319) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 381 335) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NUMBER-TO-STRING 2" (quote number-to-string) (quote ((om-load-inputfun (quote input-funbox) "INT" "INT" nil))) (om-make-point 163 318) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CONCATENATE" (quote concatenate) (quote ((om-load-inputfun (quote input-funbox) "RESULT-TYPE" "RESULT-TYPE" (quote string)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 102 485) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 216 213) (om-make-point 57 36) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 114 388) (om-make-point 76 30) "-class): " "\"-class): \"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 35 411) (om-make-point 32 30) "P(" "\"P(\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NUMBER-TO-STRING" (quote number-to-string) (quote ((om-load-inputfun (quote input-funbox) "INT" "INT" nil))) (om-make-point 37 329) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "count" (quote counter) (quote ((om-load-inputfun (quote input-funbox) "things to count" "SOMETHING" nil))) (om-make-point 44 202) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 80 128) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "total-number" 1 (om-make-point 240 127) "" "total-number" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "number-of-occurences" 0 (om-make-point 5 45) "" "number-of-occurences" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 453 435) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 361 436) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((12 0 1 0 nil 0) (0 0 1 1 nil 0) (8 0 3 0 nil 0) (2 0 3 1 nil 0) (3 0 4 0 nil 0) (7 0 5 0 nil 0) (3 0 6 0 nil 0) (10 0 7 1 nil 0) (11 0 7 2 nil 0) (9 0 7 3 nil 0) (6 0 7 4 nil 0) (13 0 8 0 nil 0) (14 0 8 1 nil 0) (1 0 11 0 nil 0) (13 0 12 0 nil 0) (15 0 13 0 nil 0) (5 1 16 0 nil 0) (4 1 16 1 nil 0) (5 0 17 0 nil 0) (4 0 17 1 nil 0))) 2 "prob-of-each-class?" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "list-sum" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "sequence-of-numbers" nil))) (om-make-point 318 306) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 106 110) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "sum" (quote sum) (quote ((om-load-inputfun (quote input-funbox) "numbers to sum" "NUMBER" nil))) (om-make-point 217 113) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "sequence-of-numbers" 0 (om-make-point 5 45) "" "sequence-of-numbers" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 200 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (1 1 3 0 nil 0) (1 0 4 0 nil 0))) 1 "list-sum" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 62 350) (om-make-point 147 100) (load-buffer-textfile (quote ("0-class events: 4595" "1-class events: 3534" "2-class events: 1435" "3-class events: 342" "4-class events: 78" "" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 333 93) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 377 93) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 337 145) (om-make-point 92 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "how-many-instances?" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "experiment-results" nil) (om-load-inputfun (quote input-funbox) "" "classes" nil))) (om-make-point 200 236) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 24 441) (om-make-point 52 30) (quote string) "string" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CONCATENATE" (quote concatenate) (quote ((om-load-inputfun (quote input-funbox) "RESULT-TYPE" "RESULT-TYPE" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 54 472) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NUMBER-TO-STRING 2" (quote number-to-string) (quote ((om-load-inputfun (quote input-funbox) "INT" "INT" nil))) (om-make-point 192 386) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 548 387) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NUMBER-TO-STRING" (quote number-to-string) (quote ((om-load-inputfun (quote input-funbox) "INT" "INT" nil))) (om-make-point 34 300) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 115 348) (om-make-point 111 30) "-class events: " "\"-class events: \"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 372 447) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "COUNT" (quote count) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 312 181) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 221 137) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "classes" 1 (om-make-point 193 47) "" "classes" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "experiment-results" 0 (om-make-point 349 72) "" "experiment-results" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 419 561) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 319 561) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((0 0 1 0 nil 0) (4 0 1 1 nil 0) (5 0 1 2 nil 0) (2 0 1 3 nil 0) (7 0 2 0 nil 0) (7 0 3 0 nil 0) (8 0 4 0 nil 0) (1 0 6 0 nil 0) (8 0 7 0 nil 0) (10 0 7 1 nil 0) (9 0 8 0 nil 0) (6 1 11 0 nil 0) (3 1 11 1 nil 0) (6 0 12 0 nil 0) (3 0 12 1 nil 0))) 2 "how-many-instances?" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 249 86) (om-make-point 55 30) 10000 "10000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 202 125) nil (list (append (list 1 0 3 1 1 0 0 1 0 1 3 0 1 0 1 1 1 0 1 2 1 2 0 4 1 1 0 1 0 2 0 0 0 0 0 1 2 1 1 1 2 0 1 1 0 1 0 1 1 1 0 1 1 0 1 1 0 0 1 1 0 2 0 0 3 1 0 0 0 1 2 0 0 0 1 0 2 0 0 0 1 1 0 1 1 2 0 1 1 0 2 0 1 2 0 0 2 2 0 1 0 0 2 1 0 1 1 1 0 1 2 0 0 2 1 0 2 1 1 1 0 1 1 1 1 2 1 0 2 1 1 0 2 1 1 0 2 1 2 0 1 0 0 1 1 1 1 1 0 0 1 2 1 0 1 1 0 0 0 0 0 1 0 3 0 1 0 1 2 1 1 0 0 0 0 0 0 1 0 2 0 1 1 0 4 0 0 0 0 1 0 1 0 1 0 0 1 0 0 0 0 1 0 1 0 1 4 0 0 0 0 0 0 0 1 1 0 0 0 1 1 2 1 3 0 4 1 2 2 0 0 1 1 0 0 0 0 1 1 1 0 0 1 2 1 0 0 0 2 0 0 0 0 0 0 0 2 0 3 0 0 0 2 2 0 0 0 0 0 1 0 2 1 1 2 2 2 1 0 2 0 1 1 0 0 2 1 0 0 0 0 1 0 0 1 0 1 2 0 1 1 2 0 2 1 1 1 1 0 1 0 1 0 2 0 1 1 1 1 0 0 2 2 3 0 0 1 4 1 1 0 0 0 0 3 0 2 0 1 0 0 2 1 0 1 0 1 0 0 1 0 2 0 0 0 1 1 0 0 0 0 0 0 0 2 1 1 0 1 0 0 1 1 0 2 0 3 0 0 0 1 1 0 0 2 1 0 0 2 0 2 0 2 0 1 1 1 2 0 0 3 0 0 2 0 1 0 1 0 0 2 0 1 0 2 1 0 0 0 2 2 0 1 3 0 0 1 1 0 0 1 1 0 0 1 0 0 1 1 1 0 2 1 1 0 1 2 0 0 1 0 1 0 1 1 0 0 1 0 0 0 1 2 2 1 0 0 2 3 2 1 1 1 3 3 3 1 0 2 1 0 0 1 0 1 0 1 1 0 0 0 2 0 0 1 1 3 3 0 0 0 2 1 1 0 1 1 0 0 1 1 0 0 0 0 1 1 0 1 0 2 0 0 3 0 1 1 2 1 0 2 0 1 0 1 0 0 0 2 1 0 0 0 0 1 1 1 3 0 3 3 2 0 0 0 0 1 0 0 0 0 2 0 0 0 1 1 0 0 0 0 4 0 1 0 2 2 1 0 0 0 0 0 3 1 0 2 0 1 1 0 0 0 0 2 0 0 1 0 0 1 1 0 0 1 0 0 1 0 0 1 3 0 0 0 1 4 0 1 1 1 0 1 1 0 1 0 0 3 0 0 0 0 0 0 0 0 0 0 1 0 0 1 2 2 1 1 2 2 0 3 2 0 1 1 0 2 2 1 0 3 0 2 0 1 0 0 2 0 0 0 1 0 1 0 2 2 1 0 0 1 2 0 2 0 1 2 0 0 0 1 0 0 0 1 2 1 2 1 0 2 2 0 1 1 0 1 0 0 0 2 0 0 1 0 0 0 2 1 0 1 1 0 1 4 0 0 0 1 2 1 0 1 0 1 0 0 3 1 0 2 0 1 1 0 2 3 0 0 0 0 0 4 0 2 0 3 0 2 0 0 2 0 0 0 1 0 0 1 0 0 1 1 0 0 0 1 0 0 0 2 1 0 2 0 0 1 1 0 1 1 0 0 2 1 1 0 0 0 1 0 2 4 3 0 0 1 1 1 1 2 3 0 0 2 0 1 0 0 2 0 0 0 1 1 1 2 1 0 0 0 0 0 2 0 0 0 0 1 2 0 1 0 0 0 0 1 1 0 0 0 4 2 1 2 0 1 1 3 0 0 1 0 0 1 2 0 3 0 0 1 0 2 1 1 0 1 0 1 0 2 0 2 0 1 0 1 0 0 1 0 0 0 1 0 4 0 1 3 0 1 0 1 1 0 1 0 0 1 1 0 1 1 2 0 1 0 0 0 0 1 1 0 1 1 0 0 0 0 1 1 2 0 2 1 0 0 0 0 0 1 0 1 3 1 1 1 1 1 1 1 2 1 0 2 1 0 1 2 1 1 0 0 0 0 0 0 0 3 2 1 1 2 3 0 0 1 1 1 0 0 3 1 1 4 2 2 2 1 1 0 1 0 0 1 1 0 0 1 0 0 1 0 2 0 0 1 1 1 0 1 2 1 0 1 0 1 1 1 1 0 4 0 1 0 1 0 1 0 3 0 0 1 3 0 0 0 0 1 3 1 2 2 0 0 0 2 0 1 1 1 2 2 0 1 0 2 1 1 0 1 1 2 1 1 2 1 0 0 1 0 0 1 0 3 0 0 1 0 0 2 2 0 1 0 0 1 0 1 0 2 0 1 1 2 2 0 0 1 0 0 0 1 3 1 1 0 0 0 2 1 0 0 1 0 0 1 1 2 1 3 1 0 2 1 2 1 1 0 0 0 0 1 2 2 3 1 0 1 1 1 2 1 1 1 2 1 1 2 2 0 0 2 0 4 0 1 0 2 2 1 1 2 1 1 0 0 1 0 1 0 0 1 2 0 1 1 0 0 1 2 1 1 0 0 0 1 1 0 0 0 0 0 1 1 2 0 1 1 0 0 0 0 1 1 2 2 1 1 1 0 1 0 0 1 1 1 1 0 0 0 1 2 2 0 1 0 0 1 1 1 1 0 2 2 1 0 2 1 0 2 0 0 1 2 0 0 0 0 1 0 1 1 0 0 2 0 0 1 0 0 3 1 1 0 0 1 3 0 0 1 0 2 0 0 1 0 1 0 0 0 0 0 0 1 1 1 2 0 1 1 2 0 1 2 0 2 1 0 0 1 1 0 0 1 0 0 1 0 1 2 0 2 1 0 0 0 1 1 1 0 2 1 1 0 1 1 0 1 1 2 0 1 0 0 0 0 1 2 2 2 1 1 0 0 1 1 0 3 0 1 2 0 2 0 1 0 2 0 2 1 1 0 1 0 0 0 1 2 0 0 0 2 0 0 0 3 0 1 0 1 0 2 3 2 1 2 1 2 2 0 1 0 0 0 2 0 0 1 1 0 1 0 0 1 2 0 1 2 0 3 1 0 1 1 1 1 2 0 1 1 1 0 0 3 1 0 4 1 0 0 0 0 1 0 2 1 2 0 1 0 2 0 2 1 1 0 0 2 0 0 0 0 0 0 2 2 1 1 0 0 0 2 1 0 2 0 0 2 1 0 3 1 1 1 1 1 2 0 3 0 0 1 1 0 1 1 1 0 0 1 0 0 0 1 1 0 1 0 0 2 1 0 0 1 0 0 3 0 1 1 1 2 4 0 0 1 1 0 1 2 0 0 0 3 0 1 0 0 0 2 1 3 1 0 0 0 0 0 0 0 1 0 0 1 1 1 1 0 0 2 0 0 0 0 2 0 2 2 0 1 0 0 0 1 0 1 0 0 1 0 0 3 3 2 0 0 0 2 0 0 1 0 2 2 2 1 0 0 2 0 0 0 0 2 0 0 3 1 0 0 0 0 0 3 0 1 5 0 3 0 0 0 2 0 3 0 0 2 0 1 0 1 1 0 0 2 1 1 0 0 1 0 1 1 0 1 0 0 0 2 0 0 1 0 0 0 0 0 0 3 1 0 1 1 0 1 1 0 1 0 0 2 4 1 0 5 1 0 1 1 0 2 1 2 0 2 0 1 4 0 0 0 0 0 0 0 1 1 0 1 1 0 4 1 0 0 2 0 1 1 0 2 1 1 0 1 1 1 2 1 1 1 1 0 0 1 1 0 0 1 2 1 3 0 0 2 3 1 0 0 0 1 2 0 1 1 1 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 1 0 2 1 0 0 0 1 1 0 1 1 0 1 0 0 1 2 1 2 2 0 0 1 0 3 0 0 2 1 0 0 1 1 0 1 0 1 0 1 0 3 1 1 0 0 1 0 1 2 0 1 2 2 1 1 0 2 1 0 2 1 0 0 0 2 2 2 1 5 0 1 0 1 1 2 2 1 0 0 1 1 1 0 0 0 0 1 2 1 1 0 0 0 0 0 1 0 2 0 3 1 0 0 1 0 2 2 1 0 0 0 1 1 0 0 0 0 0 1 1 0 0 0 0 1 2 0 1 0 1 1 1 1 1 1 0 0 0 2 1 1 1 1 0 1 0 1 2 1 0 0 1 1 2 0 2 3 1 2 0 1 1 1 0 2 1 1 0 0 1 1 1 0 0 0 1 1 1 2 1 0 0 2 1 0 0 2 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 0 2 0 2 2 2 1 0 1 0 2 1 0 3 2 0 0 1 1 1 0 0 0 3 1 0 1 0 1 4 0 0 1 0 1 1 0 1 0 2 0 0 0 2 2 0 1 1 0 2 1 2 0 0 1 1 1 1 1 1 2 2 1 0 0 1 0 0 2 3 0 1 3 0 0 2 0 2 1 0 3 0 1 1 0 0 1 0 0 2) (list 1 1 0 0 1 1 2 0 0 0 2 2 0 0 2 1 1 1 3 0 1 0 0 2 1 1 1 0 0 0 0 1 0 0 0 1 0 1 0 0 2 1 0 1 2 1 1 1 0 4 2 1 0 2 0 1 1 0 0 2 1 0 1 0 1 1 1 0 2 1 0 0 1 0 0 2 0 1 2 2 0 0 0 3 0 1 0 0 1 0 0 1 0 2 1 1 1 1 1 2 0 0 2 1 0 1 1 1 1 0 2 1 2 0 0 2 0 0 1 0 1 1 0 0 0 0 1 1 2 0 0 0 0 1 1 2 0 0 0 0 1 1 0 2 0 0 0 1 2 1 1 1 3 1 0 2 2 0 0 2 2 2 0 1 2 0 1 2 1 0 0 1 0 0 0 1 1 1 0 2 0 0 0 0 0 0 0 1 0 4 1 0 1 1 0 1 1 0 1 1 0 3 1 0 0 1 0 0 1 0 0 0 0 0 1 1 1 2 0 0 1 0 1 3 1 2 0 0 0 2 3 0 0 0 0 0 0 0 2 2 0 1 0 0 0 2 0 0 0 0 1 1 1 2 2 0 0 1 0 0 0 1 0 0 3 0 2 1 0 3 0 1 1 0 0 1 1 2 2 1 0 2 0 0 0 0 1 1 3 0 0 3 0 2 0 0 0 1 0 0 0 0 0 1 1 0 0 1 2 1 0 2 0 1 0 0 0 3 2 3 1 0 1 1 0 1 1 2 0 1 0 0 0 0 0 0 1 1 1 1 2 1 2 1 0 0 1 0 0 0 1 0 0 0 1 1 1 0 0 1 0 0 0 0 0 2 0 0 1 0 0 0 0 1 1 2 3 0 0 0 0 2 0 0 0 1 1 3 3 0 0 1 2 0 1 1 0 2 0 3 1 2 0 2 0 2 1 1 0 0 0 0 0 2 1 0 2 0 1 2 0 1 1 3 0 0 0 0 0 1 2 1 0 1 0 0 2 2 2 1 3 1 1 2 0 3 0 1 1 1 5 2 0 0 0 2 1 0 1 2 1 2 0 0 0 2 1 0 1 0 2 1 0 1 1 1 0 1 1 1 1 1 1 1 0 0 2 0 1 2 1 1 0 2 2 1 0 0 0 0 0 0 1 0 1 1 1 0 0 0 0 1 1 1 2 1 0 0 2 1 2 1 1 1 1 1 0 1 1 2 1 2 2 1 2 0 1 0 1 0 1 0 3 2 1 1 0 3 1 0 2 2 2 1 0 2 0 3 2 0 1 1 1 1 1 0 2 0 1 0 0 1 0 1 0 0 1 1 1 1 1 1 1 0 0 1 1 0 1 0 0 2 1 1 1 0 1 2 2 1 0 0 0 0 2 0 2 3 1 0 2 0 0 1 1 0 1 0 0 2 0 0 0 1 0 3 0 0 0 0 0 2 1 0 2 3 1 1 3 2 0 3 1 0 1 1 2 0 1 0 0 2 0 2 0 1 0 0 1 2 1 2 1 0 1 2 0 0 0 1 2 1 0 0 0 0 2 2 2 0 0 2 2 2 0 2 0 0 1 1 0 4 0 1 2 0 1 1 1 2 0 0 1 0 1 1 1 0 0 0 1 0 2 0 0 0 1 2 0 0 0 0 0 0 0 0 0 0 2 2 1 0 3 1 0 0 1 0 1 1 0 0 0 0 5 0 1 0 0 0 1 1 1 1 0 0 1 0 0 1 2 2 1 3 2 2 1 1 2 2 1 1 0 1 4 1 1 3 0 0 0 1 0 0 0 2 1 1 0 0 0 0 0 3 2 0 1 0 0 2 1 1 1 1 1 0 0 1 1 1 0 1 0 1 0 2 1 0 0 0 0 2 1 0 1 0 2 0 0 3 1 1 1 1 1 2 1 2 2 0 1 0 2 2 1 2 0 1 0 0 0 1 1 1 0 1 1 0 1 3 0 2 0 0 4 2 2 1 2 0 1 0 1 1 0 1 1 0 1 0 1 1 1 1 0 0 1 1 1 0 1 0 0 1 1 0 0 0 2 2 2 1 2 2 0 0 2 1 1 1 1 0 0 1 0 3 0 3 4 0 2 1 1 0 1 1 1 1 0 0 1 3 1 0 1 2 2 0 0 1 0 1 0 2 1 0 0 0 0 0 0 4 2 0 0 1 1 0 0 1 3 1 1 0 0 1 0 0 2 1 1 1 0 2 1 0 1 0 1 0 0 1 3 2 0 0 1 1 1 0 0 0 1 0 0 1 2 0 0 0 1 1 1 1 0 0 2 0 0 0 0 0 0 1 0 3 0 0 2 0 1 1 2 0 1 0 1 0 0 1 2 1 2 3 1 1 1 1 2 1 1 2 0 2 0 0 1 0 0 0 1 2 0 1 0 0 0 0 1 2 0 0 2 0 0 0 0 0 0 1 1 2 2 0 1 0 1 0 2 2 3 0 2 0 0 0 2 1 0 1 1 2 0 2 1 0 1 0 0 0 0 2 0 0 1 0 1 0 1 1 3 2 2 1 1 0 0 2 2 2 0 0 2 2 0 1 1 0 0 2 2 1 1 0 0 0 0 1 1 0 0 2 1 0 1 1 0 0 1 0 1 2 0 0 0 1 0 1 1 2 1 4 1 2 0 0 2 0 1 0 1 2 0 1 2 0 1 0 0 2 0 0 1 3 0 2 1 1 0 1 1 0 2 0 2 2 1 0 2 1 2 0 1 0 2 1 1 0 0 2 1 0 1 1 0 0 0 0 0 0 2 1 0 0 1 0 0 1 0 1 0 1 2 2 3 0 0 1 1 0 0 1 0 0 1 0 0 1 2 1 1 1 0 2 0 2 0 1 0 0 1 1 1 0 1 1 1 1 0 1 2 3 2 0 0 0 0 1 1 1 1 0 0 1 0 2 2 0 1 1 3 0 0 0 1 0 2 2 1 1 1 1 1 1 0 0 1 0 0 0 1 0 0 2 1 0 1 3 1 2 4 0 1 1 0 2 0 0 1 1 0 0 1 1 0 0 0 0 1 0 2 3 1 0 0 2 1 1 1 1 0 1 0 0 1 1 1 0 0 1 0 1 0 0 0 3 1 0 1 1 1 0 0 1 0 2 1 0 0 1 1 0 1 0 1 0 1 1 0 1 2 0 0 1 2 0 2 0 2 0 2 1 0 0 0 0 1 1 1 0 0 2 0 2 2 0 2 1 0 0 2 1 1 0 0 1 0 1 1 1 0 1 1 1 3 1 0 1 0 1 0 1 2 0 0 0 0 2 1 1 1 2 2 0 0 0 2 1 2 0 0 0 0 0 2 0 0 0 0 0 1 3 2 1 0 1 1 1 2 0 1 0 2 2 1 1 0 0 1 0 0 2 0 0 0 0 1 1 0 0 2 2 1 0 2 0 2 2 1 0 0 0 0 0 1 0 1 0 0 1 0 1 4 1 0 0 1 1 0 1 1 0 0 1 0 0 0 1 0 1 2 2 1 2 0 1 0 1 0 1 2 0 1 1 1 0 2 0 1 1 0 1 0 2 0 1 1 0 3 0 0 2 0 2 0 2 0 0 1 0 2 0 0 0 3 0 1 2 0 1 1 1 0 1 1 1 0 1 0 0 0 0 2 1 0 0 0 1 0 2 0 1 1 0 1 1 1 0 2 0 0 1 1 0 3 1 0 1 0 0 0 2 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 2 1 2 0 1 0 0 0 2 1 1 1 1 1 1 1 0 0 0 0 1 1 1 0 0 2 0 0 1 0 1 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 0 2 0 1 1 0 1 0 0 0 1 3 0 0 0 1 0 1 0 0 0 0 0 1 1 2 0 0 2 1 3 0 0 1 2 1 0 0 1 1 0 1 0 2 2 0 1 1 0 1 2 0 0 2 1 3 1 0 0 3 1 2 1 0 0 0 1 0 2 0 0 2 2 1 0 2 0 2 0 0 0 2 0 2 1 0 0 0 0 0 1 0 0 1 3 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 2 2 0 1 0 1 1 1 3 1 1 0 2 1 3 0 0 1 0 0 1 2 1 0 0 0 1 1 2 0 0 0 0 1 2 2 0 0 1 0 0 0 1 1 0 2 1 1 2 1 0 1 0 2 2 1 1 2 1 0 1 1 0 1 1 5 1 0 2 0 1 1 1 1 0 1 0 0 0 0 1 2 2 0 1 0 0 0 1 1 1 1 1 0 0 1 1 0 0 0 0 2 0 1 1 1 2 0 0 0 1 0 3 1 2 0 0 1 0 1 2 0 1 1 3 1 1 2 1 0 0 0 0 2 0 1 0 0 1 3 1 1 0 1 0 1 1 1 1 0 1 1 2 0 0 0 0 0 0 1 2 1 1 1 0 0 0 0 1 2 1 0 1 0 0 1 0 0 1 2 1 0 0 2 0 0 1 0 1 1 1 0 2 0 0 1 1 0 0 0 1 0 0 0 2 1 0 0 1 1 0 0 0 1 1 0 1 1 0 1 0 0 1 1 1 3 1 0 1 1 3 1 2 0 0 2 2 2 1 1 3 1) (list 0 0 3 1 1 2 2 3 0 0 0 1 1 1 1 1 0 1 1 0 0 1 1 0 0 0 0 1 0 1 2 0 0 3 0 0 0 1 1 0 1 0 0 3 1 1 0 2 1 1 1 0 0 2 0 0 1 1 0 2 0 1 1 1 0 3 3 2 1 1 2 0 0 3 1 3 0 1 0 0 0 1 1 0 0 0 1 0 1 2 0 1 3 0 1 2 2 0 0 1 2 0 1 0 1 1 0 1 1 1 0 0 1 1 0 0 1 0 2 0 0 1 1 0 2 2 0 2 1 2 1 0 3 3 0 0 0 1 0 1 1 0 1 1 1 0 0 1 0 0 3 0 2 1 2 0 1 1 0 2 2 1 0 1 0 1 0 2 2 0 1 0 1 2 3 1 0 1 2 1 0 0 0 1 0 0 0 1 2 0 0 0 1 0 1 1 1 0 0 2 0 1 0 0 0 0 2 1 0 1 1 0 0 0 0 3 1 0 1 3 1 0 0 1 1 1 0 2 2 0 0 1 0 0 0 0 1 1 1 1 2 4 0 1 0 2 0 0 0 2 1 1 0 0 0 1 0 0 0 0 2 1 1 0 1 2 2 0 0 1 0 2 0 0 0 1 0 0 2 2 0 0 1 1 0 2 1 1 0 0 0 1 3 1 0 0 0 0 2 0 1 1 0 0 2 0 0 0 0 2 3 2 0 0 0 0 0 0 2 1 1 1 1 2 0 0 2 1 2 1 1 1 1 2 1 2 1 0 0 0 2 0 0 0 0 1 1 0 1 0 0 2 0 0 1 0 1 0 2 2 0 0 1 0 1 0 0 0 0 1 1 3 1 2 1 0 0 0 1 1 0 1 1 1 0 0 1 1 0 2 1 1 1 1 0 0 2 0 1 0 1 0 1 0 1 0 0 1 0 0 2 1 3 0 0 3 0 1 1 2 0 2 1 5 1 0 0 1 0 1 0 4 1 1 1 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 2 0 2 0 0 0 0 1 0 0 0 0 0 0 0 0 2 2 1 0 2 2 1 0 0 1 1 1 0 1 0 1 0 2 1 0 2 1 1 2 1 0 0 2 2 1 0 2 0 0 0 0 3 2 0 0 3 2 1 1 1 0 1 1 2 1 1 0 1 0 0 0 1 2 1 0 0 0 0 0 1 1 0 1 0 2 0 0 1 0 0 2 1 2 1 2 0 1 0 1 2 0 0 2 0 3 0 0 2 0 2 2 1 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 2 0 0 1 0 1 0 0 0 1 4 1 0 1 2 0 0 0 0 1 0 0 2 0 0 1 0 0 0 0 0 0 0 1 1 0 1 1 0 1 2 0 0 0 0 1 3 0 1 1 2 1 0 0 0 1 1 0 0 0 1 0 1 0 0 0 1 3 1 0 1 1 0 1 2 0 0 0 0 1 0 0 1 1 0 1 2 1 1 1 0 1 1 1 0 0 1 2 0 3 0 2 1 1 1 0 0 0 1 1 1 0 0 1 0 1 1 3 0 2 1 0 1 0 1 0 0 1 0 0 0 1 0 0 0 2 0 0 1 0 1 1 1 2 2 0 0 1 1 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 1 1 2 1 0 1 1 0 1 0 2 1 1 0 0 2 2 0 1 0 1 1 0 0 2 1 0 2 1 2 0 1 0 0 4 2 0 0 1 0 2 1 1 1 0 1 0 2 0 0 2 0 0 0 0 0 1 0 0 1 0 1 0 2 1 1 1 0 0 1 0 2 0 1 1 1 0 0 2 2 0 0 1 2 0 0 1 0 1 2 3 0 0 2 1 0 1 1 1 2 3 1 2 1 0 2 2 0 1 1 0 0 1 1 1 2 0 1 0 0 1 1 0 1 0 4 1 1 1 0 1 4 2 0 1 0 0 0 1 2 2 1 1 0 1 1 0 0 0 0 1 1 0 1 2 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 3 3 1 0 1 0 0 4 2 2 0 0 0 1 0 0 1 1 0 1 0 0 1 2 0 0 1 0 0 0 2 1 0 0 1 0 0 1 0 1 1 1 0 3 0 0 0 2 0 3 1 1 0 1 0 1 0 1 2 2 1 1 0 0 0 0 1 1 0 0 0 0 1 0 0 3 3 0 1 1 1 1 1 0 0 1 1 0 2 1 0 1 0 1 1 0 0 1 0 2 0 0 2 3 0 0 0 0 2 3 2 1 0 1 1 0 1 1 1 1 1 3 2 0 1 0 0 0 2 2 1 0 2 0 0 1 0 0 1 1 1 3 2 1 0 0 0 1 2 0 0 2 0 0 2 1 1 2 0 1 1 0 1 0 1 0 0 1 2 0 1 1 0 0 0 0 1 0 1 1 1 0 1 0 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 0 0 0 1 0 1 0 2 1 0 0 0 0 1 2 2 1 1 3 0 1 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 0 0 1 1 2 0 1 1 3 0 1 0 0 2 0 0 1 0 0 1 0 2 0 1 1 0 0 0 0 1 0 1 1 1 1 0 2 1 1 0 1 2 0 0 0 1 0 0 0 0 1 0 2 0 2 0 0 0 1 0 1 1 0 1 0 1 0 0 0 1 0 0 0 1 3 0 0 0 2 0 1 0 1 0 0 2 0 2 1 1 1 2 0 0 0 0 4 0 0 0 3 0 1 0 1 1 1 1 1 0 2 1 0 0 0 2 0 0 0 0 1 1 1 0 4 0 1 0 3 1 0 0 0 0 2 1 0 0 0 3 0 1 1 0 0 2 1 1 1 0 3 0 1 0 1 1 0 4 0 0 0 0 1 1 1 0 0 0 2 1 0 0 0 0 1 1 0 0 0 2 0 0 0 1 0 0 0 0 2 1 1 2 0 0 2 0 1 1 2 0 4 2 1 1 0 0 2 0 1 0 1 2 0 0 1 0 0 3 0 1 1 0 0 1 0 1 1 0 0 1 0 2 0 2 0 2 1 0 0 0 2 0 0 0 0 0 0 2 1 1 1 0 0 3 0 1 0 1 0 1 2 0 1 0 0 1 1 0 0 4 1 0 0 0 1 1 1 0 0 1 1 1 0 0 0 1 0 1 0 2 0 1 0 1 0 1 0 1 1 0 1 1 0 2 1 0 1 0 1 4 1 0 2 1 1 0 0 0 2 1 0 1 0 3 0 1 0 1 2 0 1 0 0 3 1 2 0 0 0 0 0 0 0 0 1 1 0 1 1 0 3 1 0 0 0 1 0 1 0 2 1 2 2 1 3 1 5 2 0 0 0 0 1 0 2 3 0 1 1 0 1 0 1 0 1 3 1 0 1 1 3 0 0 0 0 0 0 1 0 1 1 1 1 0 0 2 0 1 0 1 0 4 0 0 1 0 1 0 0 1 1 0 0 1 1 0 0 2 1 2 0 0 2 1 0 3 0 1 0 1 1 2 0 1 0 1 1 0 0 0 0 0 0 1 0 1 1 2 0 1 1 1 0 0 0 3 2 0 1 1 0 1 2 0 1 1 1 0 0 2 0 1 1 0 0 1 1 0 0 0 2 0 0 1 0 1 1 1 0 1 1 2 1 1 0 0 1 1 1 0 4 1 1 3 1 1 0 1 0 0 0 2 0 0 0 1 1 0 2 1 1 2 0 1 0 0 3 0 0 0 2 0 1 1 1 2 1 2 0 1 0 1 2 0 0 2 0 2 0 0 0 0 0 0 2 0 0 1 0 0 0 1 1 3 2 1 1 0 2 1 2 0 2 0 2 1 0 1 2 0 2 2 2 0 0 0 0 0 2 1 0 0 2 1 1 1 2 0 0 1 0 0 0 0 1 1 0 3 2 2 2 2 2 0 0 0 2 0 1 4 0 1 1 0 1 1 2 0 1 1 1 2 2 1 1 0 0 0 0 1 0 0 0 3 1 1 1 1 1 1 0 0 1 0 0 1 0 1 1 0 0 1 0 0 1 0 0 0 1 1 1 2 2 0 0 0 0 0 1 0 3 1 2 0 1 0 0 4 2 3 0 1 2 3 0 0 0 0 1 2 1 0 1 1 0 0 2 2 0 1 0 0 0 1 1 0 2 2 1 1 2 1 0 0 0 0 2 0 1 1 1 2 1 0 2 3 0 2 1 0 0 1 2 0 2 0 0 0 1 1 0 0 3 0 2 0 2 0 4 1 0 0 0 0 1 0 0 1 0 1 0 0 2 1 1 1 0 0 0 1 0 0 0 1 1 2 0 3 1 1 0 0 1 2 3 1 0 0 0 2 2 3 2 0 0 0 0 0 0 0 1 1 0 0 1 0 0 1 0 0 1 1 0 0 0 0 1 2 1 0 2 1 1 1 1 0 0 2 2 0 1 1 0 2 2 0 0 1 2 1 2 2 1 1 0 1 1 1 0 0 2 0 4 2 1 1 0 0 4 1 0 2 0 3 0 0 0 0 0 2 0 1) (list 1 3 0 1 1 0 1 0 0 0 1 0 0 2 2 1 0 0 0 1 1 2 1 1 0 0 0 1 1 0 2 3 1 0 2 0 2 0 1 0 1 2 0 1 1 1 0 0 1 1 2 1 0 0 2 0 0 0 2 0 0 0 1 2 2 1 0 0 0 0 2 0 0 1 0 0 0 3 0 0 1 0 3 1 2 2 0 0 1 1 1 1 1 1 0 1 0 0 0 1 1 1 2 3 0 0 0 0 3 0 2 0 0 2 0 0 1 0 0 0 0 0 1 0 1 1 0 0 0 0 0 0 1 2 1 1 1 1 0 1 0 2 0 0 0 2 1 2 1 0 1 3 1 0 1 0 2 0 1 0 1 1 0 1 1 2 0 1 1 0 3 1 0 0 1 1 2 2 4 1 0 1 1 0 1 1 0 0 1 1 0 0 1 1 1 1 1 0 1 2 1 1 0 0 1 1 0 0 0 1 0 0 0 1 2 1 1 1 0 1 0 1 0 3 1 2 1 0 1 1 0 0 0 0 1 1 1 0 0 0 0 0 3 0 0 1 0 1 0 0 0 1 2 0 0 0 1 1 1 0 1 1 0 0 0 0 0 2 0 0 2 0 0 2 1 0 0 0 0 1 0 0 0 0 1 1 2 0 0 0 1 0 1 2 0 2 1 2 0 0 0 0 1 1 0 0 0 0 0 0 1 0 2 2 1 1 0 1 0 1 1 1 0 1 1 0 2 0 0 2 1 0 0 0 0 0 0 3 1 1 0 0 0 0 1 0 1 1 1 1 1 0 0 1 1 1 2 1 0 1 0 1 0 0 0 0 0 1 0 0 0 1 1 1 0 0 1 0 0 0 1 1 1 3 0 0 2 0 0 0 0 0 0 1 0 0 0 2 1 0 0 1 0 0 0 1 2 2 0 1 3 0 2 2 1 0 1 2 0 1 2 2 0 1 1 0 0 1 1 2 0 0 3 1 2 0 0 0 1 0 0 0 0 1 0 2 0 3 0 0 1 0 2 1 2 1 0 0 0 1 0 1 0 1 1 2 1 0 1 0 0 0 0 1 1 0 1 0 3 3 5 1 1 2 0 0 0 1 1 1 0 1 1 2 0 0 1 0 0 1 3 0 0 0 0 1 2 1 1 1 0 0 0 1 1 0 0 0 0 1 0 0 0 1 1 2 3 4 0 1 0 0 0 1 0 1 0 0 0 0 0 1 2 0 1 0 1 1 1 1 0 1 1 2 2 0 0 0 0 0 0 1 3 0 0 2 0 2 1 0 1 3 1 1 0 0 0 1 0 0 0 0 0 1 1 1 0 1 3 0 1 0 0 1 0 0 1 1 1 0 0 2 0 1 0 1 1 1 0 0 0 1 2 0 0 0 0 1 2 2 1 0 2 1 0 1 0 0 2 1 0 0 0 1 0 1 2 1 0 2 1 1 1 0 1 4 1 1 1 0 1 0 1 2 3 1 2 0 2 2 1 2 0 1 1 1 1 0 1 0 1 1 1 0 1 1 2 1 1 2 2 0 1 1 1 0 5 0 0 1 0 1 1 0 0 0 2 1 0 1 2 1 0 0 0 0 1 0 1 0 1 0 1 1 1 0 3 0 0 0 0 1 0 0 0 2 4 0 0 0 0 1 2 0 2 1 0 1 0 0 1 0 1 2 1 1 0 3 1 0 0 0 1 0 0 2 1 4 0 0 0 0 1 0 1 1 4 0 3 1 0 2 3 2 0 1 1 0 2 0 1 1 0 2 1 0 1 1 0 0 1 0 0 0 0 2 2 1 1 0 1 1 2 0 1 0 0 2 1 0 2 2 1 0 0 1 0 1 1 1 0 0 1 3 0 1 2 0 2 1 2 0 0 1 0 1 1 2 1 0 1 0 0 2 2 1 0 0 0 1 2 1 0 0 2 1 0 2 1 1 0 2 1 1 1 2 1 0 0 0 0 1 0 2 2 0 0 2 0 1 1 1 1 1 1 1 0 0 1 1 0 1 2 3 1 2 0 0 1 0 1 0 0 0 1 3 5 0 1 0 0 0 4 0 1 3 1 2 1 0 2 2 0 2 2 0 0 2 1 2 0 2 0 0 1 0 1 1 0 0 1 0 2 1 2 0 0 0 0 2 1 1 1 0 0 1 0 3 1 1 2 1 1 1 1 2 1 0 1 1 0 1 0 0 3 1 0 0 0 1 0 0 1 2 0 2 1 0 1 0 0 1 1 0 2 1 1 2 1 0 1 0 2 1 1 1 1 0 2 2 1 2 2 2 4 3 2 0 2 0 1 1 1 0 0 2 1 2 1 1 0 2 0 0 1 2 1 1 1 2 0 1 2 0 2 1 2 1 0 1 2 0 0 1 0 0 1 1 2 2 3 0 1 1 0 3 2 0 2 0 1 1 2 0 0 1 2 1 2 1 1 2 0 1 0 0 2 0 0 1 0 1 0 2 0 1 1 0 0 0 0 0 2 0 1 1 1 0 3 1 1 0 1 0 0 1 2 1 0 0 1 2 0 0 2 0 0 2 0 0 2 2 0 1 0 0 1 2 0 0 0 0 2 0 1 4 2 0 1 1 1 0 0 3 0 1 1 0 3 1 1 2 1 0 2 0 2 5 1 0 1 1 1 2 2 1 1 1 1 1 3 0 0 1 0 0 1 1 2 3 0 0 0 3 1 1 0 1 0 4 1 0 0 2 2 1 1 0 2 0 1 0 1 0 1 0 2 1 3 0 1 1 0 0 2 1 0 3 0 1 2 1 0 0 1 3 0 1 2 0 1 0 0 1 1 0 0 1 1 1 1 0 2 0 0 1 1 1 1 0 2 1 1 1 2 0 2 1 1 0 1 1 0 1 1 1 2 0 0 1 4 0 0 3 1 1 2 4 0 1 0 1 1 0 0 1 1 1 1 1 2 0 1 1 0 1 0 2 0 2 0 0 2 0 0 0 0 1 0 0 0 0 1 0 0 3 2 0 3 0 0 1 1 0 0 2 0 0 0 1 2 0 1 1 1 0 2 0 0 0 1 1 0 2 1 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0 2 1 1 1 1 2 1 2 0 0 2 0 0 0 0 0 0 0 0 1 1 0 1 0 0 3 1 1 1 0 0 1 1 0 0 0 0 0 1 0 1 0 0 1 2 2 0 1 1 0 0 1 0 0 0 2 0 0 1 0 0 0 2 1 1 1 1 0 0 5 1 2 1 2 0 1 1 0 1 0 0 0 1 0 0 1 3 0 0 0 1 1 0 2 1 0 1 0 0 0 2 1 1 0 1 2 2 0 0 0 1 1 1 0 1 2 1 0 0 1 2 1 2 2 1 2 0 0 3 1 0 3 1 1 3 0 2 0 0 1 0 0 0 1 0 1 1 0 0 0 0 0 0 0 1 2 0 0 0 0 2 0 1 2 1 2 0 0 1 0 1 0 3 1 1 2 0 1 0 3 2 1 2 0 2 0 1 0 2 1 0 0 2 1 1 2 3 0 2 2 2 0 0 1 1 0 0 0 0 1 0 1 0 1 0 0 0 0 1 1 1 1 0 1 0 1 0 0 0 2 0 1 0 2 1 1 1 1 2 0 1 0 1 0 0 1 0 1 2 0 0 0 0 2 2 0 0 1 1 0 0 0 0 2 1 1 1 1 0 0 4 2 1 0 1 0 0 4 2 0 1 1 1 0 1 4 1 0 1 0 0 0 1 5 1 3 0 0 1 1 0 1 1 1 1 1 1 2 0 1 1 1 0 0 0 1 1 2 1 0 2 1 0 1 0 1 1 1 1 1 1 0 1 0 1 0 0 0 1 1 2 0 1 1 1 1 2 0 0 1 0 1 1 0 1 0 3 0 1 2 0 1 0 1 1 3 1 1 0 0 2 0 0 1 0 0 1 3 1 0 1 2 0 1 0 0 0 1 1 0 0 0 0 1 1 0 1 2 0 0 0 1 1 1 0 1 3 0 0 0 0 1 1 0 0 1 0 5 2 1 0 1 1 1 1 1 4 0 0 0 1 1 1 1 0 1 0 2 0 2 1 0 0 2 0 0 2 2 1 0 1 0 0 1 0 1 1 0 0 1 2 3 0 1 0 2 1 0 0 0 2 2 0 1 0 1 1 0 1 0 0 1 0 0 0 0 2 2 1 0 1 1 2 0 0 0 1 0 0 0 0 1 2 0 0 0 0 2 0 2 1 2 0 2 0 2 1 1 1 1 0 0 1 1 0 0 0 0 0 1 1 0 1 4 0 2 1 0 1 3 0 1 0 0 0 2 0 2 0 0 2 0 3 3 0 0 0 0 0 2 0 0 0 3 0 2 0 2 1 0 0 1 0 1 0 0 0 0 1 1 0 1 2 2 0 1 0 2 1 2 0 0 0 0 2 2 0 2 1 1 2 0 1 1 0 0 0 1 2 1 0 1 0 1 0 2 2 2 0 0 3 0 1 0 1 0 1 0 1 1 1 2 1 1 0 2 2 0 1 0 0 1 2 1 0 0 1 0 2 1 1 1 0 1 1 0 0 1 2 0 1 1 0 1 0 0 0 1 0 0 0 1 2 0 0 1 0) (list 0 1 0 2 1 2 1 1 2 1 1 1 2 2 0 0 2 1 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 1 0 1 0 4 1 0 2 0 1 0 1 1 0 2 0 1 1 0 3 1 1 0 0 0 1 1 1 1 0 2 0 2 1 2 2 3 1 2 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 2 1 0 1 1 0 1 1 0 0 2 1 1 2 0 0 2 0 0 0 2 0 1 1 0 3 0 1 2 4 0 1 0 0 0 2 0 0 1 0 1 0 0 0 0 1 1 2 1 2 1 0 3 2 1 1 0 1 0 0 0 1 2 0 0 1 3 0 0 3 0 1 1 0 0 1 0 1 0 0 1 0 0 2 1 0 1 2 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 2 3 3 0 0 1 1 1 1 0 0 1 0 1 0 1 0 1 1 1 1 1 3 2 0 1 3 3 0 1 0 1 1 1 1 0 0 0 0 1 1 0 0 3 3 2 2 2 1 2 1 2 2 3 0 0 0 2 0 1 2 1 0 3 3 2 2 0 2 2 0 0 0 0 1 1 1 0 2 2 0 0 1 1 1 1 1 0 1 2 2 0 4 1 0 0 0 0 0 0 2 3 0 0 0 1 1 0 0 1 0 1 1 1 1 1 1 0 3 0 2 0 0 1 1 0 1 1 1 1 1 0 2 0 0 1 1 0 1 0 0 1 0 0 0 2 1 0 0 1 1 0 1 1 1 0 1 2 1 0 2 0 1 0 1 2 0 0 1 1 1 1 0 2 0 1 1 1 0 2 2 1 0 2 1 1 0 2 0 1 0 1 0 0 2 1 0 0 0 1 0 0 1 0 0 0 1 0 2 1 1 0 1 2 2 2 0 1 0 1 1 0 0 0 1 0 3 0 1 1 1 2 1 0 5 0 0 0 0 0 0 1 2 1 1 0 0 0 1 0 1 1 1 1 2 2 0 3 0 1 0 0 1 0 0 1 0 1 1 0 3 0 0 0 2 1 1 1 1 1 1 1 0 0 0 1 2 2 0 0 3 1 2 2 0 0 1 3 2 2 0 0 0 0 0 2 2 1 1 2 1 2 0 1 1 3 0 1 2 2 1 1 2 0 0 2 0 2 1 3 1 1 3 0 1 0 0 0 0 0 1 1 2 0 0 0 0 2 2 1 1 0 3 2 0 1 1 0 1 1 0 1 1 2 2 1 1 1 2 0 0 1 1 0 0 0 2 1 1 2 1 0 0 0 1 0 2 0 0 1 0 0 1 0 0 2 0 1 0 0 1 0 0 0 1 3 0 0 1 1 0 0 0 1 2 0 2 1 0 1 1 1 0 1 0 2 0 0 2 0 1 1 0 0 0 0 1 0 1 1 0 2 0 1 1 2 0 0 0 0 1 1 2 1 1 0 0 1 0 0 1 0 1 1 2 0 1 1 0 2 0 1 0 1 1 0 0 2 1 0 2 0 0 1 0 1 1 0 1 2 1 1 2 1 1 0 0 0 1 2 1 0 1 2 0 2 1 2 2 0 0 1 0 0 1 0 0 3 1 1 0 0 0 0 0 0 0 2 0 0 1 1 1 0 0 1 0 0 1 2 1 1 0 0 0 0 0 1 0 1 0 1 1 0 1 1 2 1 0 0 0 1 0 3 0 0 2 1 2 0 1 0 0 4 0 1 0 0 0 0 1 1 0 0 1 0 1 2 1 1 1 1 1 0 0 1 0 0 2 0 1 1 0 0 2 2 1 0 0 1 0 2 1 1 0 0 0 0 0 1 2 1 1 0 1 0 0 0 0 1 1 0 1 0 1 2 4 1 1 0 1 1 2 1 0 1 0 0 1 0 0 2 3 1 1 1 1 0 0 0 1 1 1 1 2 0 0 0 0 3 1 0 2 0 1 0 1 0 0 0 0 1 0 0 2 0 3 0 1 1 0 2 3 1 0 2 0 0 0 1 2 1 0 1 1 1 2 1 1 0 0 0 1 2 0 0 2 1 0 1 0 2 2 0 1 1 1 0 2 0 2 1 0 1 0 0 1 0 0 0 1 1 0 0 1 1 3 0 0 0 1 0 0 2 2 1 1 2 2 1 0 0 0 1 1 1 0 1 0 1 1 0 0 2 2 0 1 0 2 1 3 1 2 1 2 1 0 1 0 0 2 0 0 1 0 1 0 0 0 0 0 1 1 0 2 0 1 1 2 1 1 1 3 1 0 2 1 1 1 0 0 0 1 0 1 0 1 2 3 1 2 0 0 0 3 0 1 0 4 1 0 1 4 1 0 0 0 1 1 0 2 2 0 0 3 0 0 1 1 0 2 0 2 1 4 1 0 1 1 1 2 0 0 2 1 0 0 1 1 0 0 2 0 1 0 0 1 1 1 0 1 0 0 0 1 0 3 2 1 0 2 2 1 0 1 1 0 2 2 0 0 1 2 2 3 0 1 0 3 0 0 0 0 0 0 0 1 0 1 1 0 0 0 2 0 1 2 0 1 0 1 1 2 1 0 1 1 1 0 0 1 1 1 0 1 0 1 0 0 3 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 1 1 0 0 3 0 1 0 1 0 0 1 2 0 1 0 0 2 1 1 1 0 1 2 1 1 0 0 1 1 0 1 1 2 0 0 0 1 1 1 1 0 3 1 3 0 0 1 1 1 2 1 0 0 0 0 0 1 0 1 0 1 1 2 1 2 0 0 2 0 1 0 0 2 1 2 2 2 1 1 1 1 0 0 1 1 0 1 1 0 1 1 0 1 0 1 0 2 2 1 0 2 0 0 0 2 0 0 1 1 0 1 0 2 1 1 2 2 0 0 0 0 0 2 4 0 3 1 0 0 0 0 0 2 2 0 1 0 1 0 0 1 1 0 1 1 1 0 1 2 1 1 1 2 1 1 1 0 1 2 1 0 0 1 0 1 2 1 0 1 1 0 0 1 2 4 1 0 0 1 0 1 0 1 0 1 0 1 1 2 1 0 0 0 1 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 2 0 0 1 0 2 1 0 2 1 1 0 1 2 2 2 1 0 0 1 1 0 0 0 2 1 2 3 2 1 1 1 0 0 2 0 2 0 0 3 0 0 1 0 1 0 2 1 1 2 0 0 0 1 3 2 0 1 0 3 0 0 1 0 1 0 0 0 0 0 1 1 1 0 0 0 1 0 2 1 0 1 0 1 3 0 0 0 0 0 0 0 0 0 2 0 1 1 1 2 0 1 0 0 1 1 0 1 1 0 2 0 0 1 1 2 1 1 1 0 0 1 0 1 0 2 0 0 1 2 0 0 1 2 0 0 1 1 3 0 0 0 1 1 0 1 1 2 1 1 0 0 1 2 0 1 2 0 0 0 1 2 1 2 0 2 2 1 0 0 0 0 2 0 0 0 0 0 1 1 2 1 0 0 3 1 1 1 1 0 1 0 0 1 1 1 1 0 0 1 0 2 1 3 0 1 1 0 0 1 0 2 0 0 1 1 2 1 1 2 1 1 1 1 1 1 0 0 0 2 0 1 1 0 0 1 0 1 2 0 0 0 1 0 2 1 0 0 1 0 0 1 0 1 0 1 0 0 1 1 0 3 2 1 0 1 1 1 2 1 0 1 2 2 0 0 0 0 0 1 0 1 1 2 1 0 1 2 1 0 2 1 1 1 3 0 2 1 0 0 1 1 1 0 2 0 0 0 1 2 3 1 0 0 1 2 1 0 1 0 1 0 0 2 1 0 1 2 2 2 0 2 2 2 0 0 1 1 3 1 0 0 1 0 2 1 1 3 1 1 1 0 0 1 0 1 1 1 2 1 2 1 1 1 2 0 1 2 1 0 1 0 0 0 0 1 0 2 2 0 0 1 0 0 1 2 2 2 0 1 0 1 2 0 0 1 1 0 0 1 1 2 0 1 0 0 0 0 0 0 2 1 0 0 1 3 0 2 2 0 0 0 0 1 1 0 1 0 1 1 1 0 1 0 1))) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 148 5) (om-make-point 38 30) 0.8 "0.8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POISSON" (quote alea::poisson) (quote ((om-load-inputfun (quote input-funbox) "lambda parameter" "LMBD" 1.0))) (om-make-point 157 43) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 1 nil 0) (12 0 0 2 nil 0) (5 0 1 1 nil 0) (13 0 1 2 nil 0) (7 0 2 1 nil 0) (14 0 2 2 nil 0) (8 0 3 1 nil 0) (15 0 3 2 nil 0) (6 0 9 1 nil 0) (16 0 9 2 nil 0) (26 0 11 1 nil 0) (23 0 12 0 nil 0) (22 0 13 0 nil 0) (21 0 14 0 nil 0) (20 0 15 0 nil 0) (19 0 16 0 nil 0) (24 0 19 0 nil 0) (24 0 20 0 nil 0) (24 0 21 0 nil 0) (24 0 22 0 nil 0) (24 0 23 0 nil 0) (32 0 24 0 nil 0) (18 0 24 1 nil 0) (0 0 25 1 nil 0) (29 1 26 0 nil 0) (28 1 26 1 nil 0) (27 1 26 2 nil 0) (30 1 26 3 nil 0) (25 1 26 4 nil 0) (2 0 27 1 nil 0) (3 0 28 1 nil 0) (9 0 29 1 nil 0) (1 0 30 1 nil 0) (34 0 32 0 nil 0) (31 0 32 1 nil 0) (36 0 34 0 nil 0) (33 0 34 1 nil 0) (39 1 36 0 nil 0) (35 0 36 1 nil 0) (39 1 37 0 nil 0) (39 0 38 1 nil 0) (45 1 39 0 nil 0) (40 0 39 1 nil 0) (45 1 40 0 nil 0) (45 0 41 1 nil 0) (42 0 44 0 nil 0) (43 0 44 1 nil 0) (47 0 45 0 nil 0) (44 0 45 1 nil 0) (49 0 47 0 nil 0) (46 0 47 1 nil 0) (48 0 49 0 nil 0))) nil 7.01))