; OM File Header - Saved 2023/03/25 12:41:26
; (7.01 :patc (om-make-point 10 10) (om-make-point 1837 27) (om-make-point 1162 894) "" 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"001-intro-to-recursion-step.omp\""))
(in-package :om)(load-lib-for (quote ("Alea")))(setf *om-current-persistent* (om-load-patch1 "003-two-random-walks" (quote ((let ((box (om-load-boxcomment "comment 5" (om-make-point 401 30) (quote "This concatenates all chord-sequences to one chord-seq object.") nil (om-make-point 186 588) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 350 30) (quote "This converts all midic sequences to chord-seq objects.") nil (om-make-point 42 468) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 168 45) (quote "all durations are in 32nd $notes at MM=60") "" (om-make-point 417 339) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 231 30) (quote "dynamic envelop of each sequence.") "" (om-make-point 598 329) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 235 30) (quote "click inside space 1 and 2 for details") "" (om-make-point 119 77) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 535 718) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600) (6650) (6600) (6650) (6700) (6750) (6800) (6850) (6800) (6750) (6700) (6650) (6700) (6650) (6700) (6650) (6600) (6650) (6700) (6750) (6800) (6750) (6800) (6750) (6800) (6850) (6200) (6250) (6200) (6250) (6300) (6350) (6400) (6350) (6400) (6450) (6500) (6450) (6400) (6450) (6500) (6550) (6500) (6450) (6400) (6350) (6400) (6450) (6500) (6550) (6600) (6550) (6600) (6650) (6000) (6050) (6000) (6050) (6000) (6050) (6000) (6050) (6000) (6050) (6000) (6050) (6100) (6150) (6200) (6250) (6200) (6250) (6200) (6150) (6100) (6050) (6000) (6050) (6100) (6150) (6100) (6050) (6000) (6050) (6000) (6050) (6000) (6050) (6000) (6050) (6000) (6050) (6100) (6150) (6200) (6150) (6200) (6150) (6100) (6150) (6100) (6050) (6100) (6150) (6200) (6150) (6100) (6150) (6200) (6250) (6300) (6350) (6400) (6450) (6400) (6450) (6500) (6550) (6600) (6200) (6250) (6300) (6350) (6300) (6250) (6300) (6350) (6400) (6350) (6300) (6350) (6400) (6450) (6500) (6550) (6600) (6450) (6500) (6550) (6500) (6450) (6500) (6550) (6500) (6450) (6500) (6450) (6500) (6550) (6600) (6650) (6700) (6650) (6600) (6650) (6700) (6750) (6800) (6850) (6725) (6800) (6825) (6725) (6700) (6825) (6750) (6775) (6700) (6825) (6800) (6775) (6450) (6500) (6450) (6500) (6450) (6500) (6550) (6500) (6450) (6500) (6550) (6500) (6550) (6500) (6450) (6500) (6550) (6500) (6450) (6500) (6550) (6600) (6650) (6600) (6650) (6700) (6750) (6800) (6850) (6900) (6850) (6900) (6850) (6900) (6850) (6800) (6750) (6700) (6750) (6700) (6750) (6700) (6750) (6800) (6850) (6800) (6850) (6900) (6950) (7000) (5775) (5700) (5750) (5725) (5750) (5850) (5725) (5800) (5700) (5625) (5675) (5750) (5825) (5800) (5675) (5650) (5775) (5900) (5750) (5875) (5900) (5825) (5875) (5825) (5850) (5825) (5850) (5825) (5775) (5800) (5825) (5775) (5700) (5725) (6450) (6500) (6550) (6600) (6550) (6600) (6550) (6600) (6550) (6500) (6450) (6500) (6550) (6600) (6650) (6700) (6750) (6800) (6750) (6800) (6850) (5775) (5850) (5625) (5725) (5625) (5650) (5625) (5675) (5650) (5725) (5850) (5875) (5900) (5800) (5725) (5750) (6600) (6650) (6600) (6650) (6700) (6750) (6800) (6850) (6900) (6950) (7000) (7050) (7000) (6950) (6900) (6950) (7000) (7050) (7000) (6950) (7000) (6950) (6900) (6950) (7000) (7050) (7000) (7050) (7000) (7050) (7100) (6000) (6050) (6000) (6050) (6100) (6050) (6000) (6050) (6100) (6150) (6200) (6150) (6200) (6150) (6100) (6150) (6200) (6250) (6300) (6350) (6400) (6350) (6300) (6350) (6400) (6350) (6300) (6250) (6200) (6250) (6200) (6250) (6300) (6250) (6300) (6350) (6400) (6450) (6500) (6825) (6850) (6875) (6775) (6800) (6875) (6800) (6725) (6925) (6850) (6825) (6850) (6725) (6825) (6700) (6725) (5825) (5800) (5850) (5825) (5800) (5825) (5775) (5725) (5800) (5875) (5825) (5750) (5675) (5625) (5725) (5650) (5700) (5875) (5750) (5625) (5725) (5625) (5650) (5775) (5850) (5700) (5600) (5725) (5850) (5900) (5800) (5825) (5875) (5825) (5900) (5875) (5775) (5825) (5775) (5825) (5900) (5850) (5800) (5850) (5800) (5875) (5750) (5725) (5775) (5825) (5875) (5800) (5775) (5625) (5650) (6100) (6150) (6100) (6150) (6100) (6150) (6100) (6150) (6100) (6150) (6100) (6150) (6200) (6250) (6200) (6250) (6200) (6150) (6200) (6250) (6200) (6250) (6300) (6250) (6300) (6250) (6300) (6250) (6200) (6250) (6200) (6150) (6200) (6250) (6300) (6350) (6400) (6450) (6400) (6350) (6300) (6350) (6400) (6450) (6500) (6550) (5625) (5750) (5850) (5725) (5800) (5850) (5875) (5850) (5875) (5825) (5725) (5625) (5875) (5825) (5700) (5825) (6400) (6450) (6500) (6450) (6400) (6450) (6500) (6450) (6400) (6450) (6400) (6450) (6500) (6550) (6500) (6450) (6500) (6450) (6500) (6450) (6500) (6550) (6500) (6550) (6600) (6550) (6600) (6550) (6600) (6650) (6700) (6750) (6700) (6650) (6600) (6550) (6600) (6550) (6600) (6550) (6600) (6550) (6600) (6650) (6700) (6750) (6800) (6750) (6700) (6750) (6700) (6650) (6600) (6650) (6600) (6650) (6700) (6650) (6600) (6650) (6700) (6750) (6800) (6850) (6900) (6875) (6725) (6775) (6900) (6750) (6825) (6850) (6825) (6725) (6850) (6875) (6725))) :lonset (quote (0 125 250 375 500 625 750 875 1000 1125 1250 1375 1500 1625 1750 1875 2000 2125 2250 2375 2500 2625 2750 2875 3000 3125 3250 3375 3500 3625 3750 3875 4000 4125 4250 4375 4500 4625 4750 4875 5000 5125 5250 5375 5500 5625 5750 5875 6000 6125 6250 6375 6500 6625 6750 6875 7000 7125 7250 7375 7500 7625 7750 7875 8000 8125 8250 8375 8500 8625 8750 8875 9000 9125 9250 9375 9500 9625 9750 9875 10000 10125 10250 10375 10500 10625 10750 10875 11000 11125 11250 11375 11500 11625 11750 11875 12000 12125 12250 12375 12500 12625 12750 12875 13000 13125 13250 13375 13500 13625 13750 13875 14000 14125 14250 14375 14500 14625 14750 14875 15000 15125 15250 15375 15500 15625 15750 15875 16000 16125 16250 16375 16500 16625 16750 16875 17000 17125 17250 17375 17500 17625 17750 17875 18000 18125 18250 18375 18500 18625 18750 18875 19000 19125 19250 19375 19500 19625 19750 19875 20000 20125 20250 20375 20500 20625 20750 20875 21000 21125 21250 21375 21500 21625 21750 21875 22000 22125 22250 22375 22500 22625 22750 22875 23000 23125 23250 23375 23500 23625 23750 23875 24000 24125 24250 24375 24500 24625 24750 24875 25000 25125 25250 25375 25500 25625 25750 25875 26000 26125 26250 26375 26500 26625 26750 26875 27000 27125 27250 27375 27500 27625 27750 27875 28000 28125 28250 28375 28500 28625 28750 28875 29000 29125 29250 29375 29500 29625 29750 29875 30000 30125 30250 30375 30500 30625 30750 30875 31000 31125 31250 31375 31500 31625 31750 31875 32000 32125 32250 32375 32500 32625 32750 32875 33000 33125 33250 33375 33500 33625 33750 33875 34000 34125 34250 34375 34500 34625 34750 34875 35000 35125 35250 35375 35500 35625 35750 35875 36000 36125 36250 36375 36500 36625 36750 36875 37000 37125 37250 37375 37500 37625 37750 37875 38000 38125 38250 38375 38500 38625 38750 38875 39000 39125 39250 39375 39500 39625 39750 39875 40000 40125 40250 40375 40500 40625 40750 40875 41000 41125 41250 41375 41500 41625 41750 41875 42000 42125 42250 42375 42500 42625 42750 42875 43000 43125 43250 43375 43500 43625 43750 43875 44000 44125 44250 44375 44500 44625 44750 44875 45000 45125 45250 45375 45500 45625 45750 45875 46000 46125 46250 46375 46500 46625 46750 46875 47000 47125 47250 47375 47500 47625 47750 47875 48000 48125 48250 48375 48500 48625 48750 48875 49000 49125 49250 49375 49500 49625 49750 49875 50000 50125 50250 50375 50500 50625 50750 50875 51000 51125 51250 51375 51500 51625 51750 51875 52000 52125 52250 52375 52500 52625 52750 52875 53000 53125 53250 53375 53500 53625 53750 53875 54000 54125 54250 54375 54500 54625 54750 54875 55000 55125 55250 55375 55500 55625 55750 55875 56000 56125 56250 56375 56500 56625 56750 56875 57000 57125 57250 57375 57500 57625 57750 57875 58000 58125 58250 58375 58500 58625 58750 58875 59000 59125 59250 59375 59500 59625 59750 59875 60000 60125 60250 60375 60500 60625 60750 60875 61000 61125 61250 61375 61500 61625 61750 61875 62000 62125 62250 62375 62500 62625 62750 62875 63000 63125 63250 63375 63500 63625 63750 63875 64000 64125 64250 64375 64500 64625 64750 64875 65000 65125 65250 65375 65500 65625 65750 65875 66000 66125 66250 66375 66500 66625 66750 66875 67000 67125 67250 67375 67500 67625 67750 67875 68000 68125 68250 68375 68500 68625 68750 68875 69000 69125 69250 69375 69500 69625 69750 69875 70000 70125 70250 70375 70500 70625 70750 70875 71000 71125 71250 71375 72375)) :ldur (quotelvel (quote ((35) (41) (53) (64) (65) (53) (32) (27) (39) (62) (92) (100) (99) (94) (71) (59) (47) (40) (30) (27) (25) (21) (21) (15) (12) (10) (34) (40) (51) (62) (66) (58) (36) (27) (28) (49) (71) (94) (100) (98) (94) (72) (61) (48) (42) (35) (27) (27) (23) (21) (20) (14) (12) (10) (34) (34) (37) (43) (48) (52) (58) (61) (65) (66) (65) (64) (57) (51) (37) (33) (28) (27) (27) (28) (33) (46) (55) (62) (76) (88) (94) (97) (99) (100) (100) (98) (97) (94) (90) (77) (69) (65) (61) (56) (48) (47) (44) (41) (38) (36) (31) (28) (27) (27) (27) (25) (23) (22) (21) (21) (21) (20) (17) (15) (13) (12) (12) (12) (10) (35) (48) (65) (58) (28) (33) (76) (100) (98) (70) (48) (38) (27) (23) (21) (13) (10) (35) (44) (59) (67) (57) (32) (27) (50) (82) (99) (100) (93) (67) (51) (42) (32) (27) (24) (21) (18) (12) (10) (35) (56) (66) (29) (51) (99) (100) (66) (43) (27) (22) (16) (10) (34) (35) (41) (48) (53) (60) (65) (66) (65) (59) (50) (35) (30) (27) (27) (30) (45) (56) (68) (86) (95) (98) (100) (100) (98) (95) (90) (74) (67) (62) (54) (48) (45) (40) (37) (32) (28) (27) (27) (25) (22) (21) (21) (21) (19) (15) (13) (12) (12) (10) (34) (49) (66) (53) (27) (49) (92) (100) (89) (59) (42) (28) (25) (21) (13) (10) (34) (47) (64) (62) (33) (28) (58) (95) (100) (91) (63) (46) (35) (27) (22) (21) (13) (10) (34) (44) (59) (66) (53) (28) (29) (57) (92) (100) (97) (75) (59) (46) (36) (27) (25) (21) (18) (12) (10) (34) (49) (66) (53) (27) (49) (92) (100) (89) (59) (42) (28) (25) (21) (13) (10) (34) (38) (49) (59) (66) (64) (53) (34) (27) (29) (49) (68) (92) (99) (100) (97) (89) (68) (59) (48) (42) (36) (28) (27) (25) (22) (21) (18) (13) (12) (10) (34) (36) (45) (52) (60) (66) (65) (58) (42) (32) (27) (27) (35) (54) (69) (90) (97) (100) (100) (97) (92) (73) (65) (57) (48) (44) (39) (33) (27) (27) (26) (22) (21) (21) (19) (15) (12) (12) (10) (34) (49) (66) (53) (27) (49) (92) (100) (89) (59) (42) (28) (25) (21) (13) (10) (34) (47) (64) (62) (33) (28) (58) (95) (100) (91) (63) (46) (35) (27) (22) (21) (13) (10) (34) (46) (62) (64) (36) (27) (49) (87) (100) (97) (72) (55) (42) (30) (27) (22) (20) (13) (10) (34) (47) (64) (62) (33) (28) (58) (95) (100) (91) (63) (46) (35) (27) (22) (21) (13) (10) (34) (35) (42) (49) (57) (62) (66) (65) (61) (53) (36) (30) (27) (27) (32) (49) (59) (78) (92) (97) (100) (100) (98) (95) (89) (72) (65) (59) (49) (47) (42) (38) (33) (28) (27) (27) (25) (22) (21) (21) (20) (16) (13) (12) (12) (10) (34) (49) (66) (53) (27) (49) (92) (100) (89) (59) (42) (28) (25) (21) (13) (10) (34) (34) (37) (43) (48) (52) (58) (61) (65) (66) (65) (64) (57) (51) (37) (33) (28) (27) (27) (28) (33) (46) (55) (62) (76) (88) (94) (97) (99) (100) (100) (98) (97) (94) (90) (77) (69) (65) (61) (56) (48) (47) (44) (41) (38) (36) (31) (28) (27) (27) (27) (25) (23) (22) (21) (21) (21) (20) (17) (15) (13) (12) (12) (12) (10) (34) (57) (59) (27) (65) (100) (79) (48) (29) (22) (17) (10))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 1818 193) (om-make-point 1099 432) 0 1000 nil 193/100 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "concat-chord-seq" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "chord-seq" nil))) (om-make-point 576 580) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "CONCAT" (quote concat) (quote ((om-load-inputfun (quote input-funbox) "a musical sequence" "S1" nil) (om-load-inputfun (quote input-funbox) "a musical sequence" "S2" nil))) (om-make-point 520 135) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "accum" (quote accumulator) (quote ((om-load-inputfun (quote input-funbox) "items to collect" "DATA" nil) (om-load-inputfun (quote input-funbox) "initial value" "INIT" nil) (om-load-inputfun (quote input-funbox) "accumulation function" "FUN" nil))) (om-make-point 290 209) (om-make-point 180 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 95 114) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 29 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 132 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chord-seq" 0 (om-make-point 5 45) "" "chord-seq" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 465 364) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 273 360) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 1 0 nil 0) (3 0 1 1 nil 0) (0 0 1 2 nil 0) (5 0 2 0 nil 0) (5 0 3 0 nil 0) (2 0 4 0 nil 0) (1 1 6 0 nil 0) (1 0 7 0 nil 0))) 1 "concat-chord-seq" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 609 364) (om-make-point 152 65) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 68 69 71 73 74 75 76 77 78 80 81 83 84 85 86 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104)) (quote (15 15 15 16 19 21 23 25 26 29 31 32 34 35 36 36 35 35 34 31 29 27 19 16 15 13 11 10 10 10 10 11 12 16 22 26 29 31 36 42 48 51 54 55 56 57 58 58 58 58 57 57 56 55 54 52 49 42 39 37 35 34 32 30 27 24 24 22 20 18 16 14 12 11 10 10 10 10 9 8 7 7 6 6 6 6 6 5 4 3 2 1 1 0 0 0 0 0 -1)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 837 444))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 484 394) (om-make-point 52 30) (list 0 125) "(0 125)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "midics->chord-seq" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "midics" nil) (om-load-inputfun (quote input-funbox) "" "onsets" nil) (om-load-inputfun (quote input-funbox) "" "loudness" nil))) (om-make-point 396 449) (om-make-point 226 59) nil nil (list (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 653 260) (om-make-point 31 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 592 253) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 552 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SAMPLE" (quote om-sample) (quote ((om-load-inputfun (quote input-funbox) "object to resample" "SELF" nil) (om-load-inputfun (quote input-funbox) "number of samples (int) or sample rate (float)" "SAMPLE-RATE" 1))) (om-make-point 517 211) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 391 183) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 228 322) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "loudness" 2 (om-make-point 518 107) "" "loudness" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "onsets" 1 (om-make-point 211 99) "" "onsets" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 192 214) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 69 86) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "midics" 0 (om-make-point 5 45) "" "midics" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 296 424) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 196 424) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 2 2 0 nil 0) (1 0 2 1 nil 0) (0 0 2 2 nil 0) (6 0 3 0 nil 0) (4 0 3 1 nil 0) (9 0 4 0 nil 0) (8 0 5 0 nil 0) (9 0 8 1 nil 0) (7 0 8 2 nil 0) (2 0 8 4 nil 0) (10 0 9 0 nil 0) (5 1 11 0 nil 0) (5 0 12 0 nil 0))) 1 "midics->chord-seq" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 375 352) (om-make-point 24 30) 21 "21" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 309 382) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 413 198) (om-make-point 35 30) 0.55 "0.55" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOIX" (quote alea::choix) (quote ((om-load-inputfun (quote input-funbox) "first choice" "X1" 1) (om-load-inputfun (quote input-funbox) "second choice" "X2" 2) (om-load-inputfun (quote input-funbox) "probability" "PX1" 0.5))) (om-make-point 252 257) (om-make-point 163 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "space2" (om-load-patch-abs1 "space2" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 403 60) (quote "This patch creates two Brownian motions between two registers$that are divided in eighth tones:$F#3-B3 inclusive, and G4-A4 inclusive.") "" (om-make-point 248 89) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 580 772) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOIX" (quote alea::choix) (quote ((om-load-inputfun (quote input-funbox) "first choice" "X1" 1) (om-load-inputfun (quote input-funbox) "second choice" "X2" 2) (om-load-inputfun (quote input-funbox) "probability" "PX1" 0.5))) (om-make-point 579 684) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-ITER 2" (quote remove-iter) (quote ((om-load-inputfun (quote input-funbox) "sequence" "SEQUENCE" (list 1 2)))) (om-make-point 957 695) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 885 433) (om-make-point 31 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 894 528) (om-make-point 34 30) 25 "25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 891 665) (om-make-point 28 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND 3" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 0) (om-load-inputfun (quote input-funbox) "divisor" "DIVISOR" 1))) (om-make-point 834 564) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 2" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 684 468) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND 2" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 843 388) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 6" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 788 383) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BROWNIAN1 2" (quote alea::brownian1) (quote ((om-load-inputfun (quote input-funbox) "first value" "NC" 50) (om-load-inputfun (quote input-funbox) "lower boundary" "BINF" 0.0) (om-load-inputfun (quote input-funbox) "upper boundary" "BSUP" 100.0) (om-load-inputfun (quote input-funbox) "sequence length" "LONG" 100) (om-load-inputfun (quote input-funbox) "bandwidth of the gaussian distribution" "SIGMA" 2))) (om-make-point 798 451) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-ITER" (quote remove-iter) (quote ((om-load-inputfun (quote input-funbox) "sequence" "SEQUENCE" (list 1 2)))) (om-make-point 335 700) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 489 406) (om-make-point 34 30) 21 "21" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 437 398) (om-make-point 34 30) 13 "13" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 435 446) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 263 437) (om-make-point 31 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 269 669) (om-make-point 28 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 272 532) (om-make-point 34 30) 25 "25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND 2" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 0) (om-load-inputfun (quote input-funbox) "divisor" "DIVISOR" 1))) (om-make-point 212 568) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 62 472) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 221 392) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 5" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 166 387) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BROWNIAN1" (quote alea::brownian1) (quote ((om-load-inputfun (quote input-funbox) "first value" "NC" 50) (om-load-inputfun (quote input-funbox) "lower boundary" "BINF" 0.0) (om-load-inputfun (quote input-funbox) "upper boundary" "BSUP" 100.0) (om-load-inputfun (quote input-funbox) "sequence length" "LONG" 100) (om-load-inputfun (quote input-funbox) "bandwidth of the gaussian distribution" "SIGMA" 2))) (om-make-point 176 455) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 814 298) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 4" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 666 180) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X 2" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 691 346) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 3" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 49 216) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 74 382) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 120 301) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 768 218) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 832 133) (om-make-point 24 30) 25 "25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/ 2" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 805 173) (om-make-point 26 36) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX 2" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 758 113) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 112 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 176 132) (om-make-point 24 30) 25 "25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 149 171) (om-make-point 26 36) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 102 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 672 68) (om-make-point 80 30) (list 6700 6900) "(6700 6900)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 71 73) (om-make-point 80 30) (list 5600 5900) "(5600 5900)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 917 157) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "RAN" (quote alea::ran) (quote nil) (om-make-point 923 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (12 0 2 0 nil 0) (3 0 2 1 nil 0) (6 0 3 0 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (11 0 7 0 nil 0) (5 0 7 2 nil 0) (26 0 8 0 nil 0) (38 0 9 0 nil 0) (38 0 10 0 nil 0) (8 0 11 0 nil 0) (10 0 11 1 nil 0) (9 0 11 2 nil 0) (15 0 11 3 nil 0) (4 0 11 4 nil 0) (17 0 12 0 nil 0) (14 0 15 0 nil 0) (13 0 15 1 nil 0) (19 0 17 0 nil 0) (18 0 17 1 nil 0) (23 0 19 0 nil 0) (18 0 19 2 nil 0) (28 0 20 0 nil 0) (39 0 21 0 nil 0) (39 0 22 0 nil 0) (20 0 23 0 nil 0) (22 0 23 1 nil 0) (21 0 23 2 nil 0) (15 0 23 3 nil 0) (16 0 23 4 nil 0) (31 0 24 0 nil 0) (30 0 24 1 nil 0) (38 0 25 0 nil 0) (25 0 26 0 nil 0) (24 0 26 1 nil 0) (39 0 27 0 nil 0) (27 0 28 0 nil 0) (29 0 28 1 nil 0) (35 0 29 0 nil 0) (34 0 29 1 nil 0) (32 0 30 0 nil 0) (33 0 32 0 nil 0) (31 0 32 1 nil 0) (38 0 33 0 nil 0) (36 0 34 0 nil 0) (37 0 36 0 nil 0) (35 0 36 1 nil 0) (39 0 37 0 nil 0) (41 0 40 0 nil 0))) 7.01 nil "" (om-make-point 2119 25) (om-make-point 1081 860)) (quote nil) (om-make-point 340 119) nil (list (list 6875 6725 6775 6900 6750 6825 6850 6825 6725 6850 6875 6725)) nil "space2"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "space1" (om-load-patch-abs1 "space1" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 665 45) (quote "The right side of the algorithm uses the Brownian step sequencer of patches 1 and 2 to traverse the space $between the bottom and the top of the scale generated at the left side. ") "" (om-make-point 782 93) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 823 149) (om-make-point 24 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 776 150) (om-make-point 23 34) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 554 45) (quote "The left side of this subpatch creates a quarter-tone scale$between 5 and 12 notes long starting on any quarter tone between C4 and F#4 inclusive") "" (om-make-point 24 81) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 310 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 349 226) (om-make-point 24 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 267 264) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 646 527) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "space2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 569 425) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 288 208) (om-make-point 38 30) 6600 "6600" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 224 204) (om-make-point 38 30) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 418 290) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 373 152) (om-make-point 24 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 385 187) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 687 221) (om-make-point 27 30) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "001-intro-to-recursion-step" (quote ("elements" "Project2" "001-intro-to-recursion-step")) (quote ((om-load-inputfun (quote input-funbox) "" "start-note" nil) (om-load-inputfun (quote input-funbox) "" "end" nil))) (om-make-point 662 278) nil nil nil "001-intro-to-recursion-step" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 5) (om-load-inputfun (quote input-funbox) "max" "HIGH" 12))) (om-make-point 776 196) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 4 0 nil 0) (10 0 6 0 nil 0) (9 0 6 1 nil 0) (5 0 6 2 nil 0) (8 0 7 0 nil 0) (11 0 8 0 nil 0) (15 0 8 1 nil 0) (4 0 11 0 nil 0) (13 0 11 1 nil 0) (12 0 13 0 nil 0) (16 0 13 1 nil 0) (14 0 15 0 nil 0) (16 0 15 1 nil 0) (2 0 16 0 nil 0) (1 0 16 1 nil 0))) 7.01 nil "" (om-make-point 1480 127) (om-make-point 1549 611)) (quote nil) (om-make-point 221 121) nil (list (list 6350 6400 6450 6400 6450 6400 6450 6500 6550 6500 6450 6500 6450 6400 6450 6400 6450 6500 6550 6600 6650 6600 6650 6600 6650 6600 6650 6700 6650 6700 6750 6700 6750 6800 6850 6800 6850 6900)) nil "space1"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 5 0 nil 0) (9 0 6 0 nil 0) (11 0 9 0 nil 0) (8 0 9 1 nil 0) (7 0 9 2 nil 0) (13 0 11 0 nil 0) (10 0 11 1 nil 0) (15 0 13 0 nil 0) (14 0 13 1 nil 0) (12 0 13 2 nil 0))) nil 7.01))
