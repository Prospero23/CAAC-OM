; OM File Header - Saved 2023/03/25 12:41:26
; (7.01 :patc (om-make-point 118 10) (om-make-point 110 25) (om-make-point 894 496) "" 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"001-intro-to-recursion-step.omp\""))
(in-package :om)(load-lib-for (quote ("Alea")))(setf *om-current-persistent* (om-load-patch1 "001-intro-to-recursion-step" (quote ((let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 342 423) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 157 428) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 233 503) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "intro-to-recursion-step" (quote ("elements" "Project2" "001-intro-to-recursion-step")) (quote ((om-load-inputfun (quote input-funbox) "" "start-note" nil) (om-load-inputfun (quote input-funbox) "" "end" nil))) (om-make-point 646 257) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 0))) (om-make-point 560 219) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "STOP" (quote stop) (quote ((om-load-inputfun (quote input-funbox) "" "SETF" nil))) (om-make-point 332 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 214 321) (om-make-point 328 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LAST-ELEM" (quote last-elem) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 74 140) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 125 222) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "end" 1 (om-make-point 179 119) "" "end" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 692 53) (om-make-point 38 30) 0.6 "0.6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 638 51) (om-make-point 22 30) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 579 52) (om-make-point 21 29) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOIX" (quote alea::choix) (quote ((om-load-inputfun (quote input-funbox) "first choice" "X1" 1) (om-load-inputfun (quote input-funbox) "second choice" "X2" 2) (om-load-inputfun (quote input-funbox) "probability" "PX1" 0.5))) (om-make-point 548 105) (om-make-point 193 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "start-note" 0 (om-make-point 5 45) "" "start-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (14 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0) (4 0 3 0 nil 0) (9 0 3 1 nil 0) (14 0 4 0 nil 0) (13 0 4 1 nil 0) (9 0 5 0 nil 0) (8 0 6 0 nil 0) (5 0 6 1 nil 0) (3 0 6 2 nil 0) (14 0 7 0 nil 0) (7 0 8 0 nil 0) (9 0 8 1 nil 0) (12 0 13 0 nil 0) (11 0 13 1 nil 0) (10 0 13 2 nil 0))) nil 7.01))
