; OM File Header - Saved 2023/02/11 13:38:03
; (7.01 :patc (om-make-point 277 296) (om-make-point 0 25) (om-make-point 1440 847) "" 183 0 nil "2023/02/11 13:38:03")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "patch1" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 103 30) (quote "n random sets") nil (om-make-point 792 793) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 82 30) (quote "all the sets") nil (om-make-point 680 626) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 692 841) (om-make-point 100 70) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (7800) (7300) (7200) (6900) (7000) (6800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (6800) (6700) (6400) (6500) (6300) (6900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 965 646) (om-make-point 329 87) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 743 742) (om-make-point 37 31) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 713 785) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 648 711) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 2" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 567 607) (om-make-point 100 70) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6900) (6800) (7100) (7200) (7700) (7300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6600) (6900) (7000) (7500) (7100) (6500))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (7000) (7100) (7600) (7200) (6600) (6800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6800) (7300) (6900) (6300) (6500) (6400))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (7200) (6800) (6200) (6400) (6300) (6600))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6300) (5700) (5900) (5800) (6100) (6200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6100) (6300) (6200) (6500) (6600) (7100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (7100) (7000) (7300) (7400) (7900) (7500))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6800) (7100) (7200) (7700) (7300) (6700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (7200) (7300) (7800) (7400) (6800) (7000))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (7000) (7500) (7100) (6500) (6700) (6600))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (7400) (7000) (6400) (6600) (6500) (6800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6500) (5900) (6100) (6000) (6300) (6400))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6300) (6500) (6400) (6700) (6800) (7300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7000) (6900) (7200) (7300) (7800) (7400))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6700) (7000) (7100) (7600) (7200) (6600))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7100) (7200) (7700) (7300) (6700) (6900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6900) (7400) (7000) (6400) (6600) (6500))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7300) (6900) (6300) (6500) (6400) (6700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6400) (5800) (6000) (5900) (6200) (6300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6200) (6400) (6300) (6600) (6700) (7200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7300) (7200) (7500) (7600) (8100) (7700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7000) (7300) (7400) (7900) (7500) (6900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7400) (7500) (8000) (7600) (7000) (7200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7200) (7700) (7300) (6700) (6900) (6800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7600) (7200) (6600) (6800) (6700) (7000))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (6700) (6100) (6300) (6200) (6500) (6600))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (6500) (6700) (6600) (6900) (7000) (7500))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7400) (7300) (7600) (7700) (8200) (7800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7100) (7400) (7500) (8000) (7600) (7000))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7500) (7600) (8100) (7700) (7100) (7300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7300) (7800) (7400) (6800) (7000) (6900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7700) (7300) (6700) (6900) (6800) (7100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (6800) (6200) (6400) (6300) (6600) (6700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (6600) (6800) (6700) (7000) (7100) (7600))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (7900) (7800) (8100) (8200) (8700) (8300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (7600) (7900) (8000) (8500) (8100) (7500))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (8000) (8100) (8600) (8200) (7600) (7800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (7800) (8300) (7900) (7300) (7500) (7400))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (8200) (7800) (7200) (7400) (7300) (7600))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (7300) (6700) (6900) (6800) (7100) (7200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (7100) (7300) (7200) (7500) (7600) (8100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7500) (7400) (7700) (7800) (8300) (7900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7200) (7500) (7600) (8100) (7700) (7100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7600) (7700) (8200) (7800) (7200) (7400))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7400) (7900) (7500) (6900) (7100) (7000))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7800) (7400) (6800) (7000) (6900) (7200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (6900) (6300) (6500) (6400) (6700) (6800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (6700) (6900) (6800) (7100) (7200) (7700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6500) (6600) (6300) (6200) (5700) (6100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6800) (6500) (6400) (5900) (6300) (6900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6400) (6300) (5800) (6200) (6800) (6600))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6600) (6100) (6500) (7100) (6900) (7000))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6200) (6600) (7200) (7000) (7100) (6800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (7100) (7700) (7500) (7600) (7300) (7200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (7300) (7100) (7200) (6900) (6800) (6300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6700) (6800) (6500) (6400) (5900) (6300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (7000) (6700) (6600) (6100) (6500) (7100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6600) (6500) (6000) (6400) (7000) (6800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6800) (6300) (6700) (7300) (7100) (7200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6400) (6800) (7400) (7200) (7300) (7000))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (7300) (7900) (7700) (7800) (7500) (7400))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (7500) (7300) (7400) (7100) (7000) (6500))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6600) (6700) (6400) (6300) (5800) (6200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6900) (6600) (6500) (6000) (6400) (7000))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6500) (6400) (5900) (6300) (6900) (6700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6700) (6200) (6600) (7200) (7000) (7100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6300) (6700) (7300) (7100) (7200) (6900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7200) (7800) (7600) (7700) (7400) (7300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7400) (7200) (7300) (7000) (6900) (6400))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (6900) (7000) (6700) (6600) (6100) (6500))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7200) (6900) (6800) (6300) (6700) (7300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (6800) (6700) (6200) (6600) (7200) (7000))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7000) (6500) (6900) (7500) (7300) (7400))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (6600) (7000) (7600) (7400) (7500) (7200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7500) (8100) (7900) (8000) (7700) (7600))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7700) (7500) (7600) (7300) (7200) (6700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7000) (7100) (6800) (6700) (6200) (6600))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7300) (7000) (6900) (6400) (6800) (7400))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (6900) (6800) (6300) (6700) (7300) (7100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7100) (6600) (7000) (7600) (7400) (7500))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (6700) (7100) (7700) (7500) (7600) (7300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7600) (8200) (8000) (8100) (7800) (7700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7800) (7600) (7700) (7400) (7300) (6800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (7500) (7600) (7300) (7200) (6700) (7100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (7800) (7500) (7400) (6900) (7300) (7900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (7400) (7300) (6800) (7200) (7800) (7600))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (7600) (7100) (7500) (8100) (7900) (8000))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (7200) (7600) (8200) (8000) (8100) (7800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (8100) (8700) (8500) (8600) (8300) (8200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (8300) (8100) (8200) (7900) (7800) (7300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7100) (7200) (6900) (6800) (6300) (6700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7400) (7100) (7000) (6500) (6900) (7500))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7000) (6900) (6400) (6800) (7400) (7200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7200) (6700) (7100) (7700) (7500) (7600))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (6800) (7200) (7800) (7600) (7700) (7400))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7700) (8300) (8100) (8200) (7900) (7800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7900) (7700) (7800) (7500) (7400) (6900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7700) (7200) (7100) (6800) (6900) (6700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500) (7100) (7500) (7000) (6900) (6600) (6700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6600) (7200) (7600) (7100) (7000) (6700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (6500) (6300) (6900) (7300) (6800) (6700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600) (6300) (6400) (6200) (6800) (7200) (6700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (6100) (5800) (5900) (5700) (6300) (6700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (6600) (6500) (6200) (6300) (6100) (6700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500) (7900) (7400) (7300) (7000) (7100) (6900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (7300) (7700) (7200) (7100) (6800) (6900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7000) (6800) (7400) (7800) (7300) (7200) (6900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600) (6700) (6500) (7100) (7500) (7000) (6900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6500) (6600) (6400) (7000) (7400) (6900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (6300) (6000) (6100) (5900) (6500) (6900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (6800) (6700) (6400) (6500) (6300) (6900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (7800) (7300) (7200) (6900) (7000) (6800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600) (7200) (7600) (7100) (7000) (6700) (6800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6700) (7300) (7700) (7200) (7100) (6800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500) (6600) (6400) (7000) (7400) (6900) (6800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6400) (6500) (6300) (6900) (7300) (6800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (6200) (5900) (6000) (5800) (6400) (6800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (6700) (6600) (6300) (6400) (6200) (6800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (8100) (7600) (7500) (7200) (7300) (7100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (7500) (7900) (7400) (7300) (7000) (7100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7000) (7600) (8000) (7500) (7400) (7100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6900) (6700) (7300) (7700) (7200) (7100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7000) (6700) (6800) (6600) (7200) (7600) (7100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600) (6500) (6200) (6300) (6100) (6700) (7100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500) (7000) (6900) (6600) (6700) (6500) (7100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (8200) (7700) (7600) (7300) (7400) (7200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7000) (7600) (8000) (7500) (7400) (7100) (7200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7100) (7700) (8100) (7600) (7500) (7200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (7000) (6800) (7400) (7800) (7300) (7200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (6800) (6900) (6700) (7300) (7700) (7200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6600) (6300) (6400) (6200) (6800) (7200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7600) (7100) (7000) (6700) (6800) (6600) (7200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8300) (8700) (8200) (8100) (7800) (7900) (7700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500) (8100) (8500) (8000) (7900) (7600) (7700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (7600) (8200) (8600) (8100) (8000) (7700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (7500) (7300) (7900) (8300) (7800) (7700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7600) (7300) (7400) (7200) (7800) (8200) (7700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7100) (6800) (6900) (6700) (7300) (7700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8100) (7600) (7500) (7200) (7300) (7100) (7700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7900) (8300) (7800) (7700) (7400) (7500) (7300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7700) (8100) (7600) (7500) (7200) (7300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (7200) (7800) (8200) (7700) (7600) (7300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7000) (7100) (6900) (7500) (7900) (7400) (7300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (6900) (7000) (6800) (7400) (7800) (7300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6700) (6400) (6500) (6300) (6900) (7300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (7200) (7100) (6800) (6900) (6700) (7300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6500) (6600) (6300) (6200) (5700) (6100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6800) (6500) (6400) (5900) (6300) (6900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6400) (6300) (5800) (6200) (6800) (6600))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6600) (6100) (6500) (7100) (6900) (7000))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6200) (6600) (7200) (7000) (7100) (6800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (7100) (7700) (7500) (7600) (7300) (7200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (7300) (7100) (7200) (6900) (6800) (6300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6700) (6800) (6500) (6400) (5900) (6300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (7000) (6700) (6600) (6100) (6500) (7100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6600) (6500) (6000) (6400) (7000) (6800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6800) (6300) (6700) (7300) (7100) (7200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6400) (6800) (7400) (7200) (7300) (7000))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (7300) (7900) (7700) (7800) (7500) (7400))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (7500) (7300) (7400) (7100) (7000) (6500))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6600) (6700) (6400) (6300) (5800) (6200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6900) (6600) (6500) (6000) (6400) (7000))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6500) (6400) (5900) (6300) (6900) (6700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6700) (6200) (6600) (7200) (7000) (7100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6300) (6700) (7300) (7100) (7200) (6900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7200) (7800) (7600) (7700) (7400) (7300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7400) (7200) (7300) (7000) (6900) (6400))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (6900) (7000) (6700) (6600) (6100) (6500))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7200) (6900) (6800) (6300) (6700) (7300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (6800) (6700) (6200) (6600) (7200) (7000))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7000) (6500) (6900) (7500) (7300) (7400))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (6600) (7000) (7600) (7400) (7500) (7200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7500) (8100) (7900) (8000) (7700) (7600))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7700) (7500) (7600) (7300) (7200) (6700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7000) (7100) (6800) (6700) (6200) (6600))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7300) (7000) (6900) (6400) (6800) (7400))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (6900) (6800) (6300) (6700) (7300) (7100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7100) (6600) (7000) (7600) (7400) (7500))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (6700) (7100) (7700) (7500) (7600) (7300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7600) (8200) (8000) (8100) (7800) (7700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7800) (7600) (7700) (7400) (7300) (6800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (7500) (7600) (7300) (7200) (6700) (7100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (7800) (7500) (7400) (6900) (7300) (7900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (7400) (7300) (6800) (7200) (7800) (7600))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (7600) (7100) (7500) (8100) (7900) (8000))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (7200) (7600) (8200) (8000) (8100) (7800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (8100) (8700) (8500) (8600) (8300) (8200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (8300) (8100) (8200) (7900) (7800) (7300))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7100) (7200) (6900) (6800) (6300) (6700))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7400) (7100) (7000) (6500) (6900) (7500))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7000) (6900) (6400) (6800) (7400) (7200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7200) (6700) (7100) (7700) (7500) (7600))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (6800) (7200) (7800) (7600) (7700) (7400))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7700) (8300) (8100) (8200) (7900) (7800))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7900) (7700) (7800) (7500) (7400) (6900))) :lonset (quote (0 250 500 750 1000 1250 1500 1750)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 785 505) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 653 540) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "midics>chord-seq-list 3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "grouped-list-of-midics" nil))) (om-make-point 806 438) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 503 167) (om-make-point 34 30) (list 50) "(50)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 413 167) (om-make-point 51 30) (list 250) "(250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 331 164) (om-make-point 62 30) (list 0 250) "(0 250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 386 433) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 180 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 50)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 198 210) (om-make-point 376 83) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500 6500) (6200) (7300 7000 5900) (6900 7200) (6800 7600 6700 7800))) :lonset (quote (0 4000 8000 12000 16000 20000)) :ldur (quote ((4000 4000) (4000) (4000 4000 4000) (4000 4000) (4000 4000 4000 4000))) :lvel (quote ((50 50) (50) (50 50 50) (50 50) (50 50 50 50))) :loffset (quote ((0 0) (0) (0 0 0) (0 0) (0 0 0 0))) :lchan (quote ((1 1) (1) (1 1 1) (1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0 0 0) (0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "grouped-list-of-midics" 0 (om-make-point 5 45) "" "grouped-list-of-midics" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 433 537) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 333 537) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 3 0 nil 0) (6 0 4 0 nil 0) (4 0 5 1 nil 0) (2 0 5 2 nil 0) (1 0 5 3 nil 0) (0 0 5 4 nil 0) (3 1 7 0 nil 0) (3 0 8 0 nil 0))) 1 "midics>chord-seq-list" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 903 345) (om-make-point 68 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 4" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 860 374) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "midics>chord-seq-list 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "grouped-list-of-midics" nil))) (om-make-point 601 441) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 503 167) (om-make-point 34 30) (list 50) "(50)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 413 167) (om-make-point 51 30) (list 250) "(250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 331 164) (om-make-point 62 30) (list 0 250) "(0 250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 386 433) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 180 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 50)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 198 210) (om-make-point 376 83) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500 6500) (6200) (7300 7000 5900) (6900 7200) (6800 7600 6700 7800))) :lonset (quote (0 4000 8000 12000 16000 20000)) :ldur (quote ((4000 4000) (4000) (4000 4000 4000) (4000 4000) (4000 4000 4000 4000))) :lvel (quote ((50 50) (50) (50 50 50) (50 50) (50 50 50 50))) :loffset (quote ((0 0) (0) (0 0 0) (0 0) (0 0 0 0))) :lchan (quote ((1 1) (1) (1 1 1) (1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0 0 0) (0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "grouped-list-of-midics" 0 (om-make-point 5 45) "" "grouped-list-of-midics" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 433 537) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 333 537) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 3 0 nil 0) (6 0 4 0 nil 0) (4 0 5 1 nil 0) (2 0 5 2 nil 0) (1 0 5 3 nil 0) (0 0 5 4 nil 0) (3 1 7 0 nil 0) (3 0 8 0 nil 0))) 1 "midics>chord-seq-list" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 685 335) (om-make-point 68 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 642 364) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "midics>chord-seq-list" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "grouped-list-of-midics" nil))) (om-make-point 399 441) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 503 167) (om-make-point 34 30) (list 50) "(50)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 413 167) (om-make-point 51 30) (list 250) "(250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 331 164) (om-make-point 62 30) (list 0 250) "(0 250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 386 433) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 180 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 50)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 198 210) (om-make-point 376 83) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500 6500) (6200) (7300 7000 5900) (6900 7200) (6800 7600 6700 7800))) :lonset (quote (0 4000 8000 12000 16000 20000)) :ldur (quote ((4000 4000) (4000) (4000 4000 4000) (4000 4000) (4000 4000 4000 4000))) :lvel (quote ((50 50) (50) (50 50 50) (50 50) (50 50 50 50))) :loffset (quote ((0 0) (0) (0 0 0) (0 0) (0 0 0 0))) :lchan (quote ((1 1) (1) (1 1 1) (1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0 0 0) (0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "grouped-list-of-midics" 0 (om-make-point 5 45) "" "grouped-list-of-midics" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 433 537) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 333 537) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 3 0 nil 0) (6 0 4 0 nil 0) (4 0 5 1 nil 0) (2 0 5 2 nil 0) (1 0 5 3 nil 0) (0 0 5 4 nil 0) (3 1 7 0 nil 0) (3 0 8 0 nil 0))) 1 "midics>chord-seq-list" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 483 335) (om-make-point 68 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 440 364) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "all retrograde inversion" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 811 284) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxwithed1 (quote box-with-win) "RI-rot" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 172 199) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxcall (quote abstraction) "RI" (om-load-patch-abs1 "RI" (quote ((let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 199 141) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 146 235) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 159 39) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "I" (om-load-patch-abs1 "I" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 214 292) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 184 41) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 303 138) (om-make-point 22 30) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 207 140) (om-make-point 49 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 136 203) (om-make-point 99 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (1 0 4 0 nil 0) (3 0 4 1 nil 0) (2 0 5 0 nil 0) (4 0 5 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 77 133) (om-make-point 83 67) nil nil "I"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (4 0 1 0 nil 0) (3 0 4 0 nil 0) (0 0 4 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 212 186) nil nil nil "RI"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 315 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 229 274) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 295 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 195 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 0 0 nil 0) (1 0 0 1 nil 0) (3 0 1 0 nil 0) (0 0 2 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "RI-rot" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 58 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 253 306) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 304 409) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 193 401) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 0 1 nil 0) (4 0 1 0 nil 0) (0 0 2 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "all retrograde inversion" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "all retrograde" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 576 276) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxwithed1 (quote box-with-win) "R-rot" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 171 199) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxcall (quote abstraction) "R" (om-load-patch-abs1 "R" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 226 268) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 165 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 168 50) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "T" (om-load-patch-abs1 "T" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 153 254) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 113 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 190 48) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 93 129) nil nil nil "T"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (4 0 1 0 nil 0) (3 0 4 0 nil 0) (2 0 4 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 181 182) nil nil nil "R"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 315 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 229 274) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 295 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 195 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 0 0 nil 0) (1 0 0 1 nil 0) (3 0 1 0 nil 0) (0 0 2 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "R-rot" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 58 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 253 306) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 304 409) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 193 401) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 0 1 nil 0) (4 0 1 0 nil 0) (0 0 2 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "all retrograde" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "all inversions" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 365 279) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxwithed1 (quote box-with-win) "I-rot" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 148 198) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxcall (quote abstraction) "I" (om-load-patch-abs1 "I" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 214 292) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 184 41) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 303 138) (om-make-point 22 30) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 207 140) (om-make-point 49 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 136 203) (om-make-point 99 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (1 0 4 0 nil 0) (3 0 4 1 nil 0) (2 0 5 0 nil 0) (4 0 5 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 205 178) nil nil nil "I"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 315 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 229 274) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 295 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 195 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 0 0 nil 0) (1 0 0 1 nil 0) (3 0 1 0 nil 0) (0 0 2 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "I-rot" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 58 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 253 306) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 304 409) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 193 401) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 0 1 nil 0) (4 0 1 0 nil 0) (0 0 2 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "all inversions" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "R-rot" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 1307 59) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxcall (quote abstraction) "R" (om-load-patch-abs1 "R" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 226 268) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 165 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 168 50) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "T" (om-load-patch-abs1 "T" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 153 254) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 113 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 190 48) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 93 129) nil nil nil "T"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (4 0 1 0 nil 0) (3 0 4 0 nil 0) (2 0 4 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 181 182) nil nil nil "R"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 315 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 229 274) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 295 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 195 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 0 0 nil 0) (1 0 0 1 nil 0) (3 0 1 0 nil 0) (0 0 2 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "R-rot" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "T-Rot 3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 989 70) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 315 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 229 274) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "T" (om-load-patch-abs1 "T" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 153 254) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 113 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 190 48) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 159 164) (om-make-point 98 67) (list (list 6900 7100 7000 7300 7400 7900 7500)) nil "T"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 295 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 195 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (2 0 1 0 nil 0) (4 0 2 0 nil 0) (0 0 2 1 nil 0) (1 1 5 0 nil 0) (1 0 6 0 nil 0))) 1 "t-rot" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "RI-rot" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 1153 135) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxcall (quote abstraction) "RI" (om-load-patch-abs1 "RI" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 146 235) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 159 39) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "I" (om-load-patch-abs1 "I" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 214 292) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 184 41) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 303 138) (om-make-point 22 30) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 207 140) (om-make-point 49 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 136 203) (om-make-point 99 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (1 0 4 0 nil 0) (3 0 4 1 nil 0) (2 0 5 0 nil 0) (4 0 5 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 77 133) (om-make-point 83 67) nil nil "I"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 212 186) nil nil nil "RI"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 315 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 229 274) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 295 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 195 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 0 0 nil 0) (1 0 0 1 nil 0) (3 0 1 0 nil 0) (0 0 2 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "RI-rot" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 202 305) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 109 361) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "rot->intervals" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "pitch-rotations" nil))) (om-make-point 140 201) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 265 234) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 200 168) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 108 89) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pitch-rotations" 0 (om-make-point 5 45) "" "pitch-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 297 322) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 197 322) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "rot->intervals" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "midics>chord-seq-list" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "grouped-list-of-midics" nil))) (om-make-point 221 419) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 503 167) (om-make-point 34 30) (list 50) "(50)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 413 167) (om-make-point 51 30) (list 250) "(250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 331 164) (om-make-point 62 30) (list 0 250) "(0 250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 386 433) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 180 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 50)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 198 210) (om-make-point 376 83) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500 6500) (6200) (7300 7000 5900) (6900 7200) (6800 7600 6700 7800))) :lonset (quote (0 4000 8000 12000 16000 20000)) :ldur (quote ((4000 4000) (4000) (4000 4000 4000) (4000 4000) (4000 4000 4000 4000))) :lvel (quote ((50 50) (50) (50 50 50) (50 50) (50 50 50 50))) :loffset (quote ((0 0) (0) (0 0 0) (0 0) (0 0 0 0))) :lchan (quote ((1 1) (1) (1 1 1) (1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0 0 0) (0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "grouped-list-of-midics" 0 (om-make-point 5 45) "" "grouped-list-of-midics" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 433 537) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 333 537) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 3 0 nil 0) (6 0 4 0 nil 0) (4 0 5 1 nil 0) (2 0 5 2 nil 0) (1 0 5 3 nil 0) (0 0 5 4 nil 0) (3 1 7 0 nil 0) (3 0 8 0 nil 0))) 1 "midics>chord-seq-list" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "t-rot-tcomb" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 7 279) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxwithed1 (quote box-with-win) "t-rot-tcomb" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 172 204) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 315 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 229 274) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "T" (om-load-patch-abs1 "T" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 153 254) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 113 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 190 48) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 159 164) (om-make-point 98 67) (list (list 6900 7100 7000 7300 7400 7900 7500)) nil "T"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 295 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 195 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (2 0 1 0 nil 0) (4 0 2 0 nil 0) (0 0 2 1 nil 0) (1 1 5 0 nil 0) (1 0 6 0 nil 0))) 1 "t-rot-tcomb" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 58 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 253 306) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 304 409) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 193 401) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 0 1 nil 0) (4 0 1 0 nil 0) (0 0 2 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "t-rot-tcomb" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 80 43) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6900 6800 7100 7200 7700 7300)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 716 37) (om-make-point 514 302) 3 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "I" (om-load-patch-abs1 "I" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 214 292) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 184 41) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 303 138) (om-make-point 22 30) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 207 140) (om-make-point 49 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 136 203) (om-make-point 99 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (1 0 4 0 nil 0) (3 0 4 1 nil 0) (2 0 5 0 nil 0) (4 0 5 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 1341 149) nil nil nil "I"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "R" (om-load-patch-abs1 "R" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 226 268) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 165 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 168 50) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "T" (om-load-patch-abs1 "T" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 153 254) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 113 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 190 48) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 93 129) nil nil nil "T"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (4 0 1 0 nil 0) (3 0 4 0 nil 0) (2 0 4 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 1295 151) nil nil nil "R"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "RI" (om-load-patch-abs1 "RI" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 146 235) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 159 39) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "I" (om-load-patch-abs1 "I" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 214 292) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 184 41) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 303 138) (om-make-point 22 30) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 207 140) (om-make-point 49 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 136 203) (om-make-point 99 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (1 0 4 0 nil 0) (3 0 4 1 nil 0) (2 0 5 0 nil 0) (4 0 5 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 77 133) (om-make-point 83 67) nil nil "I"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 1396 140) nil nil nil "RI"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "I-rot" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 1150 66) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxcall (quote abstraction) "I" (om-load-patch-abs1 "I" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 214 292) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 184 41) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 303 138) (om-make-point 22 30) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 207 140) (om-make-point 49 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 136 203) (om-make-point 99 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (1 0 4 0 nil 0) (3 0 4 1 nil 0) (2 0 5 0 nil 0) (4 0 5 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 205 178) nil nil nil "I"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 315 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 229 274) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 295 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 195 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 0 0 nil 0) (1 0 0 1 nil 0) (3 0 1 0 nil 0) (0 0 2 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "I-rot" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "all-rotations" (om-load-patch-abs1 "all-rotations" (quote ((let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "give-all-list-rotations" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "list" nil) (om-load-inputfun (quote input-funbox) "" "list-ind" nil))) (om-make-point 39 343) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "ROTATE" (quote rotate) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil) (om-load-inputfun (quote input-funbox) "nth" "NTH" 1))) (om-make-point 94 119) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 124 214) (om-make-point 71 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 211 114) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "list-ind" 1 (om-make-point 262 51) "" "list-ind" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "list" 0 (om-make-point 5 45) "" "list" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 181 319) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 81 319) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 0 0 nil 0) (2 0 0 1 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (1 1 5 0 nil 0) (1 0 6 0 nil 0))) 1 "give-all-list-rotations" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 113 241) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 130 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 173 167) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 209 123) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 261 452) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "returns-all-rotations" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 1 nil 0) (0 0 3 0 nil 0) (3 0 4 0 nil 0) (5 0 4 1 nil 0) (1 0 6 0 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 255 125) nil (list (list (list 6700 6900 6800 7100 7200 7700 7300) (list 6900 6800 7100 7200 7700 7300 6700) (list 6800 7100 7200 7700 7300 6700 6900) (list 7100 7200 7700 7300 6700 6900 6800) (list 7200 7700 7300 6700 6900 6800 7100) (list 7700 7300 6700 6900 6800 7100 7200) (list 7300 6700 6900 6800 7100 7200 7700))) nil "all-rotations"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 2 1 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (6 1 5 0 nil 0) (7 0 6 1 nil 0) (26 0 7 0 nil 0) (14 0 7 1 nil 0) (11 0 7 2 nil 0) (8 0 7 3 nil 0) (10 0 8 0 nil 0) (17 0 10 0 nil 0) (9 0 10 1 nil 0) (13 0 11 0 nil 0) (18 0 13 0 nil 0) (12 0 13 1 nil 0) (16 0 14 0 nil 0) (19 0 16 0 nil 0) (15 0 16 1 nil 0) (28 1 17 0 nil 0) (25 0 17 1 nil 0) (28 1 18 0 nil 0) (25 0 18 1 nil 0) (28 1 19 0 nil 0) (25 0 19 1 nil 0) (27 0 24 0 nil 0) (23 0 24 1 nil 0) (33 0 25 0 nil 0) (24 0 26 0 nil 0) (28 1 27 0 nil 0) (25 0 27 1 nil 0) (28 1 33 0 nil 0))) nil 7.01))