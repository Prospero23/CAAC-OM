; OM File Header - Saved 2023/02/24 16:25:19
; (7.01 :patc (om-make-point 10 60) (om-make-point 70 317) (om-make-point 1456 916) "" 183 0 "2023/02/22 14:06:46" "2023/02/24 16:25:19")
; End File Header
(in-package :om)(load-lib-for (quote ("Alea")))(setf *om-current-persistent* (om-load-patch1 "figure calculation" (quote ((let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 344 129) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OSC-SEND 2" (quote osc-send) (quote ((om-load-inputfun (quote input-funbox) "OSC message" "BUNDLE" (list "/test" 0)) (om-load-inputfun (quote input-funbox) "IP address" "HOST" "127.0.0.1") (om-load-inputfun (quote input-funbox) "port number" "PORT" 3005))) (om-make-point 553 1155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 8" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 515 1023) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 365 911) (om-make-point 55 30) (list (quote /notes)) "(/notes)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLATTEN 2" (quote flatten) (quote ((om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 486 1095) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "chord-seq to notes" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 575 809) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "FLATTEN" (quote flatten) (quote ((om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 249 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 265 269) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 252 425) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 252 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 232 43) "" "input" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 301 544) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 201 544) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 1 0 0 nil 0) (3 0 1 0 nil 0) (0 0 2 0 nil 0) (4 0 3 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "chord-seq to notes" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 159 708) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 512 874) (om-make-point 345 63) (load-buffer-textfile (quote ("(8400 10200 9400 8900 7800)" "(7300 9100 8300 7800 6700)" "(7800 7300 6200 6800 8600)" "(7400 6300 5800 5000 6800)" "(6200 7300 7800 8600 6800)" "(6800 6000 5500 4400 5000)" "(6000 6800 7300 8400 7800)" "(8600 9200 8100 7600 6800)" "(6000 6800 7300 8400 7800)" "(5400 6500 7000 7800 6000)" "(6000 6800 7300 8400 7800)" "(7900 8400 9200 7400 6800)" "(6000 6800 7300 8400 7800)" "(6800 6200 4400 5200 5700)" "(8400 7900 6800 7400 9200)" "(6800 6000 7800 8400 7300)" "(6000 6800 7300 8400 7800)" "(5400 6500 7000 7800 6000)" "(6000 7100 6500 4700 5500)" "(6800 6000 5500 4400 5000)" "(6000 7100 6500 4700 5500)" "(6000 6800 7300 8400 7800)" "(6000 7800 7000 6500 5400)" "(6000 5200 4700 3600 4200)" "(5700 5200 4400 6200 6800)" "(8400 7300 7900 9700 8900)" "(6000 6800 7300 8400 7800)" "(9600 10200 9100 8600 7800)" "(7300 6700 4900 5700 6200)" "(6000 6800 7300 8400 7800)" "(6000 4200 5000 5500 6600)" "(7800 6000 6800 7300 8400)" "(6300 5500 7300 7900 6800)" "(6000 6800 7300 8400 7800)" "(6000 5500 4400 5000 6800)" "(6600 5500 5000 4200 6000)" "(6000 6800 7300 8400 7800)" "(6600 5500 5000 4200 6000)" "(8400 6600 7400 7900 9000)" "(6000 7800 8400 7300 6800)" "(6000 6800 7300 8400 7800)" "(8400 10200 9400 8900 7800)" "(6000 6800 7300 8400 7800)" "(6700 6200 5400 7200 7800)" "(4900 4400 3600 5400 6000)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(10200 10800 9700 9200 8400)" "(6800 7900 7300 5500 6300)" "(6500 8300 8900 7800 7300)" "(6000 4200 5000 5500 6600)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(7900 7100 8900 9500 8400)" "(6000 5400 6500 7000 7800)" "(6000 6800 7300 8400 7800)" "(7300 8100 6300 5700 6800)" "(8600 6800 6200 7300 7800)" "(8400 9500 8900 7100 7900)" "(6000 6800 7300 8400 7800)" "(6800 5000 5800 6300 7400)" "(6000 7800 7000 6500 5400)" "(6000 6800 7300 8400 7800)" "(6000 5200 4700 3600 4200)" "(7800 7200 5400 6200 6700)" "(6500 7300 5500 4900 6000)" "(6000 6600 8400 7600 7100)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(8400 9500 8900 7100 7900)" "(6000 6800 7300 8400 7800)" "(6700 7800 8300 9100 7300)" "(6500 7300 5500 4900 6000)" "(6000 6800 7300 8400 7800)" "(8400 9500 8900 7100 7900)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(7800 8400 10200 9400 8900)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(7600 9400 10000 8900 8400)" "(8400 9500 8900 7100 7900)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(8400 7900 6800 7400 9200)" "(6000 6800 7300 8400 7800)" "(5500 4900 6000 6500 7300)" "(7600 9400 10000 8900 8400)" "(7800 8600 9100 10200 9600)" "(5700 5200 4400 6200 6800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(7800 6700 7300 9100 8300)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "(6000 6800 7300 8400 7800)" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 2" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 454 726) (om-make-point 223 70) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (10200) (9400) (8900) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (9100) (8300) (7800) (6700))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (7300) (6200) (6800) (8600))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (6300) (5800) (5000) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (7300) (7800) (8600) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6000) (5500) (4400) (5000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8600) (9200) (8100) (7600) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5400) (6500) (7000) (7800) (6000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7900) (8400) (9200) (7400) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6200) (4400) (5200) (5700))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (7900) (6800) (7400) (9200))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6000) (7800) (8400) (7300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5400) (6500) (7000) (7800) (6000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (7100) (6500) (4700) (5500))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6000) (5500) (4400) (5000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (7100) (6500) (4700) (5500))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (7800) (7000) (6500) (5400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (5200) (4700) (3600) (4200))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5700) (5200) (4400) (6200) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (7300) (7900) (9700) (8900))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9600) (10200) (9100) (8600) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (6700) (4900) (5700) (6200))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (4200) (5000) (5500) (6600))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (6000) (6800) (7300) (8400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (5500) (7300) (7900) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (5500) (4400) (5000) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600) (5500) (5000) (4200) (6000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600) (5500) (5000) (4200) (6000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (6600) (7400) (7900) (9000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (7800) (8400) (7300) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (10200) (9400) (8900) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6200) (5400) (7200) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4900) (4400) (3600) (5400) (6000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((10200) (10800) (9700) (9200) (8400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7900) (7300) (5500) (6300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500) (8300) (8900) (7800) (7300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (4200) (5000) (5500) (6600))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7900) (7100) (8900) (9500) (8400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (5400) (6500) (7000) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (8100) (6300) (5700) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8600) (6800) (6200) (7300) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (9500) (8900) (7100) (7900))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (5000) (5800) (6300) (7400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (7800) (7000) (6500) (5400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (5200) (4700) (3600) (4200))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (7200) (5400) (6200) (6700))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500) (7300) (5500) (4900) (6000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6600) (8400) (7600) (7100))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (9500) (8900) (7100) (7900))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (7800) (8300) (9100) (7300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500) (7300) (5500) (4900) (6000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (9500) (8900) (7100) (7900))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (8400) (10200) (9400) (8900))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7600) (9400) (10000) (8900) (8400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (9500) (8900) (7100) (7900))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (7900) (6800) (7400) (9200))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5500) (4900) (6000) (6500) (7300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7600) (9400) (10000) (8900) (8400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (8600) (9100) (10200) (9600))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5700) (5200) (4400) (6200) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (6700) (7300) (9100) (8300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 500 288) (om-make-point 227 102) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "calculate sequence" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "row forms" nil) (om-load-inputfun (quote input-funbox) "" "results of prob" nil))) (om-make-point 596 645) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 770 279) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 732 298) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 576 538) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 459 363) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 572 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 598 453) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 735 179) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "results of prob" 1 (om-make-point 387 43) "" "results of prob" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "row forms" 0 (om-make-point 232 49) "" "row forms" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 576 635) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 453 631) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((6 0 1 0 nil 0) (0 0 1 1 nil 0) (5 0 2 0 nil 0) (8 0 3 0 nil 0) (8 0 4 0 nil 0) (1 0 5 0 nil 0) (3 0 5 1 nil 0) (4 0 5 2 nil 0) (7 0 6 0 nil 0) (2 1 9 0 nil 0) (2 0 10 0 nil 0))) 1 "calculate sequence" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 272 30) (quote "if 1 then original else random permutation") "" (om-make-point 1166 581) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 9" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 120 278) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 118 346) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "prob of change" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "probs" nil))) (om-make-point 1071 570) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 223 354) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 208 223) (om-make-point 22 30) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 139 230) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOIX" (quote alea::choix) (quote ((om-load-inputfun (quote input-funbox) "first choice" "X1" 1) (om-load-inputfun (quote input-funbox) "second choice" "X2" 2) (om-load-inputfun (quote input-funbox) "probability" "PX1" 0.5))) (om-make-point 178 261) (om-make-point 138 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 220 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "probs" 0 (om-make-point 227 81) "" "probs" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 299 448) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 199 448) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (4 0 3 2 nil 0) (5 0 4 0 nil 0) (0 1 6 0 nil 0) (0 0 7 0 nil 0))) 1 "prob of change" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE 2" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 1025 429) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 1103 382) (om-make-point 45 30) 0.95 "0.95" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 1049 382) (om-make-point 45 30) 0.25 "0.25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 0))) (om-make-point 1079 498) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 1151 464) (om-make-point 30 37) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 1046 268) (om-make-point 41 30) 125 "125" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SAMPLE" (quote om-sample) (quote ((om-load-inputfun (quote input-funbox) "object to resample" "SELF" nil) (om-load-inputfun (quote input-funbox) "number of samples (int) or sample rate (float)" "SAMPLE-RATE" 1))) (om-make-point 987 316) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 978 122) (om-make-point 132 100) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-9 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 122 123 124 125 126 127 128 129 131 132 134 135 136 137 139 141 143 145 147 149 151 153 155)) (quote (99 99 -11 99 -10 98 95 99 94 99 94 97 94 96 94 -3 95 0 95 7 92 11 90 13 88 30 87 26 85 26 84 31 82 26 80 27 78 28 76 32 75 31 72 29 71 29 69 31 67 35 66 36 64 39 61 41 60 73 58 71 57 70 56 69 55 68 54 67 52 66 52 66 49 66 49 66 48 33 66 48 66 46 66 46 66 45 65 45 65 44 65 52 42 65 42 46 64 42 40 63 36 37 62 35 61 33 56 31 61 30 65 29 72 28 75 55 27 53 25 52 24 51 24 49 23 48 22 82 21 21 43 19 96 19 97 18 36 98 17 16 31 15 29 15 13 13 12 16 13 10 7 5)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 500 288) (om-make-point 227 102) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "P-R-I-RI" (om-load-patch-abs1 "P-R-I-RI" (quote ((let ((box (om-load-boxout "output 4" 3 (om-make-point 970 574) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "chord-seq" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 623 581) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "chord-seq" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "I-rot-tcomb" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 573 272) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxwithed1 (quote box-with-win) "t-rot" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 172 204) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxcall (quote abstraction) "I" (om-load-patch-abs1 "I" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 214 292) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 184 41) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 303 138) (om-make-point 22 30) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 207 140) (om-make-point 49 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 136 203) (om-make-point 99 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (1 0 4 0 nil 0) (3 0 4 1 nil 0) (2 0 5 0 nil 0) (4 0 5 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 120 151) nil nil nil "I"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 315 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 229 274) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 295 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 195 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 0 0 nil 0) (1 0 0 1 nil 0) (3 0 1 0 nil 0) (0 0 2 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "t-rot" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 58 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 253 306) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 304 409) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 193 401) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 0 1 nil 0) (4 0 1 0 nil 0) (0 0 2 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "i-rot-tcomb" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "midics>chord-seq-list 4" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "grouped-list-of-midics" nil))) (om-make-point 591 445) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 503 167) (om-make-point 34 30) (list 50) "(50)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 413 167) (om-make-point 51 30) (list 250) "(250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 331 164) (om-make-point 62 30) (list 0 250) "(0 250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 386 433) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 180 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 50)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 198 210) (om-make-point 376 83) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500 6500) (6200) (7300 7000 5900) (6900 7200) (6800 7600 6700 7800))) :lonset (quote (0 4000 8000 12000 16000 20000)) :ldur (quote ((4000 4000) (4000) (4000 4000 4000) (4000 4000) (4000 4000 4000 4000))) :lvel (quote ((50 50) (50) (50 50 50) (50 50) (50 50 50 50))) :loffset (quote ((0 0) (0) (0 0 0) (0 0) (0 0 0 0))) :lchan (quote ((1 1) (1) (1 1 1) (1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0 0 0) (0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "grouped-list-of-midics" 0 (om-make-point 5 45) "" "grouped-list-of-midics" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 433 537) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 333 537) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 3 0 nil 0) (6 0 4 0 nil 0) (4 0 5 1 nil 0) (2 0 5 2 nil 0) (1 0 5 3 nil 0) (0 0 5 4 nil 0) (3 1 7 0 nil 0) (3 0 8 0 nil 0))) 1 "midics>chord-seq-list" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "RI-rot-tcomb" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 918 262) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxwithed1 (quote box-with-win) "t-rot" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 172 204) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxcall (quote abstraction) "RI" (om-load-patch-abs1 "RI" (quote ((let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 186 172) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 146 235) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 159 39) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "I" (om-load-patch-abs1 "I" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 214 292) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 184 41) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 303 138) (om-make-point 22 30) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 207 140) (om-make-point 49 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 136 203) (om-make-point 99 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (1 0 4 0 nil 0) (3 0 4 1 nil 0) (2 0 5 0 nil 0) (4 0 5 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 77 133) (om-make-point 83 67) nil nil "I"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 4 0 nil 0) (2 0 4 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 146 162) nil nil nil "RI"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 315 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 229 274) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 295 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 195 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 0 0 nil 0) (1 0 0 1 nil 0) (3 0 1 0 nil 0) (0 0 2 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "t-rot" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 58 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 253 306) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 304 409) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 193 401) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 0 1 nil 0) (4 0 1 0 nil 0) (0 0 2 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "ri-rot-tcomb" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "midics>chord-seq-list 3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "grouped-list-of-midics" nil))) (om-make-point 936 435) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 503 167) (om-make-point 34 30) (list 50) "(50)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 413 167) (om-make-point 51 30) (list 250) "(250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 331 164) (om-make-point 62 30) (list 0 250) "(0 250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 386 433) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 180 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 50)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 198 210) (om-make-point 376 83) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500 6500) (6200) (7300 7000 5900) (6900 7200) (6800 7600 6700 7800))) :lonset (quote (0 4000 8000 12000 16000 20000)) :ldur (quote ((4000 4000) (4000) (4000 4000 4000) (4000 4000) (4000 4000 4000 4000))) :lvel (quote ((50 50) (50) (50 50 50) (50 50) (50 50 50 50))) :loffset (quote ((0 0) (0) (0 0 0) (0 0) (0 0 0 0))) :lchan (quote ((1 1) (1) (1 1 1) (1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0 0 0) (0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "grouped-list-of-midics" 0 (om-make-point 5 45) "" "grouped-list-of-midics" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 433 537) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 333 537) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 3 0 nil 0) (6 0 4 0 nil 0) (4 0 5 1 nil 0) (2 0 5 2 nil 0) (1 0 5 3 nil 0) (0 0 5 4 nil 0) (3 1 7 0 nil 0) (3 0 8 0 nil 0))) 1 "midics>chord-seq-list" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 4" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 994 353) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 1030 327) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 649 363) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 695 333) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 321 571) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "chord-seq" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "R-rot-tcomb" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 299 309) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxwithed1 (quote box-with-win) "t-rot" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 172 204) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxcall (quote abstraction) "R" (om-load-patch-abs1 "R" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 226 268) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 165 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 168 50) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "T" (om-load-patch-abs1 "T" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 153 254) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 113 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 190 48) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 93 129) nil nil nil "T"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (4 0 1 0 nil 0) (3 0 4 0 nil 0) (2 0 4 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 134 186) nil nil nil "R"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 315 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 229 274) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 295 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 195 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 0 0 nil 0) (1 0 0 1 nil 0) (3 0 1 0 nil 0) (0 0 2 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "t-rot" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 58 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 253 306) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 304 409) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 193 401) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 0 1 nil 0) (4 0 1 0 nil 0) (0 0 2 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "r-rot-tcomb" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "midics>chord-seq-list 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "grouped-list-of-midics" nil))) (om-make-point 316 482) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 503 167) (om-make-point 34 30) (list 50) "(50)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 413 167) (om-make-point 51 30) (list 250) "(250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 331 164) (om-make-point 62 30) (list 0 250) "(0 250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 386 433) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 180 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 50)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 198 210) (om-make-point 376 83) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500 6500) (6200) (7300 7000 5900) (6900 7200) (6800 7600 6700 7800))) :lonset (quote (0 4000 8000 12000 16000 20000)) :ldur (quote ((4000 4000) (4000) (4000 4000 4000) (4000 4000) (4000 4000 4000 4000))) :lvel (quote ((50 50) (50) (50 50 50) (50 50) (50 50 50 50))) :loffset (quote ((0 0) (0) (0 0 0) (0 0) (0 0 0 0))) :lchan (quote ((1 1) (1) (1 1 1) (1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0 0 0) (0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "grouped-list-of-midics" 0 (om-make-point 5 45) "" "grouped-list-of-midics" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 433 537) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 333 537) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 3 0 nil 0) (6 0 4 0 nil 0) (4 0 5 1 nil 0) (2 0 5 2 nil 0) (1 0 5 3 nil 0) (0 0 5 4 nil 0) (3 1 7 0 nil 0) (3 0 8 0 nil 0))) 1 "midics>chord-seq-list" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 374 400) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 420 370) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 77 566) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "chord-seq" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "t-rot-tcomb" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 27 298) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxwithed1 (quote box-with-win) "t-rot" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "All-rotations" nil))) (om-make-point 172 204) (om-make-point 130 59) nil nil (list (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 315 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 229 274) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "T" (om-load-patch-abs1 "T" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 153 254) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 113 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval-series" 1 (om-make-point 190 48) "" "interval-series" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "starting-note" nil) (om-load-inputfun (quote input-funbox) "" "interval-series" nil))) (om-make-point 159 164) (om-make-point 98 67) (list (list 6900 7100 7000 7300 7400 7900 7500)) nil "T"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 295 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 195 368) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (2 0 1 0 nil 0) (4 0 2 0 nil 0) (0 0 2 1 nil 0) (1 1 5 0 nil 0) (1 0 6 0 nil 0))) 1 "t-rot" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 58 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 253 306) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "All-rotations" 1 (om-make-point 253 47) "" "All-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "starting-note" 0 (om-make-point 5 45) "" "starting-note" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 304 409) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 193 401) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 0 1 nil 0) (4 0 1 0 nil 0) (0 0 2 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "t-rot-tcomb" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "midics>chord-seq-list" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "grouped-list-of-midics" nil))) (om-make-point 45 471) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 503 167) (om-make-point 34 30) (list 50) "(50)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 413 167) (om-make-point 51 30) (list 250) "(250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 331 164) (om-make-point 62 30) (list 0 250) "(0 250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 386 433) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 180 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 50)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 198 210) (om-make-point 376 83) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500 6500) (6200) (7300 7000 5900) (6900 7200) (6800 7600 6700 7800))) :lonset (quote (0 4000 8000 12000 16000 20000)) :ldur (quote ((4000 4000) (4000) (4000 4000 4000) (4000 4000) (4000 4000 4000 4000))) :lvel (quote ((50 50) (50) (50 50 50) (50 50) (50 50 50 50))) :loffset (quote ((0 0) (0) (0 0 0) (0 0) (0 0 0 0))) :lchan (quote ((1 1) (1) (1 1 1) (1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0 0 0) (0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "grouped-list-of-midics" 0 (om-make-point 5 45) "" "grouped-list-of-midics" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 433 537) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 333 537) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 3 0 nil 0) (6 0 4 0 nil 0) (4 0 5 1 nil 0) (2 0 5 2 nil 0) (1 0 5 3 nil 0) (0 0 5 4 nil 0) (3 1 7 0 nil 0) (3 0 8 0 nil 0))) 1 "midics>chord-seq-list" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 103 389) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 149 359) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "rot->intervals" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "pitch-rotations" nil))) (om-make-point 198 222) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 265 234) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 200 168) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 108 89) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pitch-rotations" 0 (om-make-point 5 45) "" "pitch-rotations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 297 322) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 197 322) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "rot->intervals" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "all-rotations" (om-load-patch-abs1 "all-rotations" (quote ((let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "give-all-list-rotations" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "list" nil) (om-load-inputfun (quote input-funbox) "" "list-ind" nil))) (om-make-point 39 343) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "ROTATE" (quote rotate) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil) (om-load-inputfun (quote input-funbox) "nth" "NTH" 1))) (om-make-point 94 119) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 124 214) (om-make-point 71 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 211 114) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "list-ind" 1 (om-make-point 262 51) "" "list-ind" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "list" 0 (om-make-point 5 45) "" "list" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 181 319) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 81 319) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 0 0 nil 0) (2 0 0 1 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (1 1 5 0 nil 0) (1 0 6 0 nil 0))) 1 "give-all-list-rotations" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 113 241) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 130 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 173 167) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 209 123) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 261 452) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "returns-all-rotations" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 1 nil 0) (0 0 3 0 nil 0) (3 0 4 0 nil 0) (5 0 4 1 nil 0) (1 0 6 0 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 158 107) nil (list (list (list 6700 6900 6800 7100 7200 7700 7300) (list 6900 6800 7100 7200 7700 7300 6700) (list 6800 7100 7200 7700 7300 6700 6900) (list 7100 7200 7700 7300 6700 6900 6800) (list 7200 7700 7300 6700 6900 6800 7100) (list 7700 7300 6700 6900 6800 7100 7200) (list 7300 6700 6900 6800 7100 7200 7700))) nil "all-rotations"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chord" 0 (om-make-point 5 45) "" "chord" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (3 0 1 0 nil 0) (22 0 2 0 nil 0) (20 0 2 1 nil 0) (8 0 3 0 nil 0) (22 0 4 0 nil 0) (20 0 4 1 nil 0) (6 0 5 0 nil 0) (4 0 6 0 nil 0) (7 0 6 1 nil 0) (2 0 8 0 nil 0) (9 0 8 1 nil 0) (12 0 10 0 nil 0) (22 0 11 0 nil 0) (20 0 11 1 nil 0) (13 0 12 0 nil 0) (11 0 13 0 nil 0) (14 0 13 1 nil 0) (17 0 15 0 nil 0) (22 0 16 0 nil 0) (20 0 16 1 nil 0) (18 0 17 0 nil 0) (16 0 18 0 nil 0) (19 0 18 1 nil 0) (21 0 20 0 nil 0) (22 0 21 0 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "chord" nil))) (om-make-point 11 164) (om-make-point 295 67) (list (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (7300) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6500) (7600) (7000) (5200))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (7100) (6500) (4700) (5500))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (5400) (3600) (4400) (4900))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (4200) (5000) (5500) (6600))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7600) (8100) (9200) (8600))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7300) (8400) (7800) (6000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7900) (7300) (5500) (6300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6200) (4400) (5200) (5700))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (5000) (5800) (6300) (7400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (8100) (8600) (9700) (9100))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7800) (8900) (8300) (6500))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (8400) (7800) (6000) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (6700) (4900) (5700) (6200))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (5500) (6300) (6800) (7900))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (9200) (9700) (10800) (10200))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (8900) (10000) (9400) (7600))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (9500) (8900) (7100) (7900))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (7800) (6000) (6800) (7300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (6600) (7400) (7900) (9000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (8600) (9100) (10200) (9600))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (8300) (9400) (8800) (7000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (8900) (8300) (6500) (7300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (7200) (5400) (6200) (6700))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (6000) (6800) (7300) (8400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (8400) (7300) (6800) (6000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5200) (7000) (7600) (6500) (6000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5500) (4700) (6500) (7100) (6000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4900) (4400) (3600) (5400) (6000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600) (5500) (5000) (4200) (6000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8600) (9200) (8100) (7600) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (7800) (8400) (7300) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (5500) (7300) (7900) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5700) (5200) (4400) (6200) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (6300) (5800) (5000) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9100) (9700) (8600) (8100) (7300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500) (8300) (8900) (7800) (7300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6000) (7800) (8400) (7300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (5700) (4900) (6700) (7300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7900) (6800) (6300) (5500) (7300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((10200) (10800) (9700) (9200) (8400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7600) (9400) (10000) (8900) (8400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7900) (7100) (8900) (9500) (8400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (6800) (6000) (7800) (8400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9000) (7900) (7400) (6600) (8400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9600) (10200) (9100) (8600) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7000) (8800) (9400) (8300) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (6500) (8300) (8900) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6200) (5400) (7200) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (7300) (6800) (6000) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (5200) (4700) (3600) (4200))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (5500) (4400) (5000) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (4900) (5500) (7300) (6500))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6600) (8400) (7600) (7100))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (7800) (7000) (6500) (5400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6000) (5500) (4400) (5000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6300) (5200) (5800) (7600))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (5700) (6300) (8100) (7300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7400) (9200) (8400) (7900))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (8600) (7800) (7300) (6200))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (6500) (6000) (4900) (5500))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (6800) (5700) (6300) (8100))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (6200) (6800) (8600) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (7900) (9700) (8900) (8400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (9100) (8300) (7800) (6700))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (7600) (7100) (6000) (6600))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (7900) (6800) (7400) (9200))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (7300) (7900) (9700) (8900))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (9000) (10800) (10000) (9500))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (10200) (9400) (8900) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (7000) (6500) (5400) (6000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (7300) (6200) (6800) (8600))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (6700) (7300) (9100) (8300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (8400) (10200) (9400) (8900))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (9600) (8800) (8300) (7200))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4200) (3600) (4700) (5200) (6000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (5000) (4400) (5500) (6000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500) (7300) (5500) (4900) (6000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7600) (8400) (6600) (6000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5400) (6500) (7000) (7800) (6000))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5000) (4400) (5500) (6000) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7600) (5800) (5200) (6300) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300) (8100) (6300) (5700) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7900) (8400) (9200) (7400) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (7300) (7800) (8600) (6800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5500) (4900) (6000) (6500) (7300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8100) (6300) (5700) (6800) (7300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (8600) (6800) (6200) (7300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (8900) (9700) (7900) (7300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (7800) (8300) (9100) (7300))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6600) (6000) (7100) (7600) (8400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9200) (7400) (6800) (7900) (8400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8900) (9700) (7900) (7300) (8400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9500) (10000) (10800) (9000) (8400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (8900) (9400) (10200) (8400))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (5400) (6500) (7000) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8600) (6800) (6200) (7300) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8300) (9100) (7300) (6700) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8900) (9400) (10200) (8400) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (8300) (8800) (9600) (7800))) :lonset (quote (0 250 500 750 1000 1250)) :ldur (quote ((250) (250) (250) (250) (250))) :lvel (quote ((50) (50) (50) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) nil "P-R-I-RI"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 359 30) (quote "start with a sequence, start to slowly use other rotations") "" (om-make-point 326 32) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 186 22) (om-make-point 69 77) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6800 7300 8400 7800)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 3 (om-make-point 500 288) (om-make-point 360 603) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((24 1 0 0 nil 0) (4 0 1 0 nil 0) (3 0 2 0 nil 0) (7 1 2 1 nil 0) (2 0 4 0 nil 0) (8 1 5 0 nil 0) (12 0 6 0 nil 0) (5 0 7 1 nil 0) (9 0 8 1 nil 0) (12 0 9 0 nil 0) (13 0 9 1 nil 0) (22 0 11 0 nil 0) (22 1 11 1 nil 0) (22 2 11 2 nil 0) (22 3 11 3 nil 0) (11 0 12 0 nil 0) (17 0 13 0 nil 0) (20 2 14 0 nil 0) (16 0 14 1 nil 0) (15 0 14 2 nil 0) (14 0 17 0 nil 0) (18 0 17 1 nil 0) (21 1 20 0 nil 0) (19 0 20 1 nil 0) (24 1 22 0 nil 0))) nil 7.01))
