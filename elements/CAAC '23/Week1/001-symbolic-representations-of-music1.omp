; OM File Header - Saved 2023/02/08 17:15:29
; (7.01 :patc (om-make-point 10 10) (om-make-point 1587 81) (om-make-point 1366 888) "" 183 0 nil "2023/02/08 17:13:32")
; End File Header
; External resources 
; (list (list (quote :midi) "#P\"../../in-files/Prelude8.mid\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "001-symbolic-representations-of-music1" (quote ((let ((box (om-load-editor-box1 "MULTI-SEQ 2" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 840 699) (om-make-point 277 103) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400 7100 6700) (6400 6700) (7100) (6400 6700 7600) (7900) (7200 6900 6400) (6400 7200 6900) (7600) (7200 6900 6400 8100) (8400) (6400 6600 6900 7500) (6300 6600 6900) (7800) (6900 6300 6600 7100) (6900 7100) (6900 7100) (6700) (6900) (7100) (6700 6400 6900) (6700 6900) (6700 6900) (6700 6900) (6600) (6400) (7900) (7600 7100 6700) (7900) (7400 7100 6700) (7900) (7900) (7700) (7600) (7700) (7400) (7200 6700 6400) (7600) (7600 7200 6700) (7600 7200 6700) (8300 7600 7100) (7600) (7400) (7200) (7400) (7100) (7200 7400) (7200 7400) (7200 7400) (7100) (6900) (8400 8100 7600) (7200) (8400 8100 7600 6900) (6600) (8100 7800 6300) (8400) (7100 6600 6300) (8300) (8100) (7900) (7100 6600 6300 7800) (7900) (7800) (7900) (8100) (7900) (8100) (7800) (7100 7900 6700 6400 8100) (7900 8100) (7900 8100) (7800) (7600) (7900 7600 7100) (8300) (6700) (7900 7600 7400 6400) (8300) (6100) (7900 7600 7300) (8500) (7800) (7600) (7400) (7300) (7400) (7300) (7400) (7600) (7300) (7600) (7300) (7400 7600) (7400 7600) (7400 7600) (7300) (7100) (7800 7400 7100) (7900) (7800) (7600) (7400) (7300) (7100) (6900) (6700) (6900) (6600) (6700 6400) (7100) (7400) (7900) (7800) (7600) (7400) (7300) (7600) (7400) (7300) (7400) (7600) (6600) (6800) (7000) (7000 7100) (7000 7100) (7000 7100) (6800) (7000) (6800) (7000) (7100) (6600) (6700) (6400) (6100) (6200) (6100) (6200) (6400) (6200) (6100) (6200) (6400) (6600) (6400) (6600) (6100 7000 6700) (6600 6700) (6600 6700) (6600 6700) (6600 6700) (6400) (6200 7100) (6400 7300) (7400 7100 6600) (7400 7100 6600) (6500 7100 7400) (7200) (7100) (7400 7700 7100) (7600) (7400) (7100 7400 8000) (7800) (7600) (7600 7200 8100) (8000) (8100) (8300) (8300 7600 8000 8400) (8300 8400) (8300 8400) (7400) (8100) (7200 8100 7600) (8400) (7800) (7900) (8100) (7500) (7600) (7800) (7100) (8100) (7500) (7600) (7800) (7100) (7300) (7500) (7600) (7400) (7200) (7400) (7100 6400 7400) (6400 7100 7400) (7200) (7100) (7200) (7200 6900 6400) (7200 6900 6600) (7100) (6900) (7800) (7200) (7100 7200) (7100 7200) (7100 7200) (7100 7200) (7100 7200) (7100 7200) (7100 7200) (7100 7200) (7100 7200) (7200) (6900) (6700 6400) (6400) (6600) (6700) (6900) (7100) (7300) (7500) (7600) (7800) (7900) (8100) (7900) (7800) (7900) (7600) (7200 6900 6500) (7700) (7200) (7000) (6900) (7000) (7200) (6500) (6700) (6900) (6300) (6600) (6900) (7200) (7100) (6900) (7800) (7600) (7500) (8400) (8200) (8300) (7600 7100 6700) (7500 7100 6600) (7600) (6400 7100 7600) (6900) (6800) (6900) (6900 7100) (6900 7100) (6900 7100) (6800) (6900) (7100) (7600) (7400) (7200) (7400) (7100) (6900 7200 6400) (6400 7200) (7100 6200) (6900 6000) (7100 6200) (5900 6800) (6000 6300 6900) (6300 6900 6000) (6300 6000 6900) (6600 6000 6900) (6600 6900 6000) (6600 6900 6000) (6300 6600 6900) (6600 6300 6900) (6300 6600 6900) (6900 6600 6300) (7200) (7100) (6900) (6700) (6600) (6400) (6300) (6600) (6900) (7200) (7500) (7800) (8100) (8400) (8300) (7500) (7600) (7100 6700) (6400 6900) (6700) (6600 6300 6700) (6600 6700) (6600 6700) (6400) (6600) (6400) (6600) (6800) (6900) (7100) (6500) (6400) (6200) (6000) (6400) (6600) (6800) (6900) (7100) (7200) (7100) (6900) (6700) (6600) (6700) (6900) (6600) (6300) (6000) (5900) (6000) (5700) (5400) (6300) (6400 5900 5600))) :lonset (quote (0 1833 3200 3666 5033 5500 7333 8699 9166 10532 10999 12832 14199 14665 14817 14969 15804 16032 16259 16499 16650 16802 16954 17865 18093 18332 20165 20313 22032 22180 25027 25255 25482 25710 27076 27532 27680 29399 31255 33138 36083 36311 36538 36766 38132 38588 38740 38891 39954 40182 40410 41799 42265 43655 44121 44269 45989 47150 47378 47606 47845 48095 48323 48551 48778 49006 49234 49462 49701 49875 50027 51090 51317 51557 51705 52957 53424 53572 54824 55291 55439 58286 58514 58741 58969 59197 59424 59652 59880 60108 60335 60563 60791 60943 61094 62157 62385 62613 63774 64002 64229 64457 64685 64913 65140 65368 65823 66051 66279 67657 67884 68112 69251 69478 69706 69934 70617 70731 70845 71072 71300 71756 72450 72564 72678 72830 72982 73133 73247 73361 73475 73589 74955 75411 76777 77232 78371 78599 78826 79054 79282 79510 79737 79965 80193 80421 80648 80876 81787 81939 82091 82242 82470 82698 84064 84520 86376 88231 89598 89826 90053 93241 93469 93697 96885 97113 97340 99618 100073 100529 100995 101147 101299 102817 103728 104639 106005 106461 107827 108055 108283 109649 109877 110104 111471 111926 113292 113520 113748 115114 115342 115570 116936 117164 117391 119213 121035 122401 122629 122857 124679 126535 127924 128151 128379 129745 130212 130364 130516 130668 130820 130971 131123 131275 131427 131579 131806 132034 134095 134323 134550 134778 135006 135234 135461 135689 135917 136144 136372 136600 136828 137055 137283 137511 137659 138911 139139 139367 140733 140961 141189 142555 142783 143010 144377 144604 144832 146198 146426 146654 148020 148248 148476 148931 149842 150298 152153 153543 154009 155148 155376 155603 155843 155994 156146 159042 159270 159509 162469 162697 162925 163152 164530 164986 167957 168185 168413 168641 170007 170462 172296 174129 175962 177795 179628 181461 183295 185128 186988 187136 189033 189261 189489 189716 189944 190172 190400 190627 190855 191083 191310 191538 191766 191994 192221 192449 193815 194282 194396 196115 196267 196419 196571 197026 197937 200898 201125 201353 201581 202719 202947 203175 203403 205908 206135 206363 206591 206818 207046 207616 207728 207838 207948 208167 208387 208606 208826 210144 210363 210583 211920 212334 213433 213745 217495)) :ldur (quote ((1784 1784 1784) (1784 1784) (466) (1784 1784 1367) (467) (1783 1783 1783) (1784 1784 1784) (467) (1784 1784 1784 1366) (467) (1784 1784 1784 1784) (1784 1784 1784) (466) (84 1784 1784 84) (84 84) (759 76) (228) (227) (240) (84 1783 83) (84 84) (84 84) (835 76) (228) (239) (1784) (1719 1769 1818) (1670) (1719 1768 1818) (1670) (228) (227) (228) (1366) (456) (1720 1769 1818) (1670) (1708 1758 1807) (1708 1758 1807) (1670 1719 1768) (228) (227) (228) (1366) (456) (83 83) (84 83) (987 76) (228) (228) (1708 1757 1806) (466) (1708 1757 1807 1390) (466) (1719 1768 1818) (1670) (1708 1757 1806) (228) (228) (239) (1708 1757 1806 250) (228) (228) (227) (228) (228) (228) (239) (1708 84 1757 1806 98) (84 84) (987 76) (227) (240) (1720 1769 1818) (1670) (467) (1719 1769 1818 1400) (1670) (467) (1719 1768 1818) (1670) (228) (227) (228) (228) (227) (228) (228) (228) (227) (228) (228) (83 83) (83 83) (987 76) (228) (228) (1063 884 933) (228) (227) (228) (228) (228) (227) (228) (455) (228) (228) (1329 922) (227) (228) (1139) (227) (228) (228) (683) (114) (114) (227) (228) (456) (645) (114) (114) (83 83) (83 83) (76 83) (114) (114) (114) (114) (7287) (456) (1366) (455) (1139) (228) (227) (228) (228) (228) (227) (228) (228) (228) (227) (228) (1822 1822 892) (83 76) (83 83) (84 83) (76 84) (228) (1366 1366) (456 456) (1708 1757 1806) (1708 1757 1806) (1367 1367 1367) (228) (227) (3188 3188 3188) (228) (228) (3188 3188 3188) (228) (227) (1822 1822 2278) (455) (456) (417) (84 1822 3644 76) (84 84) (2353 76) (1822) (911) (1366 1366 1366) (456) (1366) (228) (228) (1366) (228) (227) (1367) (455) (1366) (228) (228) (1366) (228) (228) (1366) (228) (227) (1822) (1731 1731 1731) (1366 1366 1366) (228) (228) (1822) (1708 1757 1806) (1291 1340 1389) (227) (228) (1366) (418) (84 84) (84 84) (83 83) (83 83) (84 83) (84 84) (84 84) (83 83) (76 83) (227) (228) (2012 1833) (228) (227) (228) (228) (228) (227) (228) (228) (227) (228) (228) (228) (227) (228) (228) (1301 1351 1400) (1252) (228) (228) (1366) (228) (228) (1366) (228) (227) (1367) (227) (228) (1366) (228) (228) (1366) (228) (228) (455) (911) (456) (1708 1757 1806) (1291 1757 1807) (417) (911 911 8460) (228) (227) (190) (84 83) (84 84) (2771 76) (228) (190) (4972) (228) (228) (227) (1378) (456) (1821 2922 2922) (228 228) (228 228) (228 228) (1366 1366) (455 455) (1784 1784 1784) (1783 1783 1783) (1784 1784 1784) (1784 1784 1784) (1784 1784 1784) (1784 1784 1784) (1784 1784 1784) (1783 1783 1783) (1784 1784 1784) (1682 1731 1780) (1897) (228) (228) (227) (228) (228) (228) (227) (228) (228) (227) (228) (228) (228) (227) (228) (1366) (467 418) (1833 114) (1670) (84 1822 76) (84 84) (76 84) (455) (911) (2961) (227) (228) (228) (1138) (228) (228) (228) (2505) (227) (228) (228) (227) (228) (570) (112) (110) (110) (219) (220) (219) (220) (4573) (219) (220) (1337) (414) (1411) (312) (3750 3750 3750))) :lvel (quote ((56 56 56) (56 56) (64) (56 56 64) (64) (56 56 56) (56 56 56) (64) (56 56 56 64) (64) (56 56 56 64) (56 56 56) (64) (45 56 56 74) (58 51) (76 52) (64) (64) (64) (42 56 72) (51 47) (59 55) (76 73) (64) (64) (64) (56 56 56) (56) (56 56 56) (56) (64) (64) (64) (64) (64) (56 56 56) (56) (56 56 56) (56 56 56) (56 56 56) (64) (64) (64) (64) (64) (45 72) (58 51) (79 86) (64) (64) (56 56 56) (64) (56 56 56 64) (64) (56 56 64) (56) (56 56 56) (64) (64) (64) (56 56 56 64) (64) (64) (64) (64) (64) (64) (64) (56 45 56 56 74) (58 51) (64 77) (64) (64) (56 56 56) (64) (64) (56 56 56 64) (56) (64) (56 56 56) (56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (45 73) (58 51) (64 79) (64) (64) (64 56 56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 56) (64) (64) (64) (64) (64) (64) (64) (64) (56) (64) (64) (64) (64) (64) (56) (44 43) (47 46) (70 48) (56) (57) (72) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 64 64) (43 80) (49 46) (55 52) (63 57) (64) (64 64) (64 64) (60 56 56) (64 56 56) (64 64 64) (64) (64) (56 56 56) (64) (64) (56 56 56) (64) (64) (56 56 56) (64) (64) (64) (45 64 64 72) (55 50) (64 86) (64) (64) (64 64 64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56 56 56) (64 64 64) (64) (64) (64) (64 56 56) (64 56 56) (64) (64) (64) (64) (80 77) (43 42) (45 44) (48 47) (50 49) (52 51) (55 54) (57 56) (59 58) (70) (64) (64 56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 64 64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 56 56) (56 56 56) (64) (64 64 56) (64) (64) (60) (47 72) (56 51) (64 50) (64) (64) (64) (64) (64) (64) (64) (64) (64 64 64) (64 64) (64 64) (64 64) (64 64) (64 64) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 64) (64 72) (64) (44 64 74) (52 48) (73 56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56) (64) (64) (64) (64) (64) (64) (64 56 56))) :loffset (quote ((0 0 0) (0 0) (0) (0 0 0) (0) (0 0 0) (0 0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0) (0) (76 0 0 0) (76 0) (76 0) (0) (0) (0) (75 0 0) (76 0) (76 0) (76 0) (0) (0) (0) (99 49 0) (0) (99 50 0) (0) (0) (0) (0) (0) (0) (98 49 0) (0) (99 49 0) (99 49 0) (98 49 0) (0) (0) (0) (0) (0) (76 0) (75 0) (76 0) (0) (0) (98 49 0) (0) (99 50 0 0) (0) (99 50 0) (0) (98 49 0) (0) (0) (0) (98 49 0 0) (0) (0) (0) (0) (0) (0) (0) (98 98 49 0 0) (76 0) (76 0) (0) (0) (98 49 0) (0) (0) (99 49 0 0) (0) (0) (99 50 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (76 0) (76 0) (76 0) (0) (0) (98 49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (76 0) (76 0) (75 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (76 0) (76 0) (75 0) (76 0) (0) (0 0) (0 0) (98 49 0) (98 49 0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0) (76 0 0 0) (76 0) (76 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0) (0) (98 49 0) (98 49 0) (0) (0) (0) (0) (76 0) (76 0) (76 0) (76 0) (75 0) (76 0) (76 0) (76 0) (76 0) (0) (0) (49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (99 49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (98 49 0) (99 50 0) (0) (0 0 0) (0) (0) (0) (75 0) (76 0) (76 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (98 49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (76 0 0) (76 0) (76 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0))) :lchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5900) (5500) (5200) (4700) (5500 5000 4700) (5900) (5500 5000 4700) (5900) (5500 5200 4800) (6000) (5500) (5200) (4800) (4400) (5200 4700 4400) (5600) (5200 4700 4400) (5600) (5200 4800 4500) (5700) (5800) (6600 6100 5800) (6600 6100 5800) (6600 6200 5900) (6600 6200 5900) (6600 6200 5900) (6200 5900 5200) (6100 5900 5200) (6100 5900 5200) (6100 5800 5200) (5900 5400 5000) (5200 5900) (5400) (5400 4200) (5400 4200) (4700 5400 5900) (4700) (5000) (5400) (4400) (4700) (4500) (4400) (5000) (4800) (4700) (5300) (5200) (5300) (5000) (4800) (4700) (4500) (4700) (4800) (4500) (4700) (4800) (4100) (5300) (5200) (5000) (5200) (5000) (5200) (4000) (4500) (6000) (5400) (5500) (5700) (5100) (5200) (5400) (4700) (5700) (5100) (5200) (5400) (4300) (4400) (5900) (5600) (5200) (4500) (6000) (5700) (5400) (5700 5400 5100) (5900 5400 5000) (5900 5400 5000) (5900 5500 5200) (5900 5500 5200) (5900 5500 5200) (5300 4800 4500) (5700) (5900 5400 4500) (5500 5200 4700) (5900) (5700 5400 4700) (5900) (4800 6000) (6400 6000) (6400 6000) (5600 5900 6400) (5600 5900 6400) (5600 5900 6400) (6000 5700) (5300) (5300) (5400) (5500) (5400) (5200) (5400) (5500) (5700) (5400) (5500) (5700) (5100) (5200) (5100) (4900) (5100) (5200) (5400) (5100) (5200) (5400) (4800) (5000) (4800) (4700) (4800) (4700) (4500) (4700) (4800) (4500) (4700) (4800) (3900) (4000 5200) (4700 5500 5200) (4700 5700 5400) (5900 5600 5200) (6200) (5900 5600 5200) (6200) (5900 5600 5200) (6200) (5200 5700) (5700 5200) (5200 5700) (5200 5400) (5200 5400) (5200) (4700 4000 5200))) :lonset (quote (19584 20040 21406 21861 23695 23843 25562 25710 27429 27577 30652 31107 32473 32929 34762 34910 36629 36777 38497 38645 54938 56771 58627 60483 62339 64195 66051 67907 69763 71619 73475 75331 77164 78997 80830 82664 85852 86307 87674 88129 91089 91317 91545 91773 94961 95188 95416 95872 96327 96782 97238 97466 97693 97921 98149 98377 98604 98832 99060 100198 100426 100654 100882 102248 102703 104070 104525 107713 108169 109535 109763 109990 111357 111585 111812 113179 113634 115000 115228 115456 117278 118644 119099 120466 120921 124109 124565 125931 126398 128254 130110 131966 133822 135678 137534 137682 143033 150320 150468 152188 152336 154055 155888 157721 159554 161388 163221 165054 166887 168720 170554 173514 173742 173969 174197 174880 175108 175336 175563 175791 176019 178979 179207 179435 179662 180346 180573 180801 181029 181257 181484 184445 184672 184900 185128 185356 185583 185811 186039 186266 186494 186722 186950 193781 194248 196081 197914 198063 199782 199930 201649 201797 203516 205350 207183 208969 210737 212480 213862 217613)) :ldur (quote ((456) (1366) (455) (1784) (1720 1769 1818) (1670) (1719 1769 1818) (1670) (1719 1768 1818) (1746) (455) (1366) (456) (1784) (1719 1769 1818) (1670) (1719 1768 1818) (1670) (1720 1769 1818) (1670) (1784) (1708 1757 1807) (1708 1757 1807) (1708 1757 1807) (1708 1757 1807) (1708 1757 1807) (1708 1757 1807) (1708 1758 1807) (1708 1758 1807) (1708 1758 1807) (1708 1758 1807) (1784 1784) (1784) (1784 1784) (1784 1784) (1783 1783 1783) (455) (1367) (455) (2960) (228) (228) (228) (3188) (227) (228) (456) (455) (455) (456) (228) (227) (228) (228) (228) (227) (228) (228) (1138) (228) (228) (228) (1366) (455) (1367) (455) (1822) (456) (1366) (228) (227) (1367) (228) (227) (1367) (455) (1366) (228) (228) (1822) (1366) (455) (1367) (455) (1822) (456) (1366) (418) (1708 1758 1807) (1707 1757 1806) (1708 1757 1806) (1708 1757 1806) (1708 1757 1806) (1708 1757 1806) (1720 1769 1818) (1670) (1822 1822 1822) (1719 1768 1818) (1670) (1720 1769 1818) (1670) (1784 1784) (1784 1784) (1784 1784) (1784 1784 1784) (1783 1783 1783) (1784 1784 1784) (1784 1784) (1784) (1784) (2960) (228) (227) (228) (683) (228) (228) (227) (228) (228) (2960) (228) (228) (227) (684) (227) (228) (228) (228) (227) (2961) (227) (228) (228) (228) (227) (228) (228) (227) (228) (228) (228) (1821) (467 418) (1784 1784 1784) (1784 1784 1784) (1719 1768 1818) (1669) (1720 1769 1818) (1670) (1719 1769 1818) (1670) (1784 1784) (1783 1783) (1738 1738) (1720 1720) (1701 1701) (1349) (3751 3751 3751))) :lvel (quote ((64) (64) (64) (64) (56 56 56) (56) (56 56 56) (56) (56 56 56) (56) (64) (64) (64) (64) (56 56 56) (56) (56 56 56) (56) (56 56 56) (56) (64) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56) (56) (56 56) (56 56) (56 56 56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56 56 64) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56) (56 56 56) (56 56 56) (56) (56 56 56) (56) (56 56) (56 56) (56 56) (56 56 56) (56 56 56) (56 56 56) (56 56) (56) (56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56 56) (56 56 56) (56 56 56) (56 56 56) (56) (56 56 56) (56) (56 56 56) (56) (56 56) (56 56) (56 56) (56 56) (56 56) (56) (56 56 56))) :loffset (quote ((0) (0) (0) (0) (98 49 0) (0) (99 49 0) (0) (99 50 0) (0) (0) (0) (0) (0) (99 49 0) (0) (99 50 0) (0) (98 49 0) (0) (0) (99 50 0) (99 50 0) (99 50 0) (99 50 0) (99 50 0) (99 50 0) (99 49 0) (99 49 0) (99 49 0) (99 49 0) (0 0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (99 49 0) (99 49 0) (98 49 0) (98 49 0) (98 49 0) (98 49 0) (98 49 0) (0) (0 0 0) (99 50 0) (0) (98 49 0) (0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0) (0 0 0) (99 50 0) (0) (98 49 0) (0) (99 49 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0 0))) :lchan (quote ((2) (2) (2) (2) (2 2 2) (2) (2 2 2) (2) (2 2 2) (2) (2) (2) (2) (2) (2 2 2) (2) (2 2 2) (2) (2 2 2) (2) (2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2) (2) (2 2) (2 2) (2 2 2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2) (2 2 2) (2 2 2) (2) (2 2 2) (2) (2 2) (2 2) (2 2) (2 2 2) (2 2 2) (2 2 2) (2 2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2 2) (2 2 2) (2 2 2) (2 2 2) (2) (2 2 2) (2) (2 2 2) (2) (2 2) (2 2) (2 2) (2 2) (2 2) (2) (2 2 2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0 0 0) (0 0 0) (0) (0 0 0) (0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote (((1) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 10" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 958 649) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1070 548) (om-make-point 121 62) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5900) (5500) (5200) (4700) (5500 5000 4700) (5900) (5500 5000 4700) (5900) (5500 5200 4800) (6000) (5500) (5200) (4800) (4400) (5200 4700 4400) (5600) (5200 4700 4400) (5600) (5200 4800 4500) (5700) (5800) (6600 6100 5800) (6600 6100 5800) (6600 6200 5900) (6600 6200 5900) (6600 6200 5900) (6200 5900 5200) (6100 5900 5200) (6100 5900 5200) (6100 5800 5200) (5900 5400 5000) (5200 5900) (5400) (5400 4200) (5400 4200) (4700 5400 5900) (4700) (5000) (5400) (4400) (4700) (4500) (4400) (5000) (4800) (4700) (5300) (5200) (5300) (5000) (4800) (4700) (4500) (4700) (4800) (4500) (4700) (4800) (4100) (5300) (5200) (5000) (5200) (5000) (5200) (4000) (4500) (6000) (5400) (5500) (5700) (5100) (5200) (5400) (4700) (5700) (5100) (5200) (5400) (4300) (4400) (5900) (5600) (5200) (4500) (6000) (5700) (5400) (5700 5400 5100) (5900 5400 5000) (5900 5400 5000) (5900 5500 5200) (5900 5500 5200) (5900 5500 5200) (5300 4800 4500) (5700) (5900 5400 4500) (5500 5200 4700) (5900) (5700 5400 4700) (5900) (4800 6000) (6400 6000) (6400 6000) (5600 5900 6400) (5600 5900 6400) (5600 5900 6400) (6000 5700) (5300) (5300) (5400) (5500) (5400) (5200) (5400) (5500) (5700) (5400) (5500) (5700) (5100) (5200) (5100) (4900) (5100) (5200) (5400) (5100) (5200) (5400) (4800) (5000) (4800) (4700) (4800) (4700) (4500) (4700) (4800) (4500) (4700) (4800) (3900) (4000 5200) (4700 5500 5200) (4700 5700 5400) (5900 5600 5200) (6200) (5900 5600 5200) (6200) (5900 5600 5200) (6200) (5200 5700) (5700 5200) (5200 5700) (5200 5400) (5200 5400) (5200) (4700 4000 5200))) :lonset (quote (19584 20040 21406 21861 23695 23843 25562 25710 27429 27577 30652 31107 32473 32929 34762 34910 36629 36777 38497 38645 54938 56771 58627 60483 62339 64195 66051 67907 69763 71619 73475 75331 77164 78997 80830 82664 85852 86307 87674 88129 91089 91317 91545 91773 94961 95188 95416 95872 96327 96782 97238 97466 97693 97921 98149 98377 98604 98832 99060 100198 100426 100654 100882 102248 102703 104070 104525 107713 108169 109535 109763 109990 111357 111585 111812 113179 113634 115000 115228 115456 117278 118644 119099 120466 120921 124109 124565 125931 126398 128254 130110 131966 133822 135678 137534 137682 143033 150320 150468 152188 152336 154055 155888 157721 159554 161388 163221 165054 166887 168720 170554 173514 173742 173969 174197 174880 175108 175336 175563 175791 176019 178979 179207 179435 179662 180346 180573 180801 181029 181257 181484 184445 184672 184900 185128 185356 185583 185811 186039 186266 186494 186722 186950 193781 194248 196081 197914 198063 199782 199930 201649 201797 203516 205350 207183 208969 210737 212480 213862 217613)) :ldur (quote ((456) (1366) (455) (1784) (1720 1769 1818) (1670) (1719 1769 1818) (1670) (1719 1768 1818) (1746) (455) (1366) (456) (1784) (1719 1769 1818) (1670) (1719 1768 1818) (1670) (1720 1769 1818) (1670) (1784) (1708 1757 1807) (1708 1757 1807) (1708 1757 1807) (1708 1757 1807) (1708 1757 1807) (1708 1757 1807) (1708 1758 1807) (1708 1758 1807) (1708 1758 1807) (1708 1758 1807) (1784 1784) (1784) (1784 1784) (1784 1784) (1783 1783 1783) (455) (1367) (455) (2960) (228) (228) (228) (3188) (227) (228) (456) (455) (455) (456) (228) (227) (228) (228) (228) (227) (228) (228) (1138) (228) (228) (228) (1366) (455) (1367) (455) (1822) (456) (1366) (228) (227) (1367) (228) (227) (1367) (455) (1366) (228) (228) (1822) (1366) (455) (1367) (455) (1822) (456) (1366) (418) (1708 1758 1807) (1707 1757 1806) (1708 1757 1806) (1708 1757 1806) (1708 1757 1806) (1708 1757 1806) (1720 1769 1818) (1670) (1822 1822 1822) (1719 1768 1818) (1670) (1720 1769 1818) (1670) (1784 1784) (1784 1784) (1784 1784) (1784 1784 1784) (1783 1783 1783) (1784 1784 1784) (1784 1784) (1784) (1784) (2960) (228) (227) (228) (683) (228) (228) (227) (228) (228) (2960) (228) (228) (227) (684) (227) (228) (228) (228) (227) (2961) (227) (228) (228) (228) (227) (228) (228) (227) (228) (228) (228) (1821) (467 418) (1784 1784 1784) (1784 1784 1784) (1719 1768 1818) (1669) (1720 1769 1818) (1670) (1719 1769 1818) (1670) (1784 1784) (1783 1783) (1738 1738) (1720 1720) (1701 1701) (1349) (3751 3751 3751))) :lvel (quote ((64) (64) (64) (64) (56 56 56) (56) (56 56 56) (56) (56 56 56) (56) (64) (64) (64) (64) (56 56 56) (56) (56 56 56) (56) (56 56 56) (56) (64) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56) (56) (56 56) (56 56) (56 56 56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56 56 64) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56) (56 56 56) (56 56 56) (56) (56 56 56) (56) (56 56) (56 56) (56 56) (56 56 56) (56 56 56) (56 56 56) (56 56) (56) (56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56 56) (56 56 56) (56 56 56) (56 56 56) (56) (56 56 56) (56) (56 56 56) (56) (56 56) (56 56) (56 56) (56 56) (56 56) (56) (56 56 56))) :loffset (quote ((0) (0) (0) (0) (98 49 0) (0) (99 49 0) (0) (99 50 0) (0) (0) (0) (0) (0) (99 49 0) (0) (99 50 0) (0) (98 49 0) (0) (0) (99 50 0) (99 50 0) (99 50 0) (99 50 0) (99 50 0) (99 50 0) (99 49 0) (99 49 0) (99 49 0) (99 49 0) (0 0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (99 49 0) (99 49 0) (98 49 0) (98 49 0) (98 49 0) (98 49 0) (98 49 0) (0) (0 0 0) (99 50 0) (0) (98 49 0) (0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0) (0 0 0) (99 50 0) (0) (98 49 0) (0) (99 49 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0 0))) :lchan (quote ((2) (2) (2) (2) (2 2 2) (2) (2 2 2) (2) (2 2 2) (2) (2) (2) (2) (2) (2 2 2) (2) (2 2 2) (2) (2 2 2) (2) (2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2) (2) (2 2) (2 2) (2 2 2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2) (2 2 2) (2 2 2) (2) (2 2 2) (2) (2 2) (2 2) (2 2) (2 2 2) (2 2 2) (2 2 2) (2 2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2 2) (2 2 2) (2 2 2) (2 2 2) (2) (2 2 2) (2) (2 2 2) (2) (2 2) (2 2) (2 2) (2 2) (2 2) (2) (2 2 2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0 0 0) (0 0 0) (0) (0 0 0) (0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 715 378) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote f) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 1091 444) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "midics" nil) (om-load-inputfun (quote input-funbox) "" "transpose" nil))) (om-make-point 1054 478) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 247 232) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 339 105) (om-make-point 31 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 288 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 172 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 67 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "transpose" 1 (om-make-point 234 54) "" "transpose" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "midics" 0 (om-make-point 5 45) "" "midics" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 340 340) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 240 340) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (5 0 2 0 nil 0) (1 0 2 1 nil 0) (4 0 3 0 nil 0) (2 0 3 1 nil 0) (6 0 4 0 nil 0) (0 1 7 0 nil 0) (0 0 8 0 nil 0))) 1 "omloop 2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 917 384) (om-make-point 99 57) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5800) (5400) (5100) (4600) (5400 4900 4600) (5800) (5400 4900 4600) (5800) (5400 5100 4700) (5900) (5400) (5100) (4700) (4300) (5100 4600 4300) (5500) (5100 4600 4300) (5500) (5100 4700 4400) (5600) (5700) (6500 6000 5700) (6500 6000 5700) (6500 6100 5800) (6500 6100 5800) (6500 6100 5800) (6100 5800 5100) (6000 5800 5100) (6000 5800 5100) (6000 5700 5100) (5800 5300 4900) (5100 5800) (5300) (5300 4100) (5300 4100) (4600 5300 5800) (4600) (4900) (5300) (4300) (4600) (4400) (4300) (4900) (4700) (4600) (5200) (5100) (5200) (4900) (4700) (4600) (4400) (4600) (4700) (4400) (4600) (4700) (4000) (5200) (5100) (4900) (5100) (4900) (5100) (3900) (4400) (5900) (5300) (5400) (5600) (5000) (5100) (5300) (4600) (5600) (5000) (5100) (5300) (4200) (4300) (5800) (5500) (5100) (4400) (5900) (5600) (5300) (5600 5300 5000) (5800 5300 4900) (5800 5300 4900) (5800 5400 5100) (5800 5400 5100) (5800 5400 5100) (5200 4700 4400) (5600) (5800 5300 4400) (5400 5100 4600) (5800) (5600 5300 4600) (5800) (4700 5900) (6300 5900) (6300 5900) (5500 5800 6300) (5500 5800 6300) (5500 5800 6300) (5900 5600) (5200) (5200) (5300) (5400) (5300) (5100) (5300) (5400) (5600) (5300) (5400) (5600) (5000) (5100) (5000) (4800) (5000) (5100) (5300) (5000) (5100) (5300) (4700) (4900) (4700) (4600) (4700) (4600) (4400) (4600) (4700) (4400) (4600) (4700) (3800) (3900 5100) (4600 5400 5100) (4600 5600 5300) (5800 5500 5100) (6100) (5800 5500 5100) (6100) (5800 5500 5100) (6100) (5100 5600) (5600 5100) (5100 5600) (5100 5300) (5100 5300) (5100) (4600 3900 5100))) :lonset (quote (19584 20040 21406 21861 23695 23843 25562 25710 27429 27577 30652 31107 32473 32929 34762 34910 36629 36777 38497 38645 54938 56771 58627 60483 62339 64195 66051 67907 69763 71619 73475 75331 77164 78997 80830 82664 85852 86307 87674 88129 91089 91317 91545 91773 94961 95188 95416 95872 96327 96782 97238 97466 97693 97921 98149 98377 98604 98832 99060 100198 100426 100654 100882 102248 102703 104070 104525 107713 108169 109535 109763 109990 111357 111585 111812 113179 113634 115000 115228 115456 117278 118644 119099 120466 120921 124109 124565 125931 126398 128254 130110 131966 133822 135678 137534 137682 143033 150320 150468 152188 152336 154055 155888 157721 159554 161388 163221 165054 166887 168720 170554 173514 173742 173969 174197 174880 175108 175336 175563 175791 176019 178979 179207 179435 179662 180346 180573 180801 181029 181257 181484 184445 184672 184900 185128 185356 185583 185811 186039 186266 186494 186722 186950 193781 194248 196081 197914 198063 199782 199930 201649 201797 203516 205350 207183 208969 210737 212480 213862 217613)) :ldur (quote ((456) (1366) (455) (1784) (1720 1769 1818) (1670) (1719 1769 1818) (1670) (1719 1768 1818) (1746) (455) (1366) (456) (1784) (1719 1769 1818) (1670) (1719 1768 1818) (1670) (1720 1769 1818) (1670) (1784) (1708 1757 1807) (1708 1757 1807) (1708 1757 1807) (1708 1757 1807) (1708 1757 1807) (1708 1757 1807) (1708 1758 1807) (1708 1758 1807) (1708 1758 1807) (1708 1758 1807) (1784 1784) (1784) (1784 1784) (1784 1784) (1783 1783 1783) (455) (1367) (455) (2960) (228) (228) (228) (3188) (227) (228) (456) (455) (455) (456) (228) (227) (228) (228) (228) (227) (228) (228) (1138) (228) (228) (228) (1366) (455) (1367) (455) (1822) (456) (1366) (228) (227) (1367) (228) (227) (1367) (455) (1366) (228) (228) (1822) (1366) (455) (1367) (455) (1822) (456) (1366) (418) (1708 1758 1807) (1707 1757 1806) (1708 1757 1806) (1708 1757 1806) (1708 1757 1806) (1708 1757 1806) (1720 1769 1818) (1670) (1822 1822 1822) (1719 1768 1818) (1670) (1720 1769 1818) (1670) (1784 1784) (1784 1784) (1784 1784) (1784 1784 1784) (1783 1783 1783) (1784 1784 1784) (1784 1784) (1784) (1784) (2960) (228) (227) (228) (683) (228) (228) (227) (228) (228) (2960) (228) (228) (227) (684) (227) (228) (228) (228) (227) (2961) (227) (228) (228) (228) (227) (228) (228) (227) (228) (228) (228) (1821) (467 418) (1784 1784 1784) (1784 1784 1784) (1719 1768 1818) (1669) (1720 1769 1818) (1670) (1719 1769 1818) (1670) (1784 1784) (1783 1783) (1738 1738) (1720 1720) (1701 1701) (1349) (3751 3751 3751))) :lvel (quote ((64) (64) (64) (64) (56 56 56) (56) (56 56 56) (56) (56 56 56) (56) (64) (64) (64) (64) (56 56 56) (56) (56 56 56) (56) (56 56 56) (56) (64) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56) (56) (56 56) (56 56) (56 56 56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56 56 64) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56) (56 56 56) (56 56 56) (56) (56 56 56) (56) (56 56) (56 56) (56 56) (56 56 56) (56 56 56) (56 56 56) (56 56) (56) (56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56 56) (56 56 56) (56 56 56) (56 56 56) (56) (56 56 56) (56) (56 56 56) (56) (56 56) (56 56) (56 56) (56 56) (56 56) (56) (56 56 56))) :loffset (quote ((0) (0) (0) (0) (98 49 0) (0) (99 49 0) (0) (99 50 0) (0) (0) (0) (0) (0) (99 49 0) (0) (99 50 0) (0) (98 49 0) (0) (0) (99 50 0) (99 50 0) (99 50 0) (99 50 0) (99 50 0) (99 50 0) (99 49 0) (99 49 0) (99 49 0) (99 49 0) (0 0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (99 49 0) (99 49 0) (98 49 0) (98 49 0) (98 49 0) (98 49 0) (98 49 0) (0) (0 0 0) (99 50 0) (0) (98 49 0) (0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0) (0 0 0) (99 50 0) (0) (98 49 0) (0) (99 49 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0 0))) :lchan (quote ((2) (2) (2) (2) (2 2 2) (2) (2 2 2) (2) (2 2 2) (2) (2) (2) (2) (2) (2 2 2) (2) (2 2 2) (2) (2 2 2) (2) (2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2) (2) (2 2) (2 2) (2 2 2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2) (2 2 2) (2 2 2) (2) (2 2 2) (2) (2 2) (2 2) (2 2) (2 2 2) (2 2 2) (2 2 2) (2 2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2 2) (2 2 2) (2 2 2) (2 2 2) (2) (2 2 2) (2) (2 2 2) (2) (2 2) (2 2) (2 2) (2 2) (2 2) (2) (2 2 2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0 0 0) (0 0 0) (0) (0 0 0) (0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 628 378) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote f) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 829 303) (om-make-point 26 27) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 5" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 873 323) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 819 552) (om-make-point 121 62) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400 7100 6700) (6400 6700) (7100) (6400 6700 7600) (7900) (7200 6900 6400) (6400 7200 6900) (7600) (7200 6900 6400 8100) (8400) (6400 6600 6900 7500) (6300 6600 6900) (7800) (6900 6300 6600 7100) (6900 7100) (6900 7100) (6700) (6900) (7100) (6700 6400 6900) (6700 6900) (6700 6900) (6700 6900) (6600) (6400) (7900) (7600 7100 6700) (7900) (7400 7100 6700) (7900) (7900) (7700) (7600) (7700) (7400) (7200 6700 6400) (7600) (7600 7200 6700) (7600 7200 6700) (8300 7600 7100) (7600) (7400) (7200) (7400) (7100) (7200 7400) (7200 7400) (7200 7400) (7100) (6900) (8400 8100 7600) (7200) (8400 8100 7600 6900) (6600) (8100 7800 6300) (8400) (7100 6600 6300) (8300) (8100) (7900) (7100 6600 6300 7800) (7900) (7800) (7900) (8100) (7900) (8100) (7800) (7100 7900 6700 6400 8100) (7900 8100) (7900 8100) (7800) (7600) (7900 7600 7100) (8300) (6700) (7900 7600 7400 6400) (8300) (6100) (7900 7600 7300) (8500) (7800) (7600) (7400) (7300) (7400) (7300) (7400) (7600) (7300) (7600) (7300) (7400 7600) (7400 7600) (7400 7600) (7300) (7100) (7800 7400 7100) (7900) (7800) (7600) (7400) (7300) (7100) (6900) (6700) (6900) (6600) (6700 6400) (7100) (7400) (7900) (7800) (7600) (7400) (7300) (7600) (7400) (7300) (7400) (7600) (6600) (6800) (7000) (7000 7100) (7000 7100) (7000 7100) (6800) (7000) (6800) (7000) (7100) (6600) (6700) (6400) (6100) (6200) (6100) (6200) (6400) (6200) (6100) (6200) (6400) (6600) (6400) (6600) (6100 7000 6700) (6600 6700) (6600 6700) (6600 6700) (6600 6700) (6400) (6200 7100) (6400 7300) (7400 7100 6600) (7400 7100 6600) (6500 7100 7400) (7200) (7100) (7400 7700 7100) (7600) (7400) (7100 7400 8000) (7800) (7600) (7600 7200 8100) (8000) (8100) (8300) (8300 7600 8000 8400) (8300 8400) (8300 8400) (7400) (8100) (7200 8100 7600) (8400) (7800) (7900) (8100) (7500) (7600) (7800) (7100) (8100) (7500) (7600) (7800) (7100) (7300) (7500) (7600) (7400) (7200) (7400) (7100 6400 7400) (6400 7100 7400) (7200) (7100) (7200) (7200 6900 6400) (7200 6900 6600) (7100) (6900) (7800) (7200) (7100 7200) (7100 7200) (7100 7200) (7100 7200) (7100 7200) (7100 7200) (7100 7200) (7100 7200) (7100 7200) (7200) (6900) (6700 6400) (6400) (6600) (6700) (6900) (7100) (7300) (7500) (7600) (7800) (7900) (8100) (7900) (7800) (7900) (7600) (7200 6900 6500) (7700) (7200) (7000) (6900) (7000) (7200) (6500) (6700) (6900) (6300) (6600) (6900) (7200) (7100) (6900) (7800) (7600) (7500) (8400) (8200) (8300) (7600 7100 6700) (7500 7100 6600) (7600) (6400 7100 7600) (6900) (6800) (6900) (6900 7100) (6900 7100) (6900 7100) (6800) (6900) (7100) (7600) (7400) (7200) (7400) (7100) (6900 7200 6400) (6400 7200) (7100 6200) (6900 6000) (7100 6200) (5900 6800) (6000 6300 6900) (6300 6900 6000) (6300 6000 6900) (6600 6000 6900) (6600 6900 6000) (6600 6900 6000) (6300 6600 6900) (6600 6300 6900) (6300 6600 6900) (6900 6600 6300) (7200) (7100) (6900) (6700) (6600) (6400) (6300) (6600) (6900) (7200) (7500) (7800) (8100) (8400) (8300) (7500) (7600) (7100 6700) (6400 6900) (6700) (6600 6300 6700) (6600 6700) (6600 6700) (6400) (6600) (6400) (6600) (6800) (6900) (7100) (6500) (6400) (6200) (6000) (6400) (6600) (6800) (6900) (7100) (7200) (7100) (6900) (6700) (6600) (6700) (6900) (6600) (6300) (6000) (5900) (6000) (5700) (5400) (6300) (6400 5900 5600))) :lonset (quote (0 1833 3200 3666 5033 5500 7333 8699 9166 10532 10999 12832 14199 14665 14817 14969 15804 16032 16259 16499 16650 16802 16954 17865 18093 18332 20165 20313 22032 22180 25027 25255 25482 25710 27076 27532 27680 29399 31255 33138 36083 36311 36538 36766 38132 38588 38740 38891 39954 40182 40410 41799 42265 43655 44121 44269 45989 47150 47378 47606 47845 48095 48323 48551 48778 49006 49234 49462 49701 49875 50027 51090 51317 51557 51705 52957 53424 53572 54824 55291 55439 58286 58514 58741 58969 59197 59424 59652 59880 60108 60335 60563 60791 60943 61094 62157 62385 62613 63774 64002 64229 64457 64685 64913 65140 65368 65823 66051 66279 67657 67884 68112 69251 69478 69706 69934 70617 70731 70845 71072 71300 71756 72450 72564 72678 72830 72982 73133 73247 73361 73475 73589 74955 75411 76777 77232 78371 78599 78826 79054 79282 79510 79737 79965 80193 80421 80648 80876 81787 81939 82091 82242 82470 82698 84064 84520 86376 88231 89598 89826 90053 93241 93469 93697 96885 97113 97340 99618 100073 100529 100995 101147 101299 102817 103728 104639 106005 106461 107827 108055 108283 109649 109877 110104 111471 111926 113292 113520 113748 115114 115342 115570 116936 117164 117391 119213 121035 122401 122629 122857 124679 126535 127924 128151 128379 129745 130212 130364 130516 130668 130820 130971 131123 131275 131427 131579 131806 132034 134095 134323 134550 134778 135006 135234 135461 135689 135917 136144 136372 136600 136828 137055 137283 137511 137659 138911 139139 139367 140733 140961 141189 142555 142783 143010 144377 144604 144832 146198 146426 146654 148020 148248 148476 148931 149842 150298 152153 153543 154009 155148 155376 155603 155843 155994 156146 159042 159270 159509 162469 162697 162925 163152 164530 164986 167957 168185 168413 168641 170007 170462 172296 174129 175962 177795 179628 181461 183295 185128 186988 187136 189033 189261 189489 189716 189944 190172 190400 190627 190855 191083 191310 191538 191766 191994 192221 192449 193815 194282 194396 196115 196267 196419 196571 197026 197937 200898 201125 201353 201581 202719 202947 203175 203403 205908 206135 206363 206591 206818 207046 207616 207728 207838 207948 208167 208387 208606 208826 210144 210363 210583 211920 212334 213433 213745 217495)) :ldur (quote ((1784 1784 1784) (1784 1784) (466) (1784 1784 1367) (467) (1783 1783 1783) (1784 1784 1784) (467) (1784 1784 1784 1366) (467) (1784 1784 1784 1784) (1784 1784 1784) (466) (84 1784 1784 84) (84 84) (759 76) (228) (227) (240) (84 1783 83) (84 84) (84 84) (835 76) (228) (239) (1784) (1719 1769 1818) (1670) (1719 1768 1818) (1670) (228) (227) (228) (1366) (456) (1720 1769 1818) (1670) (1708 1758 1807) (1708 1758 1807) (1670 1719 1768) (228) (227) (228) (1366) (456) (83 83) (84 83) (987 76) (228) (228) (1708 1757 1806) (466) (1708 1757 1807 1390) (466) (1719 1768 1818) (1670) (1708 1757 1806) (228) (228) (239) (1708 1757 1806 250) (228) (228) (227) (228) (228) (228) (239) (1708 84 1757 1806 98) (84 84) (987 76) (227) (240) (1720 1769 1818) (1670) (467) (1719 1769 1818 1400) (1670) (467) (1719 1768 1818) (1670) (228) (227) (228) (228) (227) (228) (228) (228) (227) (228) (228) (83 83) (83 83) (987 76) (228) (228) (1063 884 933) (228) (227) (228) (228) (228) (227) (228) (455) (228) (228) (1329 922) (227) (228) (1139) (227) (228) (228) (683) (114) (114) (227) (228) (456) (645) (114) (114) (83 83) (83 83) (76 83) (114) (114) (114) (114) (7287) (456) (1366) (455) (1139) (228) (227) (228) (228) (228) (227) (228) (228) (228) (227) (228) (1822 1822 892) (83 76) (83 83) (84 83) (76 84) (228) (1366 1366) (456 456) (1708 1757 1806) (1708 1757 1806) (1367 1367 1367) (228) (227) (3188 3188 3188) (228) (228) (3188 3188 3188) (228) (227) (1822 1822 2278) (455) (456) (417) (84 1822 3644 76) (84 84) (2353 76) (1822) (911) (1366 1366 1366) (456) (1366) (228) (228) (1366) (228) (227) (1367) (455) (1366) (228) (228) (1366) (228) (228) (1366) (228) (227) (1822) (1731 1731 1731) (1366 1366 1366) (228) (228) (1822) (1708 1757 1806) (1291 1340 1389) (227) (228) (1366) (418) (84 84) (84 84) (83 83) (83 83) (84 83) (84 84) (84 84) (83 83) (76 83) (227) (228) (2012 1833) (228) (227) (228) (228) (228) (227) (228) (228) (227) (228) (228) (228) (227) (228) (228) (1301 1351 1400) (1252) (228) (228) (1366) (228) (228) (1366) (228) (227) (1367) (227) (228) (1366) (228) (228) (1366) (228) (228) (455) (911) (456) (1708 1757 1806) (1291 1757 1807) (417) (911 911 8460) (228) (227) (190) (84 83) (84 84) (2771 76) (228) (190) (4972) (228) (228) (227) (1378) (456) (1821 2922 2922) (228 228) (228 228) (228 228) (1366 1366) (455 455) (1784 1784 1784) (1783 1783 1783) (1784 1784 1784) (1784 1784 1784) (1784 1784 1784) (1784 1784 1784) (1784 1784 1784) (1783 1783 1783) (1784 1784 1784) (1682 1731 1780) (1897) (228) (228) (227) (228) (228) (228) (227) (228) (228) (227) (228) (228) (228) (227) (228) (1366) (467 418) (1833 114) (1670) (84 1822 76) (84 84) (76 84) (455) (911) (2961) (227) (228) (228) (1138) (228) (228) (228) (2505) (227) (228) (228) (227) (228) (570) (112) (110) (110) (219) (220) (219) (220) (4573) (219) (220) (1337) (414) (1411) (312) (3750 3750 3750))) :lvel (quote ((56 56 56) (56 56) (64) (56 56 64) (64) (56 56 56) (56 56 56) (64) (56 56 56 64) (64) (56 56 56 64) (56 56 56) (64) (45 56 56 74) (58 51) (76 52) (64) (64) (64) (42 56 72) (51 47) (59 55) (76 73) (64) (64) (64) (56 56 56) (56) (56 56 56) (56) (64) (64) (64) (64) (64) (56 56 56) (56) (56 56 56) (56 56 56) (56 56 56) (64) (64) (64) (64) (64) (45 72) (58 51) (79 86) (64) (64) (56 56 56) (64) (56 56 56 64) (64) (56 56 64) (56) (56 56 56) (64) (64) (64) (56 56 56 64) (64) (64) (64) (64) (64) (64) (64) (56 45 56 56 74) (58 51) (64 77) (64) (64) (56 56 56) (64) (64) (56 56 56 64) (56) (64) (56 56 56) (56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (45 73) (58 51) (64 79) (64) (64) (64 56 56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 56) (64) (64) (64) (64) (64) (64) (64) (64) (56) (64) (64) (64) (64) (64) (56) (44 43) (47 46) (70 48) (56) (57) (72) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 64 64) (43 80) (49 46) (55 52) (63 57) (64) (64 64) (64 64) (60 56 56) (64 56 56) (64 64 64) (64) (64) (56 56 56) (64) (64) (56 56 56) (64) (64) (56 56 56) (64) (64) (64) (45 64 64 72) (55 50) (64 86) (64) (64) (64 64 64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56 56 56) (64 64 64) (64) (64) (64) (64 56 56) (64 56 56) (64) (64) (64) (64) (80 77) (43 42) (45 44) (48 47) (50 49) (52 51) (55 54) (57 56) (59 58) (70) (64) (64 56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 64 64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 56 56) (56 56 56) (64) (64 64 56) (64) (64) (60) (47 72) (56 51) (64 50) (64) (64) (64) (64) (64) (64) (64) (64) (64 64 64) (64 64) (64 64) (64 64) (64 64) (64 64) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 64) (64 72) (64) (44 64 74) (52 48) (73 56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56) (64) (64) (64) (64) (64) (64) (64 56 56))) :loffset (quote ((0 0 0) (0 0) (0) (0 0 0) (0) (0 0 0) (0 0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0) (0) (76 0 0 0) (76 0) (76 0) (0) (0) (0) (75 0 0) (76 0) (76 0) (76 0) (0) (0) (0) (99 49 0) (0) (99 50 0) (0) (0) (0) (0) (0) (0) (98 49 0) (0) (99 49 0) (99 49 0) (98 49 0) (0) (0) (0) (0) (0) (76 0) (75 0) (76 0) (0) (0) (98 49 0) (0) (99 50 0 0) (0) (99 50 0) (0) (98 49 0) (0) (0) (0) (98 49 0 0) (0) (0) (0) (0) (0) (0) (0) (98 98 49 0 0) (76 0) (76 0) (0) (0) (98 49 0) (0) (0) (99 49 0 0) (0) (0) (99 50 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (76 0) (76 0) (76 0) (0) (0) (98 49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (76 0) (76 0) (75 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (76 0) (76 0) (75 0) (76 0) (0) (0 0) (0 0) (98 49 0) (98 49 0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0) (76 0 0 0) (76 0) (76 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0) (0) (98 49 0) (98 49 0) (0) (0) (0) (0) (76 0) (76 0) (76 0) (76 0) (75 0) (76 0) (76 0) (76 0) (76 0) (0) (0) (49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (99 49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (98 49 0) (99 50 0) (0) (0 0 0) (0) (0) (0) (75 0) (76 0) (76 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (98 49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (76 0 0) (76 0) (76 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0))) :lchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 840 442) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "midics" nil) (om-load-inputfun (quote input-funbox) "" "transpose" nil))) (om-make-point 803 476) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 247 232) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 339 105) (om-make-point 31 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 288 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 172 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 67 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "transpose" 1 (om-make-point 234 54) "" "transpose" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "midics" 0 (om-make-point 5 45) "" "midics" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 340 340) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 240 340) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (5 0 2 0 nil 0) (1 0 2 1 nil 0) (4 0 3 0 nil 0) (2 0 3 1 nil 0) (6 0 4 0 nil 0) (0 1 7 0 nil 0) (0 0 8 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 543 618) (om-make-point 161 108) (load-buffer-textfile (quote ("pitch: (6300 7000 6600)" "offset: 0" "duration: (1784 1784 1784)" "velocity: (56 56 56)" "offset-in-chord: (0 0 0)" "channel: (1 1 1)" "legato: 0" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 6" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 593 476) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "explain-chord-seq-info" (om-load-patch-abs1 "explain-chord-seq-info" (quote ((let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 32 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LAST" (quote last) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 151 135) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "choose-first" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "list" nil))) (om-make-point 38 140) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 59 168) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 243 163) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 158 123) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "list" 0 (om-make-point 5 45) "" "list" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 80 67) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 200 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (2 0 1 0 nil 0) (4 0 2 0 nil 0) (0 0 4 0 nil 0) (1 1 5 0 nil 0) (1 0 6 0 nil 0))) 1 "choose-first" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 201 291) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "descriptor-midi" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "midi-info" nil) (om-load-inputfun (quote input-funbox) "" "descriptor" nil))) (om-make-point 122 217) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 330 331) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 233 215) (om-make-point 52 30) (quote string) "string" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CONCATENATE" (quote concatenate) (quote ((om-load-inputfun (quote input-funbox) "RESULT-TYPE" "RESULT-TYPE" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 272 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NUMBER-TO-STRING" (quote number-to-string) (quote ((om-load-inputfun (quote input-funbox) "INT" "INT" nil))) (om-make-point 85 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 348 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "descriptor" 1 (om-make-point 405 49) "" "descriptor" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 75 110) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "midi-info" 0 (om-make-point 5 45) "" "midi-info" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 394 438) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 262 436) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0) (4 0 2 1 nil 0) (3 0 2 2 nil 0) (6 0 3 0 nil 0) (5 0 4 0 nil 0) (7 0 6 0 nil 0) (0 1 8 0 nil 0) (0 0 9 0 nil 0))) 1 "descriptor-midi" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 144 59) (om-make-point 491 30) (list "pitch: " "offset: " "duration: " "velocity: " "offset-in-chord: " "channel: " "legato: ") "(\"pitch: \" \"offset: \" \"duration: \" \"velocity: \" \"offset-in-chord: \" \"channel: \" \"legato: \")" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "midi-event-info" 0 (om-make-point 5 45) "" "midi-event-info" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 0 1 nil 0) (6 0 1 0 nil 0) (6 0 2 0 nil 0) (4 0 3 0 nil 0) (0 0 4 0 nil 0) (5 0 4 1 nil 0))) 7.01 nil "" (om-make-point 1975 430) (om-make-point 1022 386)) (quote ((om-load-inputfun (quote input-funbox) "" "midi-event-info" nil))) (om-make-point 603 527) nil (list (list "pitch: (6300 7000 6600)" "offset: 0" "duration: (1784 1784 1784)" "velocity: (56 56 56)" "offset-in-chord: (0 0 0)" "channel: (1 1 1)" "legato: 0")) nil "explain-chord-seq-info"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 583 386) (om-make-point 121 62) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300 7000 6600) (6300 6600) (7000) (6300 6600 7500) (7800) (7100 6800 6300) (6300 7100 6800) (7500) (7100 6800 6300 8000) (8300) (6300 6500 6800 7400) (6200 6500 6800) (7700) (6800 6200 6500 7000) (6800 7000) (6800 7000) (6600) (6800) (7000) (6600 6300 6800) (6600 6800) (6600 6800) (6600 6800) (6500) (6300) (7800) (7500 7000 6600) (7800) (7300 7000 6600) (7800) (7800) (7600) (7500) (7600) (7300) (7100 6600 6300) (7500) (7500 7100 6600) (7500 7100 6600) (8200 7500 7000) (7500) (7300) (7100) (7300) (7000) (7100 7300) (7100 7300) (7100 7300) (7000) (6800) (8300 8000 7500) (7100) (8300 8000 7500 6800) (6500) (8000 7700 6200) (8300) (7000 6500 6200) (8200) (8000) (7800) (7000 6500 6200 7700) (7800) (7700) (7800) (8000) (7800) (8000) (7700) (7000 7800 6600 6300 8000) (7800 8000) (7800 8000) (7700) (7500) (7800 7500 7000) (8200) (6600) (7800 7500 7300 6300) (8200) (6000) (7800 7500 7200) (8400) (7700) (7500) (7300) (7200) (7300) (7200) (7300) (7500) (7200) (7500) (7200) (7300 7500) (7300 7500) (7300 7500) (7200) (7000) (7700 7300 7000) (7800) (7700) (7500) (7300) (7200) (7000) (6800) (6600) (6800) (6500) (6600 6300) (7000) (7300) (7800) (7700) (7500) (7300) (7200) (7500) (7300) (7200) (7300) (7500) (6500) (6700) (6900) (6900 7000) (6900 7000) (6900 7000) (6700) (6900) (6700) (6900) (7000) (6500) (6600) (6300) (6000) (6100) (6000) (6100) (6300) (6100) (6000) (6100) (6300) (6500) (6300) (6500) (6000 6900 6600) (6500 6600) (6500 6600) (6500 6600) (6500 6600) (6300) (6100 7000) (6300 7200) (7300 7000 6500) (7300 7000 6500) (6400 7000 7300) (7100) (7000) (7300 7600 7000) (7500) (7300) (7000 7300 7900) (7700) (7500) (7500 7100 8000) (7900) (8000) (8200) (8200 7500 7900 8300) (8200 8300) (8200 8300) (7300) (8000) (7100 8000 7500) (8300) (7700) (7800) (8000) (7400) (7500) (7700) (7000) (8000) (7400) (7500) (7700) (7000) (7200) (7400) (7500) (7300) (7100) (7300) (7000 6300 7300) (6300 7000 7300) (7100) (7000) (7100) (7100 6800 6300) (7100 6800 6500) (7000) (6800) (7700) (7100) (7000 7100) (7000 7100) (7000 7100) (7000 7100) (7000 7100) (7000 7100) (7000 7100) (7000 7100) (7000 7100) (7100) (6800) (6600 6300) (6300) (6500) (6600) (6800) (7000) (7200) (7400) (7500) (7700) (7800) (8000) (7800) (7700) (7800) (7500) (7100 6800 6400) (7600) (7100) (6900) (6800) (6900) (7100) (6400) (6600) (6800) (6200) (6500) (6800) (7100) (7000) (6800) (7700) (7500) (7400) (8300) (8100) (8200) (7500 7000 6600) (7400 7000 6500) (7500) (6300 7000 7500) (6800) (6700) (6800) (6800 7000) (6800 7000) (6800 7000) (6700) (6800) (7000) (7500) (7300) (7100) (7300) (7000) (6800 7100 6300) (6300 7100) (7000 6100) (6800 5900) (7000 6100) (5800 6700) (5900 6200 6800) (6200 6800 5900) (6200 5900 6800) (6500 5900 6800) (6500 6800 5900) (6500 6800 5900) (6200 6500 6800) (6500 6200 6800) (6200 6500 6800) (6800 6500 6200) (7100) (7000) (6800) (6600) (6500) (6300) (6200) (6500) (6800) (7100) (7400) (7700) (8000) (8300) (8200) (7400) (7500) (7000 6600) (6300 6800) (6600) (6500 6200 6600) (6500 6600) (6500 6600) (6300) (6500) (6300) (6500) (6700) (6800) (7000) (6400) (6300) (6100) (5900) (6300) (6500) (6700) (6800) (7000) (7100) (7000) (6800) (6600) (6500) (6600) (6800) (6500) (6200) (5900) (5800) (5900) (5600) (5300) (6200) (6300 5800 5500))) :lonset (quote (0 1833 3200 3666 5033 5500 7333 8699 9166 10532 10999 12832 14199 14665 14817 14969 15804 16032 16259 16499 16650 16802 16954 17865 18093 18332 20165 20313 22032 22180 25027 25255 25482 25710 27076 27532 27680 29399 31255 33138 36083 36311 36538 36766 38132 38588 38740 38891 39954 40182 40410 41799 42265 43655 44121 44269 45989 47150 47378 47606 47845 48095 48323 48551 48778 49006 49234 49462 49701 49875 50027 51090 51317 51557 51705 52957 53424 53572 54824 55291 55439 58286 58514 58741 58969 59197 59424 59652 59880 60108 60335 60563 60791 60943 61094 62157 62385 62613 63774 64002 64229 64457 64685 64913 65140 65368 65823 66051 66279 67657 67884 68112 69251 69478 69706 69934 70617 70731 70845 71072 71300 71756 72450 72564 72678 72830 72982 73133 73247 73361 73475 73589 74955 75411 76777 77232 78371 78599 78826 79054 79282 79510 79737 79965 80193 80421 80648 80876 81787 81939 82091 82242 82470 82698 84064 84520 86376 88231 89598 89826 90053 93241 93469 93697 96885 97113 97340 99618 100073 100529 100995 101147 101299 102817 103728 104639 106005 106461 107827 108055 108283 109649 109877 110104 111471 111926 113292 113520 113748 115114 115342 115570 116936 117164 117391 119213 121035 122401 122629 122857 124679 126535 127924 128151 128379 129745 130212 130364 130516 130668 130820 130971 131123 131275 131427 131579 131806 132034 134095 134323 134550 134778 135006 135234 135461 135689 135917 136144 136372 136600 136828 137055 137283 137511 137659 138911 139139 139367 140733 140961 141189 142555 142783 143010 144377 144604 144832 146198 146426 146654 148020 148248 148476 148931 149842 150298 152153 153543 154009 155148 155376 155603 155843 155994 156146 159042 159270 159509 162469 162697 162925 163152 164530 164986 167957 168185 168413 168641 170007 170462 172296 174129 175962 177795 179628 181461 183295 185128 186988 187136 189033 189261 189489 189716 189944 190172 190400 190627 190855 191083 191310 191538 191766 191994 192221 192449 193815 194282 194396 196115 196267 196419 196571 197026 197937 200898 201125 201353 201581 202719 202947 203175 203403 205908 206135 206363 206591 206818 207046 207616 207728 207838 207948 208167 208387 208606 208826 210144 210363 210583 211920 212334 213433 213745 217495)) :ldur (quote ((1784 1784 1784) (1784 1784) (466) (1784 1784 1367) (467) (1783 1783 1783) (1784 1784 1784) (467) (1784 1784 1784 1366) (467) (1784 1784 1784 1784) (1784 1784 1784) (466) (84 1784 1784 84) (84 84) (759 76) (228) (227) (240) (84 1783 83) (84 84) (84 84) (835 76) (228) (239) (1784) (1719 1769 1818) (1670) (1719 1768 1818) (1670) (228) (227) (228) (1366) (456) (1720 1769 1818) (1670) (1708 1758 1807) (1708 1758 1807) (1670 1719 1768) (228) (227) (228) (1366) (456) (83 83) (84 83) (987 76) (228) (228) (1708 1757 1806) (466) (1708 1757 1807 1390) (466) (1719 1768 1818) (1670) (1708 1757 1806) (228) (228) (239) (1708 1757 1806 250) (228) (228) (227) (228) (228) (228) (239) (1708 84 1757 1806 98) (84 84) (987 76) (227) (240) (1720 1769 1818) (1670) (467) (1719 1769 1818 1400) (1670) (467) (1719 1768 1818) (1670) (228) (227) (228) (228) (227) (228) (228) (228) (227) (228) (228) (83 83) (83 83) (987 76) (228) (228) (1063 884 933) (228) (227) (228) (228) (228) (227) (228) (455) (228) (228) (1329 922) (227) (228) (1139) (227) (228) (228) (683) (114) (114) (227) (228) (456) (645) (114) (114) (83 83) (83 83) (76 83) (114) (114) (114) (114) (7287) (456) (1366) (455) (1139) (228) (227) (228) (228) (228) (227) (228) (228) (228) (227) (228) (1822 1822 892) (83 76) (83 83) (84 83) (76 84) (228) (1366 1366) (456 456) (1708 1757 1806) (1708 1757 1806) (1367 1367 1367) (228) (227) (3188 3188 3188) (228) (228) (3188 3188 3188) (228) (227) (1822 1822 2278) (455) (456) (417) (84 1822 3644 76) (84 84) (2353 76) (1822) (911) (1366 1366 1366) (456) (1366) (228) (228) (1366) (228) (227) (1367) (455) (1366) (228) (228) (1366) (228) (228) (1366) (228) (227) (1822) (1731 1731 1731) (1366 1366 1366) (228) (228) (1822) (1708 1757 1806) (1291 1340 1389) (227) (228) (1366) (418) (84 84) (84 84) (83 83) (83 83) (84 83) (84 84) (84 84) (83 83) (76 83) (227) (228) (2012 1833) (228) (227) (228) (228) (228) (227) (228) (228) (227) (228) (228) (228) (227) (228) (228) (1301 1351 1400) (1252) (228) (228) (1366) (228) (228) (1366) (228) (227) (1367) (227) (228) (1366) (228) (228) (1366) (228) (228) (455) (911) (456) (1708 1757 1806) (1291 1757 1807) (417) (911 911 8460) (228) (227) (190) (84 83) (84 84) (2771 76) (228) (190) (4972) (228) (228) (227) (1378) (456) (1821 2922 2922) (228 228) (228 228) (228 228) (1366 1366) (455 455) (1784 1784 1784) (1783 1783 1783) (1784 1784 1784) (1784 1784 1784) (1784 1784 1784) (1784 1784 1784) (1784 1784 1784) (1783 1783 1783) (1784 1784 1784) (1682 1731 1780) (1897) (228) (228) (227) (228) (228) (228) (227) (228) (228) (227) (228) (228) (228) (227) (228) (1366) (467 418) (1833 114) (1670) (84 1822 76) (84 84) (76 84) (455) (911) (2961) (227) (228) (228) (1138) (228) (228) (228) (2505) (227) (228) (228) (227) (228) (570) (112) (110) (110) (219) (220) (219) (220) (4573) (219) (220) (1337) (414) (1411) (312) (3750 3750 3750))) :lvel (quote ((56 56 56) (56 56) (64) (56 56 64) (64) (56 56 56) (56 56 56) (64) (56 56 56 64) (64) (56 56 56 64) (56 56 56) (64) (45 56 56 74) (58 51) (76 52) (64) (64) (64) (42 56 72) (51 47) (59 55) (76 73) (64) (64) (64) (56 56 56) (56) (56 56 56) (56) (64) (64) (64) (64) (64) (56 56 56) (56) (56 56 56) (56 56 56) (56 56 56) (64) (64) (64) (64) (64) (45 72) (58 51) (79 86) (64) (64) (56 56 56) (64) (56 56 56 64) (64) (56 56 64) (56) (56 56 56) (64) (64) (64) (56 56 56 64) (64) (64) (64) (64) (64) (64) (64) (56 45 56 56 74) (58 51) (64 77) (64) (64) (56 56 56) (64) (64) (56 56 56 64) (56) (64) (56 56 56) (56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (45 73) (58 51) (64 79) (64) (64) (64 56 56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 56) (64) (64) (64) (64) (64) (64) (64) (64) (56) (64) (64) (64) (64) (64) (56) (44 43) (47 46) (70 48) (56) (57) (72) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 64 64) (43 80) (49 46) (55 52) (63 57) (64) (64 64) (64 64) (60 56 56) (64 56 56) (64 64 64) (64) (64) (56 56 56) (64) (64) (56 56 56) (64) (64) (56 56 56) (64) (64) (64) (45 64 64 72) (55 50) (64 86) (64) (64) (64 64 64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56 56 56) (64 64 64) (64) (64) (64) (64 56 56) (64 56 56) (64) (64) (64) (64) (80 77) (43 42) (45 44) (48 47) (50 49) (52 51) (55 54) (57 56) (59 58) (70) (64) (64 56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 64 64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 56 56) (56 56 56) (64) (64 64 56) (64) (64) (60) (47 72) (56 51) (64 50) (64) (64) (64) (64) (64) (64) (64) (64) (64 64 64) (64 64) (64 64) (64 64) (64 64) (64 64) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 64) (64 72) (64) (44 64 74) (52 48) (73 56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56) (64) (64) (64) (64) (64) (64) (64 56 56))) :loffset (quote ((0 0 0) (0 0) (0) (0 0 0) (0) (0 0 0) (0 0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0) (0) (76 0 0 0) (76 0) (76 0) (0) (0) (0) (75 0 0) (76 0) (76 0) (76 0) (0) (0) (0) (99 49 0) (0) (99 50 0) (0) (0) (0) (0) (0) (0) (98 49 0) (0) (99 49 0) (99 49 0) (98 49 0) (0) (0) (0) (0) (0) (76 0) (75 0) (76 0) (0) (0) (98 49 0) (0) (99 50 0 0) (0) (99 50 0) (0) (98 49 0) (0) (0) (0) (98 49 0 0) (0) (0) (0) (0) (0) (0) (0) (98 98 49 0 0) (76 0) (76 0) (0) (0) (98 49 0) (0) (0) (99 49 0 0) (0) (0) (99 50 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (76 0) (76 0) (76 0) (0) (0) (98 49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (76 0) (76 0) (75 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (76 0) (76 0) (75 0) (76 0) (0) (0 0) (0 0) (98 49 0) (98 49 0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0) (76 0 0 0) (76 0) (76 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0) (0) (98 49 0) (98 49 0) (0) (0) (0) (0) (76 0) (76 0) (76 0) (76 0) (75 0) (76 0) (76 0) (76 0) (76 0) (0) (0) (49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (99 49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (98 49 0) (99 50 0) (0) (0 0 0) (0) (0) (0) (75 0) (76 0) (76 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (98 49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (76 0 0) (76 0) (76 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0))) :lchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 612 287) (om-make-point 22 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 4" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 640 324) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 270 738) (om-make-point 93 89) (load-buffer-textfile (quote ("pitch: 63" "offset: 0" "duration: 1784" "velocity: 56" "channel: 1" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 227 554) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "explain-midi-info" (om-load-patch-abs1 "explain-midi-info" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 201 291) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "descriptor-midi" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "midi-info" nil) (om-load-inputfun (quote input-funbox) "" "descriptor" nil))) (om-make-point 122 217) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 330 331) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 233 215) (om-make-point 52 30) (quote string) "string" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CONCATENATE" (quote concatenate) (quote ((om-load-inputfun (quote input-funbox) "RESULT-TYPE" "RESULT-TYPE" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 272 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NUMBER-TO-STRING" (quote number-to-string) (quote ((om-load-inputfun (quote input-funbox) "INT" "INT" nil))) (om-make-point 85 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 348 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "descriptor" 1 (om-make-point 405 49) "" "descriptor" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 75 110) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "midi-info" 0 (om-make-point 5 45) "" "midi-info" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 394 438) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 262 436) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0) (4 0 2 1 nil 0) (3 0 2 2 nil 0) (6 0 3 0 nil 0) (5 0 4 0 nil 0) (7 0 6 0 nil 0) (0 1 8 0 nil 0) (0 0 9 0 nil 0))) 1 "descriptor-midi" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 143 86) (om-make-point 329 30) (list "pitch: " "offset: " "duration: " "velocity: " "channel: ") "(\"pitch: \" \"offset: \" \"duration: \" \"velocity: \" \"channel: \")" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "midi-event-info" 0 (om-make-point 5 45) "" "midi-event-info" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0))) 7.01 nil "" (om-make-point 2386 290) (om-make-point 600 436)) (quote ((om-load-inputfun (quote input-funbox) "" "midi-event-info" nil))) (om-make-point 331 655) nil (list (list "pitch: 63" "offset: 0" "duration: 1784" "velocity: 56" "channel: 1")) nil "explain-midi-info"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 293 574) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 3" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 325 591) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 373 490) (om-make-point 21 25) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 408 491) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 300 493) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 332 498) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 227 492) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 285 409) (om-make-point 167 56) (load-buffer-textfile (quote ("((66 0 1784 56 1) (70 0 1784 56 1) (63 0 1784 56 1) (66 1833 1784 56 1) (63 1833 1784 56 1) (70 3200 466 64 1) (75 3666 1367 64 1) (66 3666 1784 56 1) (63 3666 1784 56 1) (78 5033 467 64 1) (63 5500 1783 56 1) (68 5500 1783 56 1) (71 5500 1783 56 1) (68 7333 1784 56 1) (71 7333 1784 56 1) (63 7333 1784 56 1) (75 8699 467 64 1) (80 9166 1366 64 1) (63 9166 1784 56 1) (68 9166 1784 56 1) (71 9166 1784 56 1) (83 10532 467 64 1) (74 10999 1784 64 1) (68 10999 1784 56 1) (65 10999 1784 56 1) (63 10999 1784 56 1) (68 12832 1784 56 1) (65 12832 1784 56 1) (62 12832 1784 56 1) (77 14199 466 64 1) (70 14665 84 74 1) (65 14665 1784 56 1) (62 14665 1784 56 1) (68 14741 84 45 1) (70 14817 84 51 1) (68 14893 84 58 1) (70 14969 76 52 1) (68 15045 759 76 1) (66 15804 228 64 1) (68 16032 227 64 1) (70 16259 240 64 1) (68 16499 83 72 1) (63 16499 1783 56 1) (66 16574 84 42 1) (68 16650 84 47 1) (66 16726 84 51 1) (68 16802 84 55 1) (66 16878 84 59 1) (68 16954 76 73 1) (66 17030 835 76 1) (65 17865 228 64 1) (63 18093 239 64 1) (78 18332 1784 64 1) (66 20165 1818 56 1) (70 20214 1769 56 1) (75 20264 1719 56 1) (78 20313 1670 56 1) (66 22032 1818 56 1) (70 22082 1768 56 1) (73 22131 1719 56 1) (78 22180 1670 56 1) (78 25027 228 64 1) (76 25255 227 64 1) (75 25482 228 64 1) (76 25710 1366 64 1) (73 27076 456 64 1) (63 27532 1818 56 1) (66 27581 1769 56 1) (71 27630 1720 56 1) (75 27680 1670 56 1) (66 29399 1807 56 1) (71 29448 1758 56 1) (75 29498 1708 56 1) (66 31255 1807 56 1) (71 31304 1758 56 1) (75 31354 1708 56 1) (70 33138 1768 56 1) (75 33187 1719 56 1) (82 33236 1670 56 1) (75 36083 228 64 1) (73 36311 227 64 1) (71 36538 228 64 1) (73 36766 1366 64 1) (70 38132 456 64 1) (73 38588 83 72 1) (71 38664 83 45 1) (73 38740 83 51 1) (71 38815 84 58 1) (73 38891 76 86 1) (71 38967 987 79 1) (70 39954 228 64 1) (68 40182 228 64 1) (75 40410 1806 56 1) (80 40459 1757 56 1) (83 40508 1708 56 1) (71 41799 466 64 1) (68 42265 1390 64 1) (75 42265 1807 56 1) (80 42315 1757 56 1) (83 42364 1708 56 1) (65 43655 466 64 1) (62 44121 1818 64 1) (77 44171 1768 56 1) (80 44220 1719 56 1) (83 44269 1670 56 1) (62 45989 1806 56 1) (65 46038 1757 56 1) (70 46087 1708 56 1) (82 47150 228 64 1) (80 47378 228 64 1) (78 47606 239 64 1) (77 47845 250 64 1) (62 47845 1806 56 1) (65 47894 1757 56 1) (70 47943 1708 56 1) (78 48095 228 64 1) (77 48323 228 64 1) (78 48551 227 64 1) (80 48778 228 64 1) (78 49006 228 64 1) (80 49234 228 64 1) (77 49462 239 64 1) (80 49701 98 74 1) (63 49701 1806 56 1) (66 49750 1757 56 1) (78 49799 84 45 1) (70 49799 1708 56 1) (80 49875 84 51 1) (78 49951 84 58 1) (80 50027 76 77 1) (78 50103 987 64 1) (77 51090 227 64 1) (75 51317 240 64 1) (70 51557 1818 56 1) (75 51606 1769 56 1) (78 51655 1720 56 1) (82 51705 1670 64 1) (66 52957 467 64 1) (63 53424 1400 64 1) (73 53424 1818 56 1) (75 53473 1769 56 1) (78 53523 1719 56 1) (82 53572 1670 56 1) (60 54824 467 64 1) (72 55291 1818 56 1) (75 55341 1768 56 1) (78 55390 1719 56 1) (84 55439 1670 56 1) (77 58286 228 64 1) (75 58514 227 64 1) (73 58741 228 64 1) (72 58969 228 64 1) (73 59197 227 64 1) (72 59424 228 64 1) (73 59652 228 64 1) (75 59880 228 64 1) (72 60108 227 64 1) (75 60335 228 64 1) (72 60563 228 64 1) (75 60791 83 73 1) (73 60867 83 45 1) (75 60943 83 51 1) (73 61019 83 58 1) (75 61094 76 79 1) (73 61170 987 64 1) (72 62157 228 64 1) (70 62385 228 64 1) (70 62613 933 56 1) (73 62662 884 56 1) (77 62711 1063 64 1) (78 63774 228 64 1) (77 64002 227 64 1) (75 64229 228 64 1) (73 64457 228 64 1) (72 64685 228 64 1) (70 64913 227 64 1) (68 65140 228 64 1) (66 65368 455 64 1) (68 65823 228 64 1) (65 66051 228 64 1) (63 66279 922 56 1) (66 66328 1329 64 1) (70 67657 227 64 1) (73 67884 228 64 1) (78 68112 1139 64 1) (77 69251 227 64 1) (75 69478 228 64 1) (73 69706 228 64 1) (72 69934 683 64 1) (75 70617 114 64 1) (73 70731 114 56 1) (72 70845 227 64 1) (73 71072 228 64 1) (75 71300 456 64 1) (65 71756 645 64 1) (67 72450 114 64 1) (69 72564 114 56 1) (70 72678 83 43 1) (69 72754 83 44 1) (70 72830 83 46 1) (69 72906 83 47 1) (70 72982 83 48 1) (69 73057 76 70 1) (67 73133 114 56 1) (69 73247 114 57 1) (67 73361 114 72 1) (69 73475 114 64 1) (70 73589 7287 64 1) (65 74955 456 64 1) (66 75411 1366 64 1) (63 76777 455 64 1) (60 77232 1139 64 1) (61 78371 228 64 1) (60 78599 227 64 1) (61 78826 228 64 1) (63 79054 228 64 1) (61 79282 228 64 1) (60 79510 227 64 1) (61 79737 228 64 1) (63 79965 228 64 1) (65 80193 228 64 1) (63 80421 227 64 1) (65 80648 228 64 1) (66 80876 892 64 1) (69 80876 1822 64 1) (60 80876 1822 64 1) (66 81787 76 80 1) (65 81863 83 43 1) (66 81939 83 46 1) (65 82015 83 49 1) (66 82091 83 52 1) (65 82166 84 55 1) (66 82242 84 57 1) (65 82318 76 63 1) (63 82470 228 64 1) (70 82698 1366 64 1) (61 82698 1366 64 1) (72 84064 456 64 1) (63 84064 456 64 1) (65 84520 1806 56 1) (70 84569 1757 56 1) (73 84618 1708 60 1) (65 86376 1806 56 1) (70 86425 1757 56 1) (73 86474 1708 64 1) (73 88231 1367 64 1) (70 88231 1367 64 1) (64 88231 1367 64 1) (71 89598 228 64 1) (70 89826 227 64 1) (70 90053 3188 56 1) (76 90053 3188 56 1) (73 90053 3188 56 1) (75 93241 228 64 1) (73 93469 228 64 1) (79 93697 3188 56 1) (73 93697 3188 56 1) (70 93697 3188 56 1) (77 96885 228 64 1) (75 97113 227 64 1) (80 97340 2278 56 1) (71 97340 1822 56 1) (75 97340 1822 56 1) (79 99618 455 64 1) (80 100073 456 64 1) (82 100529 417 64 1) (83 100995 76 72 1) (79 100995 3644 64 1) (75 100995 1822 64 1) (82 101071 84 45 1) (83 101147 84 50 1) (82 101223 84 55 1) (83 101299 76 86 1) (82 101375 2353 64 1) (73 102817 1822 64 1) (80 103728 911 64 1) (75 104639 1366 64 1) (80 104639 1366 64 1) (71 104639 1366 64 1) (83 106005 456 64 1) (77 106461 1366 64 1) (78 107827 228 64 1) (80 108055 228 64 1) (74 108283 1366 64 1) (75 109649 228 64 1) (77 109877 227 64 1) (70 110104 1367 64 1) (80 111471 455 64 1) (74 111926 1366 64 1) (75 113292 228 64 1) (77 113520 228 64 1) (70 113748 1366 64 1) (72 115114 228 64 1) (74 115342 228 64 1) (75 115570 1366 64 1) (73 116936 228 64 1) (71 117164 227 64 1) (73 117391 1822 64 1) (73 119213 1731 56 1) (63 119213 1731 56 1) (70 119213 1731 56 1) (73 121035 1366 64 1) (70 121035 1366 64 1) (63 121035 1366 64 1) (71 122401 228 64 1) (70 122629 228 64 1) (71 122857 1822 64 1) (63 124679 1806 56 1) (68 124728 1757 56 1) (71 124777 1708 64 1) (65 126535 1389 56 1) (68 126584 1340 56 1) (71 126633 1291 64 1) (70 127924 227 64 1) (68 128151 228 64 1) (77 128379 1366 64 1) (71 129745 418 64 1) (71 130212 84 77 1) (70 130288 84 80 1) (71 130364 84 42 1) (70 130440 84 43 1) (71 130516 83 44 1) (70 130592 83 45 1) (71 130668 83 47 1) (70 130744 83 48 1) (71 130820 83 49 1) (70 130895 84 50 1) (71 130971 84 51 1) (70 131047 84 52 1) (71 131123 84 54 1) (70 131199 84 55 1) (71 131275 83 56 1) (70 131351 83 57 1) (71 131427 83 58 1) (70 131503 76 59 1) (71 131579 227 70 1) (68 131806 228 64 1) (63 132034 1833 56 1) (66 132083 2012 64 1) (63 134095 228 64 1) (65 134323 227 64 1) (66 134550 228 64 1) (68 134778 228 64 1) (70 135006 228 64 1) (72 135234 227 64 1) (74 135461 228 64 1) (75 135689 228 64 1) (77 135917 227 64 1) (78 136144 228 64 1) (80 136372 228 64 1) (78 136600 228 64 1) (77 136828 227 64 1) (78 137055 228 64 1) (75 137283 228 64 1) (64 137511 1400 64 1) (68 137560 1351 64 1) (71 137610 1301 64 1) (76 137659 1252 64 1) (71 138911 228 64 1) (69 139139 228 64 1) (68 139367 1366 64 1) (69 140733 228 64 1) (71 140961 228 64 1) (64 141189 1366 64 1) (66 142555 228 64 1) (68 142783 227 64 1) (62 143010 1367 64 1) (65 144377 227 64 1) (68 144604 228 64 1) (71 144832 1366 64 1) (70 146198 228 64 1) (68 146426 228 64 1) (77 146654 1366 64 1) (75 148020 228 64 1) (74 148248 228 64 1) (83 148476 455 64 1) (81 148931 911 64 1) (82 149842 456 64 1) (66 150298 1806 56 1) (70 150347 1757 56 1) (75 150396 1708 64 1) (65 152153 1807 56 1) (70 152203 1757 56 1) (74 152252 1291 56 1) (75 153543 417 64 1) (75 154009 8460 56 1) (70 154009 911 64 1) (63 154009 911 64 1) (68 155148 228 64 1) (67 155376 227 64 1) (68 155603 190 60 1) (70 155843 83 72 1) (68 155918 84 47 1) (70 155994 84 51 1) (68 156070 84 56 1) (70 156146 76 50 1) (68 156222 2771 64 1) (67 159042 228 64 1) (68 159270 190 64 1) (70 159509 4972 64 1) (75 162469 228 64 1) (73 162697 228 64 1) (71 162925 227 64 1) (73 163152 1378 64 1) (70 164530 456 64 1) (63 164986 2922 64 1) (71 164986 2922 64 1) (68 164986 1821 64 1) (71 167957 228 64 1) (63 167957 228 64 1) (61 168185 228 64 1) (70 168185 228 64 1) (59 168413 228 64 1) (68 168413 228 64 1) (61 168641 1366 64 1) (70 168641 1366 64 1) (67 170007 455 64 1) (58 170007 455 64 1) (68 170462 1784 56 1) (62 170462 1784 56 1) (59 170462 1784 56 1) (59 172296 1783 56 1) (68 172296 1783 56 1) (62 172296 1783 56 1) (68 174129 1784 56 1) (59 174129 1784 56 1) (62 174129 1784 56 1) (68 175962 1784 56 1) (59 175962 1784 56 1) (65 175962 1784 56 1) (59 177795 1784 56 1) (68 177795 1784 56 1) (65 177795 1784 56 1) (59 179628 1784 56 1) (68 179628 1784 56 1) (65 179628 1784 56 1) (68 181461 1784 56 1) (65 181461 1784 56 1) (62 181461 1784 56 1) (68 183295 1783 56 1) (62 183295 1783 56 1) (65 183295 1783 56 1) (68 185128 1784 56 1) (65 185128 1784 56 1) (62 185128 1784 56 1) (62 186988 1780 56 1) (65 187037 1731 56 1) (68 187086 1682 56 1) (71 187136 1897 56 1) (70 189033 228 64 1) (68 189261 228 64 1) (66 189489 227 64 1) (65 189716 228 64 1) (63 189944 228 64 1) (62 190172 228 64 1) (65 190400 227 64 1) (68 190627 228 64 1) (71 190855 228 64 1) (74 191083 227 64 1) (77 191310 228 64 1) (80 191538 228 64 1) (83 191766 228 64 1) (82 191994 227 64 1) (74 192221 228 64 1) (75 192449 1366 64 1) (66 193815 418 64 1) (70 193815 467 64 1) (68 194282 114 72 1) (63 194282 1833 64 1) (66 194396 1670 64 1) (66 196115 76 74 1) (62 196115 1822 64 1) (65 196191 84 44 1) (66 196267 84 48 1) (65 196343 84 52 1) (66 196419 84 56 1) (65 196495 76 73 1) (63 196571 455 64 1) (65 197026 911 64 1) (63 197937 2961 64 1) (65 200898 227 64 1) (67 201125 228 64 1) (68 201353 228 64 1) (70 201581 1138 64 1) (64 202719 228 64 1) (63 202947 228 64 1) (61 203175 228 64 1) (59 203403 2505 64 1) (63 205908 227 64 1) (65 206135 228 64 1) (67 206363 228 64 1) (68 206591 227 64 1) (70 206818 228 64 1) (71 207046 570 64 1) (70 207616 112 64 1) (68 207728 110 64 1) (66 207838 110 64 1) (65 207948 219 64 1) (66 208167 220 64 1) (68 208387 219 64 1) (65 208606 220 64 1) (62 208826 4573 56 1) (59 210144 219 64 1) (58 210363 220 64 1) (59 210583 1337 64 1) (56 211920 414 64 1) (53 212334 1411 64 1) (62 213433 312 64 1) (55 213745 3750 56 1) (58 213745 3750 56 1) (63 213745 3750 64 1))" "((58 19584 456 64 2) (54 20040 1366 64 2) (51 21406 455 64 2) (46 21861 1784 64 2) (46 23695 1818 56 2) (49 23744 1769 56 2) (54 23793 1720 56 2) (58 23843 1670 56 2) (46 25562 1818 56 2) (49 25611 1769 56 2) (54 25661 1719 56 2) (58 25710 1670 56 2) (47 27429 1818 56 2) (51 27479 1768 56 2) (54 27528 1719 56 2) (59 27577 1746 56 2) (54 30652 455 64 2) (51 31107 1366 64 2) (47 32473 456 64 2) (43 32929 1784 64 2) (43 34762 1818 56 2) (46 34811 1769 56 2) (51 34861 1719 56 2) (55 34910 1670 56 2) (43 36629 1818 56 2) (46 36679 1768 56 2) (51 36728 1719 56 2) (55 36777 1670 56 2) (44 38497 1818 56 2) (47 38546 1769 56 2) (51 38595 1720 56 2) (56 38645 1670 56 2) (57 54938 1784 64 2) (57 56771 1807 56 2) (60 56821 1757 56 2) (65 56870 1708 56 2) (57 58627 1807 56 2) (60 58677 1757 56 2) (65 58726 1708 56 2) (58 60483 1807 56 2) (61 60533 1757 56 2) (65 60582 1708 56 2) (58 62339 1807 56 2) (61 62389 1757 56 2) (65 62438 1708 56 2) (58 64195 1807 56 2) (61 64245 1757 56 2) (65 64294 1708 56 2) (51 66051 1807 56 2) (58 66101 1757 56 2) (61 66150 1708 56 2) (51 67907 1807 56 2) (58 67956 1758 56 2) (60 68006 1708 56 2) (51 69763 1807 56 2) (58 69812 1758 56 2) (60 69862 1708 56 2) (51 71619 1807 56 2) (57 71668 1758 56 2) (60 71718 1708 56 2) (49 73475 1807 56 2) (53 73524 1758 56 2) (58 73574 1708 56 2) (58 75331 1784 56 2) (51 75331 1784 56 2) (53 77164 1784 56 2) (41 78997 1784 56 2) (53 78997 1784 56 2) (41 80830 1784 56 2) (53 80830 1784 56 2) (58 82664 1783 56 2) (53 82664 1783 56 2) (46 82664 1783 56 2) (46 85852 455 64 2) (49 86307 1367 64 2) (53 87674 455 64 2) (43 88129 2960 64 2) (46 91089 228 64 2) (44 91317 228 64 2) (43 91545 228 64 2) (49 91773 3188 64 2) (47 94961 227 64 2) (46 95188 228 64 2) (52 95416 456 64 2) (51 95872 455 64 2) (52 96327 455 64 2) (49 96782 456 64 2) (47 97238 228 64 2) (46 97466 227 64 2) (44 97693 228 64 2) (46 97921 228 64 2) (47 98149 228 64 2) (44 98377 227 64 2) (46 98604 228 64 2) (47 98832 228 64 2) (40 99060 1138 64 2) (52 100198 228 64 2) (51 100426 228 64 2) (49 100654 228 64 2) (51 100882 1366 64 2) (49 102248 455 64 2) (51 102703 1367 64 2) (39 104070 455 64 2) (44 104525 1822 64 2) (59 107713 456 64 2) (53 108169 1366 64 2) (54 109535 228 64 2) (56 109763 227 64 2) (50 109990 1367 64 2) (51 111357 228 64 2) (53 111585 227 64 2) (46 111812 1367 64 2) (56 113179 455 64 2) (50 113634 1366 64 2) (51 115000 228 64 2) (53 115228 228 64 2) (42 115456 1822 64 2) (43 117278 1366 64 2) (58 118644 455 64 2) (55 119099 1367 64 2) (51 120466 455 64 2) (44 120921 1822 64 2) (59 124109 456 64 2) (56 124565 1366 64 2) (53 125931 418 64 2) (50 126398 1807 64 2) (53 126447 1758 56 2) (56 126497 1708 56 2) (49 128254 1806 56 2) (53 128303 1757 56 2) (58 128353 1707 56 2) (49 130110 1806 56 2) (53 130159 1757 56 2) (58 130208 1708 56 2) (51 131966 1806 56 2) (54 132015 1757 56 2) (58 132064 1708 56 2) (51 133822 1806 56 2) (54 133871 1757 56 2) (58 133920 1708 56 2) (51 135678 1806 56 2) (54 135727 1757 56 2) (58 135776 1708 56 2) (44 137534 1818 56 2) (47 137583 1769 56 2) (52 137632 1720 56 2) (56 137682 1670 56 2) (44 143033 1822 56 2) (53 143033 1822 56 2) (58 143033 1822 56 2) (46 150320 1818 56 2) (51 150370 1768 56 2) (54 150419 1719 56 2) (58 150468 1670 56 2) (46 152188 1818 56 2) (53 152237 1769 56 2) (56 152286 1720 56 2) (58 152336 1670 56 2) (59 154055 1784 56 2) (47 154055 1784 56 2) (59 155888 1784 56 2) (63 155888 1784 56 2) (59 157721 1784 56 2) (63 157721 1784 56 2) (63 159554 1784 56 2) (58 159554 1784 56 2) (55 159554 1784 56 2) (63 161388 1783 56 2) (58 161388 1783 56 2) (55 161388 1783 56 2) (63 163221 1784 56 2) (58 163221 1784 56 2) (55 163221 1784 56 2) (56 165054 1784 56 2) (59 165054 1784 56 2) (52 166887 1784 56 2) (52 168720 1784 56 2) (53 170554 2960 64 2) (54 173514 228 64 2) (53 173742 227 64 2) (51 173969 228 64 2) (53 174197 683 64 2) (54 174880 228 64 2) (56 175108 228 64 2) (53 175336 227 64 2) (54 175563 228 64 2) (56 175791 228 64 2) (50 176019 2960 64 2) (51 178979 228 64 2) (50 179207 228 64 2) (48 179435 227 64 2) (50 179662 684 64 2) (51 180346 227 64 2) (53 180573 228 64 2) (50 180801 228 64 2) (51 181029 228 64 2) (53 181257 227 64 2) (47 181484 2961 64 2) (49 184445 227 64 2) (47 184672 228 64 2) (46 184900 228 64 2) (47 185128 228 64 2) (46 185356 227 64 2) (44 185583 228 64 2) (46 185811 228 64 2) (47 186039 227 64 2) (44 186266 228 64 2) (46 186494 228 64 2) (47 186722 228 64 2) (38 186950 1821 64 2) (51 193781 418 56 2) (39 193781 467 56 2) (51 194248 1784 56 2) (54 194248 1784 56 2) (46 194248 1784 56 2) (53 196081 1784 56 2) (56 196081 1784 56 2) (46 196081 1784 56 2) (51 197914 1818 56 2) (55 197964 1768 56 2) (58 198013 1719 56 2) (61 198063 1669 56 2) (51 199782 1818 56 2) (55 199831 1769 56 2) (58 199880 1720 56 2) (61 199930 1670 56 2) (51 201649 1818 56 2) (55 201698 1769 56 2) (58 201748 1719 56 2) (61 201797 1670 56 2) (56 203516 1784 56 2) (51 203516 1784 56 2) (51 205350 1783 56 2) (56 205350 1783 56 2) (56 207183 1738 56 2) (51 207183 1738 56 2) (53 208969 1720 56 2) (51 208969 1720 56 2) (53 210737 1701 56 2) (51 210737 1701 56 2) (51 212480 1349 56 2) (51 213862 3751 56 2) (39 213862 3751 56 2) (46 213862 3751 56 2))" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-MIDI-NOTES" (quote get-midi-notes) (quote ((om-load-inputfun (quote input-funbox) "a MIDI file or sequence" "SELF" nil))) (om-make-point 291 314) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 621 177) (om-make-point 112 104) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300 7000 6600) (6300 6600) (7000) (6300 6600 7500) (7800) (7100 6800 6300) (6300 7100 6800) (7500) (7100 6800 6300 8000) (8300) (6300 6500 6800 7400) (6200 6500 6800) (7700) (6800 6200 6500 7000) (6800 7000) (6800 7000) (6600) (6800) (7000) (6600 6300 6800) (6600 6800) (6600 6800) (6600 6800) (6500) (6300) (7800) (7500 7000 6600) (7800) (7300 7000 6600) (7800) (7800) (7600) (7500) (7600) (7300) (7100 6600 6300) (7500) (7500 7100 6600) (7500 7100 6600) (8200 7500 7000) (7500) (7300) (7100) (7300) (7000) (7100 7300) (7100 7300) (7100 7300) (7000) (6800) (8300 8000 7500) (7100) (8300 8000 7500 6800) (6500) (8000 7700 6200) (8300) (7000 6500 6200) (8200) (8000) (7800) (7000 6500 6200 7700) (7800) (7700) (7800) (8000) (7800) (8000) (7700) (7000 7800 6600 6300 8000) (7800 8000) (7800 8000) (7700) (7500) (7800 7500 7000) (8200) (6600) (7800 7500 7300 6300) (8200) (6000) (7800 7500 7200) (8400) (7700) (7500) (7300) (7200) (7300) (7200) (7300) (7500) (7200) (7500) (7200) (7300 7500) (7300 7500) (7300 7500) (7200) (7000) (7700 7300 7000) (7800) (7700) (7500) (7300) (7200) (7000) (6800) (6600) (6800) (6500) (6600 6300) (7000) (7300) (7800) (7700) (7500) (7300) (7200) (7500) (7300) (7200) (7300) (7500) (6500) (6700) (6900) (6900 7000) (6900 7000) (6900 7000) (6700) (6900) (6700) (6900) (7000) (6500) (6600) (6300) (6000) (6100) (6000) (6100) (6300) (6100) (6000) (6100) (6300) (6500) (6300) (6500) (6000 6900 6600) (6500 6600) (6500 6600) (6500 6600) (6500 6600) (6300) (6100 7000) (6300 7200) (7300 7000 6500) (7300 7000 6500) (6400 7000 7300) (7100) (7000) (7300 7600 7000) (7500) (7300) (7000 7300 7900) (7700) (7500) (7500 7100 8000) (7900) (8000) (8200) (8200 7500 7900 8300) (8200 8300) (8200 8300) (7300) (8000) (7100 8000 7500) (8300) (7700) (7800) (8000) (7400) (7500) (7700) (7000) (8000) (7400) (7500) (7700) (7000) (7200) (7400) (7500) (7300) (7100) (7300) (7000 6300 7300) (6300 7000 7300) (7100) (7000) (7100) (7100 6800 6300) (7100 6800 6500) (7000) (6800) (7700) (7100) (7000 7100) (7000 7100) (7000 7100) (7000 7100) (7000 7100) (7000 7100) (7000 7100) (7000 7100) (7000 7100) (7100) (6800) (6600 6300) (6300) (6500) (6600) (6800) (7000) (7200) (7400) (7500) (7700) (7800) (8000) (7800) (7700) (7800) (7500) (7100 6800 6400) (7600) (7100) (6900) (6800) (6900) (7100) (6400) (6600) (6800) (6200) (6500) (6800) (7100) (7000) (6800) (7700) (7500) (7400) (8300) (8100) (8200) (7500 7000 6600) (7400 7000 6500) (7500) (6300 7000 7500) (6800) (6700) (6800) (6800 7000) (6800 7000) (6800 7000) (6700) (6800) (7000) (7500) (7300) (7100) (7300) (7000) (6800 7100 6300) (6300 7100) (7000 6100) (6800 5900) (7000 6100) (5800 6700) (5900 6200 6800) (6200 6800 5900) (6200 5900 6800) (6500 5900 6800) (6500 6800 5900) (6500 6800 5900) (6200 6500 6800) (6500 6200 6800) (6200 6500 6800) (6800 6500 6200) (7100) (7000) (6800) (6600) (6500) (6300) (6200) (6500) (6800) (7100) (7400) (7700) (8000) (8300) (8200) (7400) (7500) (7000 6600) (6300 6800) (6600) (6500 6200 6600) (6500 6600) (6500 6600) (6300) (6500) (6300) (6500) (6700) (6800) (7000) (6400) (6300) (6100) (5900) (6300) (6500) (6700) (6800) (7000) (7100) (7000) (6800) (6600) (6500) (6600) (6800) (6500) (6200) (5900) (5800) (5900) (5600) (5300) (6200) (6300 5800 5500))) :lonset (quote (0 1833 3200 3666 5033 5500 7333 8699 9166 10532 10999 12832 14199 14665 14817 14969 15804 16032 16259 16499 16650 16802 16954 17865 18093 18332 20165 20313 22032 22180 25027 25255 25482 25710 27076 27532 27680 29399 31255 33138 36083 36311 36538 36766 38132 38588 38740 38891 39954 40182 40410 41799 42265 43655 44121 44269 45989 47150 47378 47606 47845 48095 48323 48551 48778 49006 49234 49462 49701 49875 50027 51090 51317 51557 51705 52957 53424 53572 54824 55291 55439 58286 58514 58741 58969 59197 59424 59652 59880 60108 60335 60563 60791 60943 61094 62157 62385 62613 63774 64002 64229 64457 64685 64913 65140 65368 65823 66051 66279 67657 67884 68112 69251 69478 69706 69934 70617 70731 70845 71072 71300 71756 72450 72564 72678 72830 72982 73133 73247 73361 73475 73589 74955 75411 76777 77232 78371 78599 78826 79054 79282 79510 79737 79965 80193 80421 80648 80876 81787 81939 82091 82242 82470 82698 84064 84520 86376 88231 89598 89826 90053 93241 93469 93697 96885 97113 97340 99618 100073 100529 100995 101147 101299 102817 103728 104639 106005 106461 107827 108055 108283 109649 109877 110104 111471 111926 113292 113520 113748 115114 115342 115570 116936 117164 117391 119213 121035 122401 122629 122857 124679 126535 127924 128151 128379 129745 130212 130364 130516 130668 130820 130971 131123 131275 131427 131579 131806 132034 134095 134323 134550 134778 135006 135234 135461 135689 135917 136144 136372 136600 136828 137055 137283 137511 137659 138911 139139 139367 140733 140961 141189 142555 142783 143010 144377 144604 144832 146198 146426 146654 148020 148248 148476 148931 149842 150298 152153 153543 154009 155148 155376 155603 155843 155994 156146 159042 159270 159509 162469 162697 162925 163152 164530 164986 167957 168185 168413 168641 170007 170462 172296 174129 175962 177795 179628 181461 183295 185128 186988 187136 189033 189261 189489 189716 189944 190172 190400 190627 190855 191083 191310 191538 191766 191994 192221 192449 193815 194282 194396 196115 196267 196419 196571 197026 197937 200898 201125 201353 201581 202719 202947 203175 203403 205908 206135 206363 206591 206818 207046 207616 207728 207838 207948 208167 208387 208606 208826 210144 210363 210583 211920 212334 213433 213745 217495)) :ldur (quote ((1784 1784 1784) (1784 1784) (466) (1784 1784 1367) (467) (1783 1783 1783) (1784 1784 1784) (467) (1784 1784 1784 1366) (467) (1784 1784 1784 1784) (1784 1784 1784) (466) (84 1784 1784 84) (84 84) (759 76) (228) (227) (240) (84 1783 83) (84 84) (84 84) (835 76) (228) (239) (1784) (1719 1769 1818) (1670) (1719 1768 1818) (1670) (228) (227) (228) (1366) (456) (1720 1769 1818) (1670) (1708 1758 1807) (1708 1758 1807) (1670 1719 1768) (228) (227) (228) (1366) (456) (83 83) (84 83) (987 76) (228) (228) (1708 1757 1806) (466) (1708 1757 1807 1390) (466) (1719 1768 1818) (1670) (1708 1757 1806) (228) (228) (239) (1708 1757 1806 250) (228) (228) (227) (228) (228) (228) (239) (1708 84 1757 1806 98) (84 84) (987 76) (227) (240) (1720 1769 1818) (1670) (467) (1719 1769 1818 1400) (1670) (467) (1719 1768 1818) (1670) (228) (227) (228) (228) (227) (228) (228) (228) (227) (228) (228) (83 83) (83 83) (987 76) (228) (228) (1063 884 933) (228) (227) (228) (228) (228) (227) (228) (455) (228) (228) (1329 922) (227) (228) (1139) (227) (228) (228) (683) (114) (114) (227) (228) (456) (645) (114) (114) (83 83) (83 83) (76 83) (114) (114) (114) (114) (7287) (456) (1366) (455) (1139) (228) (227) (228) (228) (228) (227) (228) (228) (228) (227) (228) (1822 1822 892) (83 76) (83 83) (84 83) (76 84) (228) (1366 1366) (456 456) (1708 1757 1806) (1708 1757 1806) (1367 1367 1367) (228) (227) (3188 3188 3188) (228) (228) (3188 3188 3188) (228) (227) (1822 1822 2278) (455) (456) (417) (84 1822 3644 76) (84 84) (2353 76) (1822) (911) (1366 1366 1366) (456) (1366) (228) (228) (1366) (228) (227) (1367) (455) (1366) (228) (228) (1366) (228) (228) (1366) (228) (227) (1822) (1731 1731 1731) (1366 1366 1366) (228) (228) (1822) (1708 1757 1806) (1291 1340 1389) (227) (228) (1366) (418) (84 84) (84 84) (83 83) (83 83) (84 83) (84 84) (84 84) (83 83) (76 83) (227) (228) (2012 1833) (228) (227) (228) (228) (228) (227) (228) (228) (227) (228) (228) (228) (227) (228) (228) (1301 1351 1400) (1252) (228) (228) (1366) (228) (228) (1366) (228) (227) (1367) (227) (228) (1366) (228) (228) (1366) (228) (228) (455) (911) (456) (1708 1757 1806) (1291 1757 1807) (417) (911 911 8460) (228) (227) (190) (84 83) (84 84) (2771 76) (228) (190) (4972) (228) (228) (227) (1378) (456) (1821 2922 2922) (228 228) (228 228) (228 228) (1366 1366) (455 455) (1784 1784 1784) (1783 1783 1783) (1784 1784 1784) (1784 1784 1784) (1784 1784 1784) (1784 1784 1784) (1784 1784 1784) (1783 1783 1783) (1784 1784 1784) (1682 1731 1780) (1897) (228) (228) (227) (228) (228) (228) (227) (228) (228) (227) (228) (228) (228) (227) (228) (1366) (467 418) (1833 114) (1670) (84 1822 76) (84 84) (76 84) (455) (911) (2961) (227) (228) (228) (1138) (228) (228) (228) (2505) (227) (228) (228) (227) (228) (570) (112) (110) (110) (219) (220) (219) (220) (4573) (219) (220) (1337) (414) (1411) (312) (3750 3750 3750))) :lvel (quote ((56 56 56) (56 56) (64) (56 56 64) (64) (56 56 56) (56 56 56) (64) (56 56 56 64) (64) (56 56 56 64) (56 56 56) (64) (45 56 56 74) (58 51) (76 52) (64) (64) (64) (42 56 72) (51 47) (59 55) (76 73) (64) (64) (64) (56 56 56) (56) (56 56 56) (56) (64) (64) (64) (64) (64) (56 56 56) (56) (56 56 56) (56 56 56) (56 56 56) (64) (64) (64) (64) (64) (45 72) (58 51) (79 86) (64) (64) (56 56 56) (64) (56 56 56 64) (64) (56 56 64) (56) (56 56 56) (64) (64) (64) (56 56 56 64) (64) (64) (64) (64) (64) (64) (64) (56 45 56 56 74) (58 51) (64 77) (64) (64) (56 56 56) (64) (64) (56 56 56 64) (56) (64) (56 56 56) (56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (45 73) (58 51) (64 79) (64) (64) (64 56 56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 56) (64) (64) (64) (64) (64) (64) (64) (64) (56) (64) (64) (64) (64) (64) (56) (44 43) (47 46) (70 48) (56) (57) (72) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 64 64) (43 80) (49 46) (55 52) (63 57) (64) (64 64) (64 64) (60 56 56) (64 56 56) (64 64 64) (64) (64) (56 56 56) (64) (64) (56 56 56) (64) (64) (56 56 56) (64) (64) (64) (45 64 64 72) (55 50) (64 86) (64) (64) (64 64 64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56 56 56) (64 64 64) (64) (64) (64) (64 56 56) (64 56 56) (64) (64) (64) (64) (80 77) (43 42) (45 44) (48 47) (50 49) (52 51) (55 54) (57 56) (59 58) (70) (64) (64 56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 64 64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 56 56) (56 56 56) (64) (64 64 56) (64) (64) (60) (47 72) (56 51) (64 50) (64) (64) (64) (64) (64) (64) (64) (64) (64 64 64) (64 64) (64 64) (64 64) (64 64) (64 64) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64 64) (64 72) (64) (44 64 74) (52 48) (73 56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56) (64) (64) (64) (64) (64) (64) (64 56 56))) :loffset (quote ((0 0 0) (0 0) (0) (0 0 0) (0) (0 0 0) (0 0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0) (0) (76 0 0 0) (76 0) (76 0) (0) (0) (0) (75 0 0) (76 0) (76 0) (76 0) (0) (0) (0) (99 49 0) (0) (99 50 0) (0) (0) (0) (0) (0) (0) (98 49 0) (0) (99 49 0) (99 49 0) (98 49 0) (0) (0) (0) (0) (0) (76 0) (75 0) (76 0) (0) (0) (98 49 0) (0) (99 50 0 0) (0) (99 50 0) (0) (98 49 0) (0) (0) (0) (98 49 0 0) (0) (0) (0) (0) (0) (0) (0) (98 98 49 0 0) (76 0) (76 0) (0) (0) (98 49 0) (0) (0) (99 49 0 0) (0) (0) (99 50 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (76 0) (76 0) (76 0) (0) (0) (98 49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (76 0) (76 0) (75 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (76 0) (76 0) (75 0) (76 0) (0) (0 0) (0 0) (98 49 0) (98 49 0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0) (76 0 0 0) (76 0) (76 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0) (0) (98 49 0) (98 49 0) (0) (0) (0) (0) (76 0) (76 0) (76 0) (76 0) (75 0) (76 0) (76 0) (76 0) (76 0) (0) (0) (49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (99 49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (98 49 0) (99 50 0) (0) (0 0 0) (0) (0) (0) (75 0) (76 0) (76 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (98 49 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (76 0 0) (76 0) (76 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0))) :lchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5800) (5400) (5100) (4600) (5400 4900 4600) (5800) (5400 4900 4600) (5800) (5400 5100 4700) (5900) (5400) (5100) (4700) (4300) (5100 4600 4300) (5500) (5100 4600 4300) (5500) (5100 4700 4400) (5600) (5700) (6500 6000 5700) (6500 6000 5700) (6500 6100 5800) (6500 6100 5800) (6500 6100 5800) (6100 5800 5100) (6000 5800 5100) (6000 5800 5100) (6000 5700 5100) (5800 5300 4900) (5100 5800) (5300) (5300 4100) (5300 4100) (4600 5300 5800) (4600) (4900) (5300) (4300) (4600) (4400) (4300) (4900) (4700) (4600) (5200) (5100) (5200) (4900) (4700) (4600) (4400) (4600) (4700) (4400) (4600) (4700) (4000) (5200) (5100) (4900) (5100) (4900) (5100) (3900) (4400) (5900) (5300) (5400) (5600) (5000) (5100) (5300) (4600) (5600) (5000) (5100) (5300) (4200) (4300) (5800) (5500) (5100) (4400) (5900) (5600) (5300) (5600 5300 5000) (5800 5300 4900) (5800 5300 4900) (5800 5400 5100) (5800 5400 5100) (5800 5400 5100) (5200 4700 4400) (5600) (5800 5300 4400) (5400 5100 4600) (5800) (5600 5300 4600) (5800) (4700 5900) (6300 5900) (6300 5900) (5500 5800 6300) (5500 5800 6300) (5500 5800 6300) (5900 5600) (5200) (5200) (5300) (5400) (5300) (5100) (5300) (5400) (5600) (5300) (5400) (5600) (5000) (5100) (5000) (4800) (5000) (5100) (5300) (5000) (5100) (5300) (4700) (4900) (4700) (4600) (4700) (4600) (4400) (4600) (4700) (4400) (4600) (4700) (3800) (3900 5100) (4600 5400 5100) (4600 5600 5300) (5800 5500 5100) (6100) (5800 5500 5100) (6100) (5800 5500 5100) (6100) (5100 5600) (5600 5100) (5100 5600) (5100 5300) (5100 5300) (5100) (4600 3900 5100))) :lonset (quote (19584 20040 21406 21861 23695 23843 25562 25710 27429 27577 30652 31107 32473 32929 34762 34910 36629 36777 38497 38645 54938 56771 58627 60483 62339 64195 66051 67907 69763 71619 73475 75331 77164 78997 80830 82664 85852 86307 87674 88129 91089 91317 91545 91773 94961 95188 95416 95872 96327 96782 97238 97466 97693 97921 98149 98377 98604 98832 99060 100198 100426 100654 100882 102248 102703 104070 104525 107713 108169 109535 109763 109990 111357 111585 111812 113179 113634 115000 115228 115456 117278 118644 119099 120466 120921 124109 124565 125931 126398 128254 130110 131966 133822 135678 137534 137682 143033 150320 150468 152188 152336 154055 155888 157721 159554 161388 163221 165054 166887 168720 170554 173514 173742 173969 174197 174880 175108 175336 175563 175791 176019 178979 179207 179435 179662 180346 180573 180801 181029 181257 181484 184445 184672 184900 185128 185356 185583 185811 186039 186266 186494 186722 186950 193781 194248 196081 197914 198063 199782 199930 201649 201797 203516 205350 207183 208969 210737 212480 213862 217613)) :ldur (quote ((456) (1366) (455) (1784) (1720 1769 1818) (1670) (1719 1769 1818) (1670) (1719 1768 1818) (1746) (455) (1366) (456) (1784) (1719 1769 1818) (1670) (1719 1768 1818) (1670) (1720 1769 1818) (1670) (1784) (1708 1757 1807) (1708 1757 1807) (1708 1757 1807) (1708 1757 1807) (1708 1757 1807) (1708 1757 1807) (1708 1758 1807) (1708 1758 1807) (1708 1758 1807) (1708 1758 1807) (1784 1784) (1784) (1784 1784) (1784 1784) (1783 1783 1783) (455) (1367) (455) (2960) (228) (228) (228) (3188) (227) (228) (456) (455) (455) (456) (228) (227) (228) (228) (228) (227) (228) (228) (1138) (228) (228) (228) (1366) (455) (1367) (455) (1822) (456) (1366) (228) (227) (1367) (228) (227) (1367) (455) (1366) (228) (228) (1822) (1366) (455) (1367) (455) (1822) (456) (1366) (418) (1708 1758 1807) (1707 1757 1806) (1708 1757 1806) (1708 1757 1806) (1708 1757 1806) (1708 1757 1806) (1720 1769 1818) (1670) (1822 1822 1822) (1719 1768 1818) (1670) (1720 1769 1818) (1670) (1784 1784) (1784 1784) (1784 1784) (1784 1784 1784) (1783 1783 1783) (1784 1784 1784) (1784 1784) (1784) (1784) (2960) (228) (227) (228) (683) (228) (228) (227) (228) (228) (2960) (228) (228) (227) (684) (227) (228) (228) (228) (227) (2961) (227) (228) (228) (228) (227) (228) (228) (227) (228) (228) (228) (1821) (467 418) (1784 1784 1784) (1784 1784 1784) (1719 1768 1818) (1669) (1720 1769 1818) (1670) (1719 1769 1818) (1670) (1784 1784) (1783 1783) (1738 1738) (1720 1720) (1701 1701) (1349) (3751 3751 3751))) :lvel (quote ((64) (64) (64) (64) (56 56 56) (56) (56 56 56) (56) (56 56 56) (56) (64) (64) (64) (64) (56 56 56) (56) (56 56 56) (56) (56 56 56) (56) (64) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56) (56) (56 56) (56 56) (56 56 56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56 56 64) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56 56 56) (56) (56 56 56) (56 56 56) (56) (56 56 56) (56) (56 56) (56 56) (56 56) (56 56 56) (56 56 56) (56 56 56) (56 56) (56) (56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56 56) (56 56 56) (56 56 56) (56 56 56) (56) (56 56 56) (56) (56 56 56) (56) (56 56) (56 56) (56 56) (56 56) (56 56) (56) (56 56 56))) :loffset (quote ((0) (0) (0) (0) (98 49 0) (0) (99 49 0) (0) (99 50 0) (0) (0) (0) (0) (0) (99 49 0) (0) (99 50 0) (0) (98 49 0) (0) (0) (99 50 0) (99 50 0) (99 50 0) (99 50 0) (99 50 0) (99 50 0) (99 49 0) (99 49 0) (99 49 0) (99 49 0) (0 0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (99 49 0) (99 49 0) (98 49 0) (98 49 0) (98 49 0) (98 49 0) (98 49 0) (0) (0 0 0) (99 50 0) (0) (98 49 0) (0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0) (0 0 0) (99 50 0) (0) (98 49 0) (0) (99 49 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0 0))) :lchan (quote ((2) (2) (2) (2) (2 2 2) (2) (2 2 2) (2) (2 2 2) (2) (2) (2) (2) (2) (2 2 2) (2) (2 2 2) (2) (2 2 2) (2) (2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2) (2) (2 2) (2 2) (2 2 2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2 2 2) (2) (2 2 2) (2 2 2) (2) (2 2 2) (2) (2 2) (2 2) (2 2) (2 2 2) (2 2 2) (2 2 2) (2 2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2 2) (2 2 2) (2 2 2) (2 2 2) (2) (2 2 2) (2) (2 2 2) (2) (2 2) (2 2) (2 2) (2 2) (2 2) (2) (2 2 2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0 0 0) (0 0 0) (0) (0 0 0) (0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 709 351) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 119 52) (om-make-point 93 30) "Prelude8.mid" "\"Prelude8.mid\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INFILE" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 128 96) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Prelude8.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 131 165) (om-make-point 199 115) (let ((newobj (load-midi (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "Prelude8" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Prelude8.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems mode grillestep notechancolor? cmnpref obj-mode zoom deltapict winsize winpos player outport)) (list nil (quote t) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (om-make-point 946 516) (om-make-point 1596 212) (quote :midi-player) 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 1 nil 0) (8 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 1 nil 0) (5 2 2 2 nil 0) (5 3 2 3 nil 0) (5 4 2 4 nil 0) (5 5 2 5 nil 0) (5 6 2 6 nil 0) (5 7 2 7 nil 0) (5 1 4 0 nil 0) (9 0 4 1 nil 0) (7 0 5 0 nil 0) (6 0 7 0 nil 0) (29 1 7 1 nil 0) (10 0 8 1 nil 0) (14 2 8 2 nil 0) (14 3 8 3 nil 0) (14 4 8 4 nil 0) (14 5 8 5 nil 0) (14 7 8 7 nil 0) (14 1 10 0 nil 0) (9 0 10 1 nil 0) (13 0 11 1 nil 0) (14 1 12 0 nil 0) (14 2 12 1 nil 0) (14 3 12 2 nil 0) (14 4 12 3 nil 0) (14 5 12 4 nil 0) (14 6 12 5 nil 0) (14 7 12 6 nil 0) (12 0 13 0 nil 0) (16 0 14 0 nil 0) (15 0 16 0 nil 0) (29 1 16 1 nil 0) (19 0 17 1 nil 0) (25 0 18 0 nil 0) (21 0 19 0 nil 0) (20 0 21 0 nil 0) (25 0 21 1 nil 0) (22 0 23 0 nil 0) (27 1 23 1 nil 0) (24 0 25 0 nil 0) (27 1 25 1 nil 0) (27 1 26 0 nil 0) (28 0 27 1 nil 0) (32 0 28 0 nil 0) (32 0 29 0 nil 0) (30 0 31 0 nil 0) (31 0 32 0 nil 0))) nil 7.01))
