; OM File Header - Saved 2023/02/08 17:15:29
; (7.01 :patc (om-make-point 550 10) (om-make-point 122 25) (om-make-point 1105 709) "" 183 0 nil "2023/02/08 17:13:32")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../in-files/NdeYeBeyi.aiff\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "004-audio-representations-of-music1" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 76 30) (quote "Track info") "" (om-make-point 85 412) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-DUR-MS" (quote sound-dur-ms) (quote ((om-load-inputfun (quote input-funbox) "sound file or pathname" "S" nil))) (om-make-point 41 544) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-SOUND-N-SAMPLES" (quote om-sound-n-samples) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 253 546) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-SOUND-SAMPLE-RATE" (quote om-sound-sample-rate) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 379 546) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-SOUND-N-CHANNELS" (quote om-sound-n-channels) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 511 546) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-SOUND-FORMAT" (quote om-sound-format) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 638 546) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-SOUND-FILE-NAME" (quote om-sound-file-name) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 130 545) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 64 30) (quote "Markers") "" (om-make-point 518 375) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 464 360) (om-make-point 51 111) (load-buffer-textfile (quote ("2.992" "5.925" "8.709" "11.198" "14.367" "16.826" "19.937" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 145 42) (om-make-point 27 31) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "AUDIO-MIX-CONSOLE" (quote audio-mix-console) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "number of tracks in the console" "nbtracks" 1))) (om-make-point 85 88) (om-make-point 54 150) (when (find-class (quote audio-mix-console) nil) (let ((rep (make-instance (quote audio-mix-console) :nbtracks (quote 1)))) (setf (channels-ctrl rep) (list (if (find-class (quote audio-channel-ctrl) nil) (make-instance (quote audio-channel-ctrl) :track 1 :pan-ctrl 0 :vol-ctrl 100 :from-file t)))) rep)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 80 250) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NdeYeBeyi.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 249 155) (om-make-point 256 84) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "NdeYeBeyi" :type "aiff") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "NdeYeBeyi.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 161 32) (om-make-point 855 246) 0 nil 1 (quote :om-audio) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 213 10) (om-make-point 110 30) "NdeYeBeyi.aiff" "\"NdeYeBeyi.aiff\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INFILE" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 217 56) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NdeYeBeyi.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 246 255) (om-make-point 262 79) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "NdeYeBeyi" :type "aiff") 0 1.0 0))) (when thesound (setf (markers thesound) (quote (2.992 5.925 8.709 11.198 14.367 16.826 19.937)))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "NdeYeBeyi.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 198 56) (om-make-point 765 276) 0 nil 1 (quote :om-audio) nil nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((14 0 1 0 nil 0) (14 0 2 0 nil 0) (14 0 3 0 nil 0) (14 0 4 0 nil 0) (14 0 5 0 nil 0) (14 0 6 0 nil 0) (14 2 8 1 nil 0) (9 0 10 1 nil 0) (13 0 11 0 nil 0) (12 0 13 0 nil 0))) nil 7.01))
