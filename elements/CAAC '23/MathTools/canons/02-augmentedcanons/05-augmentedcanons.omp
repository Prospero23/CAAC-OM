; OM File Header - Saved 2023/03/13 12:00:10
; (6.2 :patc (om-make-point 104 73) (om-make-point 0 0) (om-make-point 1155 573) "non documentation" 183 0 nil "2023/03/13 12:00:10")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "05-augmentedcanons" (quote ((let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "CHORD-SEQS" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 269 278) (om-make-point 551 277) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quotelonset (quote (0 250 500 1000 1250 1750 3000 3250 3500 4000 4250 4750 6000 6250 6500 7000 7250 7750 9000 9250 9500 10000 10250 10750 12000 12250 12500 13000 13250 13750 15000 15250 15500 16000 16250 16750 18000 18250 18500 19000 19250 19750 21000 21250 21500 22000 22250 22750 24000 24250 24500 25000 25250 25750 27000 27250 27500 28000 28250 28750 30000 30250 30500 31000 31250 31750 33000 33250 33500 34000 34250 34750 36000 36250 36500 37000 37250 37750 39000 39250 39500 40000 40250 40750 42000 42250 42500 43000 43250 43750 44750)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200) (6200))) :lonset (quote (2500 3750 5000 7500 8750 11250 17500 18750 20000 22500 23750 26250 32500 33750 35000 37500 38750 41250 42250)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote ((nil (om-make-color 52/85 3/17 7/51)) ((0) (om-make-color 52/85 3/17 7/51)) ((0 0) (om-make-color 52/85 3/17 7/51)) ((1) (om-make-color 52/85 3/17 7/51)) ((1 0) (om-make-color 52/85 3/17 7/51)) ((2) (om-make-color 52/85 3/17 7/51)) ((2 0) (om-make-color 52/85 3/17 7/51)) ((3) (om-make-color 52/85 3/17 7/51)) ((3 0) (om-make-color 52/85 3/17 7/51)) ((4) (om-make-color 52/85 3/17 7/51)) ((4 0) (om-make-color 52/85 3/17 7/51)) ((5) (om-make-color 52/85 3/17 7/51)) ((5 0) (om-make-color 52/85 3/17 7/51)) ((6) (om-make-color 52/85 3/17 7/51)) ((6 0) (om-make-color 52/85 3/17 7/51)) ((7) (om-make-color 52/85 3/17 7/51)) ((7 0) (om-make-color 52/85 3/17 7/51)) ((8) (om-make-color 52/85 3/17 7/51)) ((8 0) (om-make-color 52/85 3/17 7/51)) ((9) (om-make-color 52/85 3/17 7/51)) ((9 0) (om-make-color 52/85 3/17 7/51)) ((10) (om-make-color 52/85 3/17 7/51)) ((10 0) (om-make-color 52/85 3/17 7/51)) ((11) (om-make-color 52/85 3/17 7/51)) ((11 0) (om-make-color 52/85 3/17 7/51)) ((12) (om-make-color 52/85 3/17 7/51)) ((12 0) (om-make-color 52/85 3/17 7/51)) ((13) (om-make-color 52/85 3/17 7/51)) ((13 0) (om-make-color 52/85 3/17 7/51)) ((14) (om-make-color 52/85 3/17 7/51)) ((14 0) (om-make-color 52/85 3/17 7/51)) ((15) (om-make-color 52/85 3/17 7/51)) ((15 0) (om-make-color 52/85 3/17 7/51)) ((16) (om-make-color 52/85 3/17 7/51)) ((16 0) (om-make-color 52/85 3/17 7/51)) ((17) (om-make-color 52/85 3/17 7/51)) ((17 0) (om-make-color 52/85 3/17 7/51))))) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400) (6400))) :lonset (quote (5500 6750 8000 10500 11750 14250 20500 21750 23000 25500 26750 29250 35500 36750 38000 40500 41750 44250 45250)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote ((nil (om-make-color 82/255 173/255 31/255)) ((0) (om-make-color 82/255 173/255 31/255)) ((0 0) (om-make-color 82/255 173/255 31/255)) ((1) (om-make-color 82/255 173/255 31/255)) ((1 0) (om-make-color 82/255 173/255 31/255)) ((2) (om-make-color 82/255 173/255 31/255)) ((2 0) (om-make-color 82/255 173/255 31/255)) ((3) (om-make-color 82/255 173/255 31/255)) ((3 0) (om-make-color 82/255 173/255 31/255)) ((4) (om-make-color 82/255 173/255 31/255)) ((4 0) (om-make-color 82/255 173/255 31/255)) ((5) (om-make-color 82/255 173/255 31/255)) ((5 0) (om-make-color 82/255 173/255 31/255)) ((6) (om-make-color 82/255 173/255 31/255)) ((6 0) (om-make-color 82/255 173/255 31/255)) ((7) (om-make-color 82/255 173/255 31/255)) ((7 0) (om-make-color 82/255 173/255 31/255)) ((8) (om-make-color 82/255 173/255 31/255)) ((8 0) (om-make-color 82/255 173/255 31/255)) ((9) (om-make-color 82/255 173/255 31/255)) ((9 0) (om-make-color 82/255 173/255 31/255)) ((10) (om-make-color 82/255 173/255 31/255)) ((10 0) (om-make-color 82/255 173/255 31/255)) ((11) (om-make-color 82/255 173/255 31/255)) ((11 0) (om-make-color 82/255 173/255 31/255)) ((12) (om-make-color 82/255 173/255 31/255)) ((12 0) (om-make-color 82/255 173/255 31/255)) ((13) (om-make-color 82/255 173/255 31/255)) ((13 0) (om-make-color 82/255 173/255 31/255)) ((14) (om-make-color 82/255 173/255 31/255)) ((14 0) (om-make-color 82/255 173/255 31/255)) ((15) (om-make-color 82/255 173/255 31/255)) ((15 0) (om-make-color 82/255 173/255 31/255)) ((16) (om-make-color 82/255 173/255 31/255)) ((16 0) (om-make-color 82/255 173/255 31/255)) ((17) (om-make-color 82/255 173/255 31/255)) ((17 0) (om-make-color 82/255 173/255 31/255))))) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900) (6900))) :lonset (quote (8500 9750 11000 13500 14750 17250 23500 24750 26000 28500 29750 32250 38500 39750 41000 43500 44750 47250 48250)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote ((nil (om-make-color 59/255 3/17 151/255)) ((0) (om-make-color 59/255 3/17 151/255)) ((0 0) (om-make-color 59/255 3/17 151/255)) ((1) (om-make-color 59/255 3/17 151/255)) ((1 0) (om-make-color 59/255 3/17 151/255)) ((2) (om-make-color 59/255 3/17 151/255)) ((2 0) (om-make-color 59/255 3/17 151/255)) ((3) (om-make-color 59/255 3/17 151/255)) ((3 0) (om-make-color 59/255 3/17 151/255)) ((4) (om-make-color 59/255 3/17 151/255)) ((4 0) (om-make-color 59/255 3/17 151/255)) ((5) (om-make-color 59/255 3/17 151/255)) ((5 0) (om-make-color 59/255 3/17 151/255)) ((6) (om-make-color 59/255 3/17 151/255)) ((6 0) (om-make-color 59/255 3/17 151/255)) ((7) (om-make-color 59/255 3/17 151/255)) ((7 0) (om-make-color 59/255 3/17 151/255)) ((8) (om-make-color 59/255 3/17 151/255)) ((8 0) (om-make-color 59/255 3/17 151/255)) ((9) (om-make-color 59/255 3/17 151/255)) ((9 0) (om-make-color 59/255 3/17 151/255)) ((10) (om-make-color 59/255 3/17 151/255)) ((10 0) (om-make-color 59/255 3/17 151/255)) ((11) (om-make-color 59/255 3/17 151/255)) ((11 0) (om-make-color 59/255 3/17 151/255)) ((12) (om-make-color 59/255 3/17 151/255)) ((12 0) (om-make-color 59/255 3/17 151/255)) ((13) (om-make-color 59/255 3/17 151/255)) ((13 0) (om-make-color 59/255 3/17 151/255)) ((14) (om-make-color 59/255 3/17 151/255)) ((14 0) (om-make-color 59/255 3/17 151/255)) ((15) (om-make-color 59/255 3/17 151/255)) ((15 0) (om-make-color 59/255 3/17 151/255)) ((16) (om-make-color 59/255 3/17 151/255)) ((16 0) (om-make-color 59/255 3/17 151/255)) ((17) (om-make-color 59/255 3/17 151/255)) ((17 0) (om-make-color 59/255 3/17 151/255))))) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700) (6700))) :lonset (quote (11500 12750 14000 16500 17750 20250 26500 27750 29000 31500 32750 35250 41500 42750 44000 46500 47750 50250 51250)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote ((nil (om-make-color 217/255 109/255 4/51)) ((0) (om-make-color 217/255 109/255 4/51)) ((0 0) (om-make-color 217/255 109/255 4/51)) ((1) (om-make-color 217/255 109/255 4/51)) ((1 0) (om-make-color 217/255 109/255 4/51)) ((2) (om-make-color 217/255 109/255 4/51)) ((2 0) (om-make-color 217/255 109/255 4/51)) ((3) (om-make-color 217/255 109/255 4/51)) ((3 0) (om-make-color 217/255 109/255 4/51)) ((4) (om-make-color 217/255 109/255 4/51)) ((4 0) (om-make-color 217/255 109/255 4/51)) ((5) (om-make-color 217/255 109/255 4/51)) ((5 0) (om-make-color 217/255 109/255 4/51)) ((6) (om-make-color 217/255 109/255 4/51)) ((6 0) (om-make-color 217/255 109/255 4/51)) ((7) (om-make-color 217/255 109/255 4/51)) ((7 0) (om-make-color 217/255 109/255 4/51)) ((8) (om-make-color 217/255 109/255 4/51)) ((8 0) (om-make-color 217/255 109/255 4/51)) ((9) (om-make-color 217/255 109/255 4/51)) ((9 0) (om-make-color 217/255 109/255 4/51)) ((10) (om-make-color 217/255 109/255 4/51)) ((10 0) (om-make-color 217/255 109/255 4/51)) ((11) (om-make-color 217/255 109/255 4/51)) ((11 0) (om-make-color 217/255 109/255 4/51)) ((12) (om-make-color 217/255 109/255 4/51)) ((12 0) (om-make-color 217/255 109/255 4/51)) ((13) (om-make-color 217/255 109/255 4/51)) ((13 0) (om-make-color 217/255 109/255 4/51)) ((14) (om-make-color 217/255 109/255 4/51)) ((14 0) (om-make-color 217/255 109/255 4/51)) ((15) (om-make-color 217/255 109/255 4/51)) ((15 0) (om-make-color 217/255 109/255 4/51)) ((16) (om-make-color 217/255 109/255 4/51)) ((16 0) (om-make-color 217/255 109/255 4/51)) ((17) (om-make-color 217/255 109/255 4/51)) ((17 0) (om-make-color 217/255 109/255 4/51))))) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400) (7400))) :lonset (quote (14500 15750 17000 19500 20750 23250 29500 30750 32000 34500 35750 38250 44500 45750 47000 49500 50750 53250 54250)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote ((nil (om-make-color 14/15 11/51 15/17)) ((0) (om-make-color 14/15 11/51 15/17)) ((0 0) (om-make-color 14/15 11/51 15/17)) ((1) (om-make-color 14/15 11/51 15/17)) ((1 0) (om-make-color 14/15 11/51 15/17)) ((2) (om-make-color 14/15 11/51 15/17)) ((2 0) (om-make-color 14/15 11/51 15/17)) ((3) (om-make-color 14/15 11/51 15/17)) ((3 0) (om-make-color 14/15 11/51 15/17)) ((4) (om-make-color 14/15 11/51 15/17)) ((4 0) (om-make-color 14/15 11/51 15/17)) ((5) (om-make-color 14/15 11/51 15/17)) ((5 0) (om-make-color 14/15 11/51 15/17)) ((6) (om-make-color 14/15 11/51 15/17)) ((6 0) (om-make-color 14/15 11/51 15/17)) ((7) (om-make-color 14/15 11/51 15/17)) ((7 0) (om-make-color 14/15 11/51 15/17)) ((8) (om-make-color 14/15 11/51 15/17)) ((8 0) (om-make-color 14/15 11/51 15/17)) ((9) (om-make-color 14/15 11/51 15/17)) ((9 0) (om-make-color 14/15 11/51 15/17)) ((10) (om-make-color 14/15 11/51 15/17)) ((10 0) (om-make-color 14/15 11/51 15/17)) ((11) (om-make-color 14/15 11/51 15/17)) ((11 0) (om-make-color 14/15 11/51 15/17)) ((12) (om-make-color 14/15 11/51 15/17)) ((12 0) (om-make-color 14/15 11/51 15/17)) ((13) (om-make-color 14/15 11/51 15/17)) ((13 0) (om-make-color 14/15 11/51 15/17)) ((14) (om-make-color 14/15 11/51 15/17)) ((14 0) (om-make-color 14/15 11/51 15/17)) ((15) (om-make-color 14/15 11/51 15/17)) ((15 0) (om-make-color 14/15 11/51 15/17)) ((16) (om-make-color 14/15 11/51 15/17)) ((16 0) (om-make-color 14/15 11/51 15/17)) ((17) (om-make-color 14/15 11/51 15/17)) ((17 0) (om-make-color 14/15 11/51 15/17))))) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote (((1) (om-make-color 52/85 3/17 7/51)) ((1 0) (om-make-color 52/85 3/17 7/51)) ((1 0 0) (om-make-color 52/85 3/17 7/51)) ((1 1) (om-make-color 52/85 3/17 7/51)) ((1 1 0) (om-make-color 52/85 3/17 7/51)) ((1 2) (om-make-color 52/85 3/17 7/51)) ((1 2 0) (om-make-color 52/85 3/17 7/51)) ((1 3) (om-make-color 52/85 3/17 7/51)) ((1 3 0) (om-make-color 52/85 3/17 7/51)) ((1 4) (om-make-color 52/85 3/17 7/51)) ((1 4 0) (om-make-color 52/85 3/17 7/51)) ((1 5) (om-make-color 52/85 3/17 7/51)) ((1 5 0) (om-make-color 52/85 3/17 7/51)) ((1 6) (om-make-color 52/85 3/17 7/51)) ((1 6 0) (om-make-color 52/85 3/17 7/51)) ((1 7) (om-make-color 52/85 3/17 7/51)) ((1 7 0) (om-make-color 52/85 3/17 7/51)) ((1 8) (om-make-color 52/85 3/17 7/51)) ((1 8 0) (om-make-color 52/85 3/17 7/51)) ((1 9) (om-make-color 52/85 3/17 7/51)) ((1 9 0) (om-make-color 52/85 3/17 7/51)) ((1 10) (om-make-color 52/85 3/17 7/51)) ((1 10 0) (om-make-color 52/85 3/17 7/51)) ((1 11) (om-make-color 52/85 3/17 7/51)) ((1 11 0) (om-make-color 52/85 3/17 7/51)) ((1 12) (om-make-color 52/85 3/17 7/51)) ((1 12 0) (om-make-color 52/85 3/17 7/51)) ((1 13) (om-make-color 52/85 3/17 7/51)) ((1 13 0) (om-make-color 52/85 3/17 7/51)) ((1 14) (om-make-color 52/85 3/17 7/51)) ((1 14 0) (om-make-color 52/85 3/17 7/51)) ((1 15) (om-make-color 52/85 3/17 7/51)) ((1 15 0) (om-make-color 52/85 3/17 7/51)) ((1 16) (om-make-color 52/85 3/17 7/51)) ((1 16 0) (om-make-color 52/85 3/17 7/51)) ((1 17) (om-make-color 52/85 3/17 7/51)) ((1 17 0) (om-make-color 52/85 3/17 7/51)) ((2) (om-make-color 82/255 173/255 31/255)) ((2 0) (om-make-color 82/255 173/255 31/255)) ((2 0 0) (om-make-color 82/255 173/255 31/255)) ((2 1) (om-make-color 82/255 173/255 31/255)) ((2 1 0) (om-make-color 82/255 173/255 31/255)) ((2 2) (om-make-color 82/255 173/255 31/255)) ((2 2 0) (om-make-color 82/255 173/255 31/255)) ((2 3) (om-make-color 82/255 173/255 31/255)) ((2 3 0) (om-make-color 82/255 173/255 31/255)) ((2 4) (om-make-color 82/255 173/255 31/255)) ((2 4 0) (om-make-color 82/255 173/255 31/255)) ((2 5) (om-make-color 82/255 173/255 31/255)) ((2 5 0) (om-make-color 82/255 173/255 31/255)) ((2 6) (om-make-color 82/255 173/255 31/255)) ((2 6 0) (om-make-color 82/255 173/255 31/255)) ((2 7) (om-make-color 82/255 173/255 31/255)) ((2 7 0) (om-make-color 82/255 173/255 31/255)) ((2 8) (om-make-color 82/255 173/255 31/255)) ((2 8 0) (om-make-color 82/255 173/255 31/255)) ((2 9) (om-make-color 82/255 173/255 31/255)) ((2 9 0) (om-make-color 82/255 173/255 31/255)) ((2 10) (om-make-color 82/255 173/255 31/255)) ((2 10 0) (om-make-color 82/255 173/255 31/255)) ((2 11) (om-make-color 82/255 173/255 31/255)) ((2 11 0) (om-make-color 82/255 173/255 31/255)) ((2 12) (om-make-color 82/255 173/255 31/255)) ((2 12 0) (om-make-color 82/255 173/255 31/255)) ((2 13) (om-make-color 82/255 173/255 31/255)) ((2 13 0) (om-make-color 82/255 173/255 31/255)) ((2 14) (om-make-color 82/255 173/255 31/255)) ((2 14 0) (om-make-color 82/255 173/255 31/255)) ((2 15) (om-make-color 82/255 173/255 31/255)) ((2 15 0) (om-make-color 82/255 173/255 31/255)) ((2 16) (om-make-color 82/255 173/255 31/255)) ((2 16 0) (om-make-color 82/255 173/255 31/255)) ((2 17) (om-make-color 82/255 173/255 31/255)) ((2 17 0) (om-make-color 82/255 173/255 31/255)) ((3) (om-make-color 59/255 3/17 151/255)) ((3 0) (om-make-color 59/255 3/17 151/255)) ((3 0 0) (om-make-color 59/255 3/17 151/255)) ((3 1) (om-make-color 59/255 3/17 151/255)) ((3 1 0) (om-make-color 59/255 3/17 151/255)) ((3 2) (om-make-color 59/255 3/17 151/255)) ((3 2 0) (om-make-color 59/255 3/17 151/255)) ((3 3) (om-make-color 59/255 3/17 151/255)) ((3 3 0) (om-make-color 59/255 3/17 151/255)) ((3 4) (om-make-color 59/255 3/17 151/255)) ((3 4 0) (om-make-color 59/255 3/17 151/255)) ((3 5) (om-make-color 59/255 3/17 151/255)) ((3 5 0) (om-make-color 59/255 3/17 151/255)) ((3 6) (om-make-color 59/255 3/17 151/255)) ((3 6 0) (om-make-color 59/255 3/17 151/255)) ((3 7) (om-make-color 59/255 3/17 151/255)) ((3 7 0) (om-make-color 59/255 3/17 151/255)) ((3 8) (om-make-color 59/255 3/17 151/255)) ((3 8 0) (om-make-color 59/255 3/17 151/255)) ((3 9) (om-make-color 59/255 3/17 151/255)) ((3 9 0) (om-make-color 59/255 3/17 151/255)) ((3 10) (om-make-color 59/255 3/17 151/255)) ((3 10 0) (om-make-color 59/255 3/17 151/255)) ((3 11) (om-make-color 59/255 3/17 151/255)) ((3 11 0) (om-make-color 59/255 3/17 151/255)) ((3 12) (om-make-color 59/255 3/17 151/255)) ((3 12 0) (om-make-color 59/255 3/17 151/255)) ((3 13) (om-make-color 59/255 3/17 151/255)) ((3 13 0) (om-make-color 59/255 3/17 151/255)) ((3 14) (om-make-color 59/255 3/17 151/255)) ((3 14 0) (om-make-color 59/255 3/17 151/255)) ((3 15) (om-make-color 59/255 3/17 151/255)) ((3 15 0) (om-make-color 59/255 3/17 151/255)) ((3 16) (om-make-color 59/255 3/17 151/255)) ((3 16 0) (om-make-color 59/255 3/17 151/255)) ((3 17) (om-make-color 59/255 3/17 151/255)) ((3 17 0) (om-make-color 59/255 3/17 151/255)) ((4) (om-make-color 217/255 109/255 4/51)) ((4 0) (om-make-color 217/255 109/255 4/51)) ((4 0 0) (om-make-color 217/255 109/255 4/51)) ((4 1) (om-make-color 217/255 109/255 4/51)) ((4 1 0) (om-make-color 217/255 109/255 4/51)) ((4 2) (om-make-color 217/255 109/255 4/51)) ((4 2 0) (om-make-color 217/255 109/255 4/51)) ((4 3) (om-make-color 217/255 109/255 4/51)) ((4 3 0) (om-make-color 217/255 109/255 4/51)) ((4 4) (om-make-color 217/255 109/255 4/51)) ((4 4 0) (om-make-color 217/255 109/255 4/51)) ((4 5) (om-make-color 217/255 109/255 4/51)) ((4 5 0) (om-make-color 217/255 109/255 4/51)) ((4 6) (om-make-color 217/255 109/255 4/51)) ((4 6 0) (om-make-color 217/255 109/255 4/51)) ((4 7) (om-make-color 217/255 109/255 4/51)) ((4 7 0) (om-make-color 217/255 109/255 4/51)) ((4 8) (om-make-color 217/255 109/255 4/51)) ((4 8 0) (om-make-color 217/255 109/255 4/51)) ((4 9) (om-make-color 217/255 109/255 4/51)) ((4 9 0) (om-make-color 217/255 109/255 4/51)) ((4 10) (om-make-color 217/255 109/255 4/51)) ((4 10 0) (om-make-color 217/255 109/255 4/51)) ((4 11) (om-make-color 217/255 109/255 4/51)) ((4 11 0) (om-make-color 217/255 109/255 4/51)) ((4 12) (om-make-color 217/255 109/255 4/51)) ((4 12 0) (om-make-color 217/255 109/255 4/51)) ((4 13) (om-make-color 217/255 109/255 4/51)) ((4 13 0) (om-make-color 217/255 109/255 4/51)) ((4 14) (om-make-color 217/255 109/255 4/51)) ((4 14 0) (om-make-color 217/255 109/255 4/51)) ((4 15) (om-make-color 217/255 109/255 4/51)) ((4 15 0) (om-make-color 217/255 109/255 4/51)) ((4 16) (om-make-color 217/255 109/255 4/51)) ((4 16 0) (om-make-color 217/255 109/255 4/51)) ((4 17) (om-make-color 217/255 109/255 4/51)) ((4 17 0) (om-make-color 217/255 109/255 4/51)) ((5) (om-make-color 14/15 11/51 15/17)) ((5 0) (om-make-color 14/15 11/51 15/17)) ((5 0 0) (om-make-color 14/15 11/51 15/17)) ((5 1) (om-make-color 14/15 11/51 15/17)) ((5 1 0) (om-make-color 14/15 11/51 15/17)) ((5 2) (om-make-color 14/15 11/51 15/17)) ((5 2 0) (om-make-color 14/15 11/51 15/17)) ((5 3) (om-make-color 14/15 11/51 15/17)) ((5 3 0) (om-make-color 14/15 11/51 15/17)) ((5 4) (om-make-color 14/15 11/51 15/17)) ((5 4 0) (om-make-color 14/15 11/51 15/17)) ((5 5) (om-make-color 14/15 11/51 15/17)) ((5 5 0) (om-make-color 14/15 11/51 15/17)) ((5 6) (om-make-color 14/15 11/51 15/17)) ((5 6 0) (om-make-color 14/15 11/51 15/17)) ((5 7) (om-make-color 14/15 11/51 15/17)) ((5 7 0) (om-make-color 14/15 11/51 15/17)) ((5 8) (om-make-color 14/15 11/51 15/17)) ((5 8 0) (om-make-color 14/15 11/51 15/17)) ((5 9) (om-make-color 14/15 11/51 15/17)) ((5 9 0) (om-make-color 14/15 11/51 15/17)) ((5 10) (om-make-color 14/15 11/51 15/17)) ((5 10 0) (om-make-color 14/15 11/51 15/17)) ((5 11) (om-make-color 14/15 11/51 15/17)) ((5 11 0) (om-make-color 14/15 11/51 15/17)) ((5 12) (om-make-color 14/15 11/51 15/17)) ((5 12 0) (om-make-color 14/15 11/51 15/17)) ((5 13) (om-make-color 14/15 11/51 15/17)) ((5 13 0) (om-make-color 14/15 11/51 15/17)) ((5 14) (om-make-color 14/15 11/51 15/17)) ((5 14 0) (om-make-color 14/15 11/51 15/17)) ((5 15) (om-make-color 14/15 11/51 15/17)) ((5 15 0) (om-make-color 14/15 11/51 15/17)) ((5 16) (om-make-color 14/15 11/51 15/17)) ((5 16 0) (om-make-color 14/15 11/51 15/17)) ((5 17) (om-make-color 14/15 11/51 15/17)) ((5 17 0) (om-make-color 14/15 11/51 15/17))))) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.2 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (player score-mode cursor-mode scale approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list (quote :midi-player) 0 (quote :normal) nil 2 24 (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 61/100 nil 250 0 (om-make-point 994 446) (om-make-point 0 0) 0 2 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 28 36) (quote "S") "" (om-make-point 515 102) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 28 36) (quote "R") "" (om-make-point 424 102) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux14" (quote t) (quote nil) (om-make-point 585 139) (om-make-point 26 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux13" (quote t) (quote nil) (om-make-point 486 141) (om-make-point 83 30) (list (list 1 0) (list 5 10)) "((1 0) (5 10))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux12" (quote t) (quote nil) (om-make-point 395 141) (om-make-point 79 30) (list 0 1 2 4 5 7) "(0 1 2 4 5 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AUGMENTED-CANON" (quote augmented-canon) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "R" nil) (om-load-inputfun (quote input-funbox) "no documentation" "FACTOR" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TIMES" nil))) (om-make-point 436 189) (om-make-point 180 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 1041 63) (quote "Multi-seq representation of the augmented tiling process") "" (om-make-point 77 7) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 1 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (3 0 6 2 nil 0))) nil 6.2))
