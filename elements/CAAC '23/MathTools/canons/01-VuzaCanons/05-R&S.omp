; OM File Header - Saved 2023/03/13 12:00:10
; (6.2 :patc (om-make-point 127 84) (om-make-point 0 0) (om-make-point 1083 728) "No documentation " 183 0 nil "2023/03/13 12:00:10")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "05-R&S" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX 5" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 57 667) (om-make-point 130 45) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 25) "(8 8 2 8 8 38)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 4" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 199 669) (om-make-point 156 45) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 128 25) "(3 1 5 6 9 4 11 6 3 3 1 20)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 3" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 238 440) (om-make-point 130 45) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 25) "(8 8 2 8 8 38)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 380 442) (om-make-point 156 45) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 128 25) "(4 1 6 6 7 4 13 6 1 4 1 19)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 169 296) (om-make-point 156 45) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 128 25) "(1 3 3 6 11 4 9 6 5 1 3 20)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 27 294) (om-make-point 130 45) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 25) "(8 8 2 8 8 38)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 792 56) (quote "The construction of inner and outer rhythms") "" (om-make-point 83 3) nil (om-make-color 10/51 52/255 199/255) (om-make-font "DejaVu Sans" 31.998697916666665D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 185 539) (om-make-point 70 30) (list 2 3 2 3 2) "(2 3 2 3 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 128 536) (om-make-point 32 30) 72 "72" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PATTERNS" (quote patterns) (quote ((om-load-inputfun (quote input-funbox) "periode" "N" 72) (om-load-inputfun (quote input-funbox) "numbre de voix" "NUMVOICES" 6))) (om-make-point 151 580) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 246 90) (quote "You can also give the five numbers directly to the patterns function.$<---") "" (om-make-point 276 539) nil (om-make-color 82/255 77/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 434 307) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux9" (quote t) (quote nil) (om-make-point 472 188) (om-make-point 32 30) 72 "72" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DECOMPO" (quote decompo) (quote ((om-load-inputfun (quote input-funbox) "periode" "N" 72))) (om-make-point 460 239) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 362 304) (om-make-point 32 30) 72 "72" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PATTERNS" (quote patterns) (quote ((om-load-inputfun (quote input-funbox) "periode" "N" 72) (om-load-inputfun (quote input-funbox) "numbre de voix" "NUMVOICES" 6))) (om-make-point 383 366) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 487 112) (quote "The left evaluation gives the rhythmic pattern R (inner rhythm) that generates the Canon by the temporal translation specified by the pattern S which is given by the right output evaluation (outer rhythm)$") "" (om-make-point 575 468) nil (om-make-color 82/255 77/255 1) (om-make-font "Geneva" 18 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 356 131) (quote "The Regular Complementary Canon of Maximal Category that is 'canonically' associated with this decomposition will have a number of voices equal to the product n1n2, i.e. 6.$") "" (om-make-point 575 328) nil (om-make-color 82/255 77/255 1) (om-make-font "Geneva" 18 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 181 143) (quote "p1=3$p2=2$n1=3$n2=2$n3=2") "" (om-make-point 665 168) nil (om-make-color 82/255 77/255 1) (om-make-font "Geneva" 18 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 337 78) (quote "We know from the 'decompo' function that the period n=72 can be decomposed in the five numbers:") "" (om-make-point 572 90) nil (om-make-color 82/255 77/255 1) (om-make-font "Geneva" 18 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 155 136) (om-make-point 32 30) 72 "72" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 205 135) (om-make-point 26 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PATTERNS" (quote patterns) (quote ((om-load-inputfun (quote input-funbox) "periode" "N" 72) (om-load-inputfun (quote input-funbox) "numbre de voix" "NUMVOICES" 6))) (om-make-point 172 192) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 0 0 nil 0) (9 1 1 0 nil 0) (15 0 2 0 nil 0) (15 1 3 0 nil 0) (22 1 4 0 nil 0) (22 0 5 0 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (13 0 11 0 nil 0) (12 0 13 0 nil 0) (14 0 15 0 nil 0) (11 0 15 1 nil 0) (20 0 22 0 nil 0) (21 0 22 1 nil 0))) nil 6.2))
