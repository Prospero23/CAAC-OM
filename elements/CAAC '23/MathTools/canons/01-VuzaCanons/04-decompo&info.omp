; OM File Header - Saved 2023/03/13 12:00:10
; (6.2 :patc (om-make-point 10 85) (om-make-point 0 0) (om-make-point 868 600) "No documentation " 183 0 nil "2023/03/13 12:00:10")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "04-decompo&info" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 243 425) (om-make-point 168 41) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 140 21) "((6 12))" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 225 240) (om-make-point 168 41) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 140 21) "((3 2 3 2 2) (2 3 2 3 2))" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 312 34) (quote "(and check-in of the future canon)") "" (om-make-point 233 53) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 18 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 295 65) (quote "The number of voices is always equal to the product of n1 and n2") "" (om-make-point 477 412) nil (om-make-color 19/51 29/85 1) (om-make-font "Geneva" 14 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 605 50) (quote "Decomposition of a good period") "" (om-make-point 136 1) nil (om-make-color 10/51 52/255 199/255) (om-make-font "DejaVu Sans" 31.998697916666665D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 125 60) (quote "number of voices and number of attacks of a rhythmic pattern $--->") "" (om-make-point 122 330) nil (om-make-color 4/15 59/255 1) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 315 292) (om-make-point 32 30) 72 "72" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INFOCANONS1" (quote infocanons) (quote ((om-load-inputfun (quote input-funbox) "periode" "N" 72))) (om-make-point 299 346) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 273 66) (quote "Evaluate the output in order to see how the smallest 'good period' can be decomposed. ") "" (om-make-point 482 334) nil (om-make-color 19/51 29/85 1) (om-make-font "Geneva" 14 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 259 81) (quote "1) p1 and p2 are different primes$2) The product p1n1 is relatively prime with the product p2n2$3) n3 is an integer greater than 1") "" (om-make-point 500 226) nil (om-make-color 19/51 29/85 1) (om-make-font "Geneva" 14 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 289 76) (quote "If the period n is a 'good period', we may ask to its decomposition into five numbers (p1 p2 n1 n2 n3) where:$") "" (om-make-point 486 123) nil (om-make-color 19/51 29/85 1) (om-make-font "Geneva" 14 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux9" (quote t) (quote nil) (om-make-point 297 114) (om-make-point 32 30) 72 "72" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DECOMPO" (quote decompo) (quote ((om-load-inputfun (quote input-funbox) "periode" "N" 72))) (om-make-point 285 159) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 125 60) (quote "decomposition of the integer 72 into 5 numbers $--->") "" (om-make-point 120 156) nil (om-make-color 4/15 59/255 1) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (12 0 1 0 nil 0) (6 0 7 0 nil 0) (11 0 12 0 nil 0))) nil 6.2))
