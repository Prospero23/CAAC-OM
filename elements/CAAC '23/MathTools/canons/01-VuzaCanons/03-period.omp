; OM File Header - Saved 2023/03/13 12:00:10
; (6.2 :patc (om-make-point 220 17) (om-make-point 0 0) (om-make-point 831 467) "No documentation " 183 0 nil "2023/03/13 12:00:10")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "03-period" (quote ((let ((box (om-load-boxcomment "comment2" (om-make-point 260 118) (quote "(72 108 120 144 168 180 200 216 240 252 264 270 280 288 300 312 324 336 360 378 392 396 400 408 420 432 440 450 456 468 480 500)") "" (om-make-point 175 282) nil (om-make-color 0 0 0) (om-make-font "DejaVu Sans" 12.0D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 323 54) (quote "The good periods") "" (om-make-point 109 15) nil (om-make-color 10/51 52/255 199/255) (om-make-font "DejaVu Sans" 31.998697916666665D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 281 94) (quote "Surprisingly enough, the smallest period is 72, as you see by evaluating the output.") "" (om-make-point 516 309) nil (om-make-color 5/17 59/255 1) (om-make-font "Geneva" 18 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 269 88) (quote "In this example we ask for 'good periods' in the intervals between 0 and 500. ") "" (om-make-point 514 211) nil (om-make-color 5/17 59/255 1) (om-make-font "Geneva" 18 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 234 128) (quote "In order to have a Regular Complementary Canon of Maximal Category, we need rhythmic patterns having a 'good period'.") "" (om-make-point 520 68) nil (om-make-color 5/17 59/255 1) (om-make-font "Geneva" 18 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 319 164) (om-make-point 38 30) 500 "500" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 272 165) (om-make-point 26 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CANON-N1" (quote canon-n) (quote ((om-load-inputfun (quote input-funbox) "min" "A" 0) (om-load-inputfun (quote input-funbox) "max" "B" 500))) (om-make-point 283 207) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 7 0 nil 0) (5 0 7 1 nil 0))) nil 6.2))
