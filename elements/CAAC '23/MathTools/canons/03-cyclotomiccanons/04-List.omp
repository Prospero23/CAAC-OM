; OM File Header - Saved 2023/03/13 12:00:10
; (6.2 :patc (om-make-point 130 75) (om-make-point 0 0) (om-make-point 869 657) "non documentation" 183 0 nil "2023/03/13 12:00:10")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "04-List" (quote ((let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" "append" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 346 117) (om-make-point 297 473) (load-buffer-textfile (quote (";=============PERIOD 4============" "'(4" "(((1 1 1 1) nil (2 4)))" "(((1 1) (1 0 1) (2)))" "(((1 0 1) (1 1) (4)))" ")" ";=============PERIOD 6============" "'(6" "(((1 1) (1 0 1 0 1) (2)))" "(((1 1 1) (1 0 0 1) (3)))" "(((1 0 0 1) (1 1 1) (2 6)))" "(((1 0 1 0 1) (1 1) (3 6)))" ")" ";=============PERIOD 8============" "'(8" "(((1 1 1 1 1 1 1 1) nil (2 4 8)))" "(((1 1) (1 0 1 0 1 0 1) (2)))" "(((1 0 1) (1 1 0 0 1 1) (4)))" "(((1 0 0 0 1) (1 1 1 1) (8)))" "(((1 1 1 1) (1 0 0 0 1) (2 4)))" "(((1 1 0 0 1 1) (1 0 1) (2 8)))" "(((1 0 1 0 1 0 1) (1 1) (4 8)))" ")" ";=============PERIOD 9============" "'(9" "(((1 1 1 1 1 1 1 1 1) nil (3 9)))" "(((1 1 1) (1 0 0 1 0 0 1) (3)))" "(((1 0 0 1 0 0 1) (1 1 1) (9)))" ")" ";=============PERIOD 10============" "'(10" "(((1 1) (1 0 1 0 1 0 1 0 1) (2)))" "(((1 1 1 1 1) (1 0 0 0 0 1) (5)))" "(((1 0 0 0 0 1) (1 1 1 1 1) (2 10)))" "(((1 0 1 0 1 0 1 0 1) (1 1) (5 10)))" ")" ";=============PERIOD 12============" "'(12" "(((1 1) (1 0 1 0 1 0 1 0 1 0 1) (2)))" "(((1 1 1) (1 0 0 1 0 0 1 0 0 1) (3)))" "(((1 0 1) (1 1 0 0 1 1 0 0 1 1) (4)))" "(((1 1 1 1) (1 0 0 0 1 0 0 0 1) (2 4)))" "(((1 0 0 1) (1 1 1 0 0 0 1 1 1) (2 6)))" "(((1 0 1 0 1) (1 1 0 0 0 0 1 1) (3 6)))" "(((1 0 0 0 0 0 1) (1 1 1 1 1 1) (4 12)))" "(((1 0 1 1 0 1) (1 1 0 -1 0 1 1) (2 4 6)))" "(((1 1 0 0 0 0 1 1) (1 0 1 0 1) (2 4 12)))" "(((1 0 0 0 1 0 0 0 1) (1 1 1 1) (3 6 12)))" "(((1 0 0 1 0 0 1 0 0 1) (1 1 1) (2 4 6 12)))" ")" ";=============PERIOD 14============" "'(14" "(((1 1) (1 0 1 0 1 0 1 0 1 0 1 0 1) (2)))" "(((1 1 1 1 1 1 1) (1 0 0 0 0 0 0 1) (7)))" "(((1 0 0 0 0 0 0 1) (1 1 1 1 1 1 1) (2 14)))" "(((1 0 1 0 1 0 1 0 1 0 1 0 1) (1 1) (7 14)))" ")" ";=============PERIOD 15============" "'(15" "(((1 1 1) (1 0 0 1 0 0 1 0 0 1 0 0 1) (3)))" "(((1 1 1 1 1) (1 0 0 0 0 1 0 0 0 0 1) (5)))" "(((1 0 0 0 0 1 0 0 0 0 1) (1 1 1 1 1) (3 15)))" "(((1 0 0 1 0 0 1 0 0 1 0 0 1) (1 1 1) (5 15)))" ")" ";=============PERIOD 16============" "'(16" "(((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) nil (2 4 8 16)))" "(((1 1) (1 0 1 0 1 0 1 0 1 0 1 0 1 0 1) (2)))" "(((1 0 1) (1 1 0 0 1 1 0 0 1 1 0 0 1 1) (4)))" "(((1 0 0 0 1) (1 1 1 1 0 0 0 0 1 1 1 1) (8)))" "(((1 0 0 0 0 0 0 0 1) (1 1 1 1 1 1 1 1) (16)))" "(((1 1 1 1) (1 0 0 0 1 0 0 0 1 0 0 0 1) (2 4)))" "(((1 1 0 0 1 1) (1 0 1 0 0 0 0 0 1 0 1) (2 8)))" "(((1 1 0 0 0 0 0 0 1 1) (1 0 1 0 1 0 1) (2 16)))" "(((1 0 1 0 1 0 1) (1 1 0 0 0 0 0 0 1 1) (4 8)))" "(((1 0 1 0 0 0 0 0 1 0 1) (1 1 0 0 1 1) (4 16)))" "(((1 0 0 0 1 0 0 0 1 0 0 0 1) (1 1 1 1) (8 16)))" "(((1 1 1 1 1 1 1 1) (1 0 0 0 0 0 0 0 1) (2 4 8)))" "(((1 1 1 1 0 0 0 0 1 1 1 1) (1 0 0 0 1) (2 4 16)))" "(((1 1 0 0 1 1 0 0 1 1 0 0 1 1) (1 0 1) (2 8 16)))" "(((1 0 1 0 1 0 1 0 1 0 1 0 1 0 1) (1 1) (4 8 16)))" ")" ";=============PERIOD 18============" "'(18" "(((1 1) (1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1) (2)))" "(((1 1 1) (1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1) (3)))" "(((1 0 0 1 0 0 1) (1 1 1 0 0 0 0 0 0 1 1 1) (9)))" "(((1 0 0 1) (1 1 1 0 0 0 1 1 1 0 0 0 1 1 1) (2 6)))" "(((1 0 1 0 1) (1 1 0 0 0 0 1 1 0 0 0 0 1 1) (3 6)))" "(((1 1 1 1 1 1 1 1 1) (1 0 0 0 0 0 0 0 0 1) (3 9)))" "(((1 0 0 0 0 0 1 0 0 0 0 0 1) (1 1 1 1 1 1) (9 18)))" "(((1 0 0 0 0 0 0 0 0 1) (1 1 1 1 1 1 1 1 1) (2 6 18)))" "(((1 0 1 1 1 1 1 1 1 0 1) (1 1 0 -1 -1 0 1 1) (3 6 9)))" "(((1 1 1 0 0 0 1 1 1 0 0 0 1 1 1) (1 0 0 1) (3 9 18)))" "(((1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1) (1 1) (3 6 9 18)))" ")" "" "")) (quote textfile) "append" "text") "x" nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 346 38) (quote "(through the CV-conditions)") "" (om-make-point 193 58) nil (om-make-color 16/17 41/255 94/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 727 53) (quote "Complete list of cyclotomic tiling canons") "" (om-make-point 60 3) nil (om-make-color 16/17 41/255 94/255) (om-make-font "DejaVu Sans" 31.998697916666665D0 :family "DejaVu Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 231 280) (om-make-point 32 30) 18 "18" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 163 282) (om-make-point 26 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-CANON-FILE" (quote make-canon-file) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LOW" nil) (om-load-inputfun (quote input-funbox) "no documentation" "HIGH" nil))) (om-make-point 170 318) nil nil nil "make-canon-file" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 5 0 nil 0) (3 0 5 1 nil 0))) nil 6.2))
