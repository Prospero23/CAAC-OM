; OM File Header - Saved 2023/03/13 12:00:10
; (7.01 :patc (om-make-point 14 14) (om-make-point 0 25) (om-make-point 398 470) "non documentation" 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"differences.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "differences" (quote ((let ((box (om-load-boxcall (quote genfun) "DIFF-IN-LIST1" (quote diff-in-list) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" nil))) (om-make-point 148 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CONS" (quote cons) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "LIST-OR-THING" "LIST-OR-THING" nil))) (om-make-point 220 282) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 1))) (om-make-point 301 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "differences" (quote ("elements" "MathTools" "tools" "differences")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "list" nil) (om-load-inputfun (quote input-funbox) "no documentation" "mod" nil) (om-load-inputfun (quote input-funbox) "no documentation" "k" nil))) (om-make-point 256 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "SELF" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM" 0))) (om-make-point 49 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" nil) (om-load-inputfun (quote input-funbox) "else" "ELSE" nil))) (om-make-point 32 332) (om-make-point 100 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 62 402) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input2" 2 (om-make-point 46 83) "no documentation" "k" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 210 37) "no documentation" "mod" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 155 38) "no documentation" "list" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 0 0 nil 0) (8 0 0 1 nil 0) (0 0 1 0 nil 0) (3 0 1 1 nil 0) (7 0 2 0 nil 0) (0 0 3 0 nil 0) (8 0 3 1 nil 0) (2 0 3 2 nil 0) (7 0 4 0 nil 0) (4 0 5 0 nil 0) (1 0 5 2 nil 0) (5 0 6 0 nil 0))) nil 7.01))
