; OM File Header - Saved 2023/03/13 12:00:10
; (7.01 :patc (om-make-point 198 89) (om-make-point 0 25) (om-make-point 1001 747) "non documentation" 183 0 nil "2023/03/13 12:00:10")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../../../openmusic/OPENMUSIC/resources/pict/stock1\"" "#P\"../../../../../../openmusic/OPENMUSIC/resources/pict/stock2\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "07-lewin-stock" (quote ((let ((box (om-load-boxcomment "comment2" (om-make-point 393 32) (quote "D. Lewin: Musical Form and Transformation") "" (om-make-point 6 90) nil (om-make-color 0 0 0) (om-make-font "Geneva" 18 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment4111" (om-make-point 41 40) (quote "T8") "" (om-make-point 259 420) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment411" (om-make-point 22 39) (quote "J") "" (om-make-point 270 354) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment41" (om-make-point 22 39) (quote "J") "" (om-make-point 269 281) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2" (om-make-point 328 44) (quote "Transformational Analysis") "" (om-make-point 29 44) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment4" (om-make-point 53 45) (quote "T6") "" (om-make-point 253 204) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment3" (om-make-point 288 50) (quote "Klavierstuck III $") "" (om-make-point 540 34) nil (om-make-color 0 0 0) (om-make-font "Geneva" 36 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2" (om-make-point 314 44) (quote "Karlheinz Stockhausen") "" (om-make-point 538 5) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 135 42) (quote "(1952-53)") "" (om-make-point 610 87) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 127 35) (quote "mm. 8-10") "" (om-make-point 10 435) nil (om-make-color 4/17 74/255 199/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "CHORD-SEQ8" (let ((copy (make-instance (quote ominstance) :name "mm. 2-5" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800 7600 5300 5500) (7000) (7600 7700 6600 5500) (7000))) :lonset (quote (0 1000 3500 4500 6500)) :ldur (quote ((3000 3000 3000 3000) (2000) (3000 3000 3000 3000) (2000))) :lvel (quote ((80 80 80 80) (80) (80 80 80 80) (80))) :loffset (quote ((0 0 0 0) (0) (0 0 0 0) (0))) :lchan (quote ((1 1 1 1) (2) (1 1 1 1) (2))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0) (0 0 0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.2 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (player scale score-mode cursor-mode show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list (quote :midi-player) nil 0 (quote :normal) (quote t) 0 0 2621450 18350450 0 1000 nil 39/100 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote (nil "2021/07/11 19:48:20"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 145 594) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "CHORD-SEQ7" (let ((copy (make-instance (quote ominstance) :name "m. 1" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7000 8300 6900 5600) (5000) (6200) (8000 7000 5700 5900))) :lonset (quote (0 1000 3500 4500 6500)) :ldur (quote ((3000 3000 3000 3000) (2000) (3000) (2000 2000 2000 2000))) :lvel (quote ((80 80 80 80) (80) (80) (80 80 80 80))) :loffset (quote ((0 0 0 0) (0) (0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (2) (2) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0) (0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.2 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (player scale score-mode cursor-mode show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list (quote :midi-player) nil 0 (quote :normal) (quote t) 0 0 2621450 18350450 0 1000 nil 39/100 3 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote (nil "2021/07/11 19:48:20"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 153 532) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "CHORD-SEQ6" (let ((copy (make-instance (quote ominstance) :name "mm. 8-10" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8500) (7700 6600 6400 5500) (7600 7700 6600 5500) (7000))) :lonset (quote (0 1000 3500 4500 6500)) :ldur (quote ((3000) (2000 2000 2000 2000) (3000 3000 3000 3000) (2000))) :lvel (quote ((80) (80 80 80 80) (80 80 80 80) (80))) :loffset (quote ((0) (0 0 0 0) (0 0 0 0) (0))) :lchan (quote ((2) (1 1 1 1) (1 1 1 1) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0 0 0) (0 0 0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.2 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (player scale score-mode cursor-mode show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list (quote :midi-player) nil 0 (quote :normal) (quote t) 0 0 2621450 18350450 0 1000 nil 39/100 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote (nil "2021/07/11 19:48:20"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 140 437) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "CHORD-SEQ5" (let ((copy (make-instance (quote ominstance) :name "mm. 5-7 " :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7600 7700 7500 6200) (8000) (7600 7700 7500 6200) (5900))) :lonset (quote (0 1000 3500 4500 6500)) :ldur (quote ((3000 3000 3000 3000) (2000) (3000 3000 3000 3000) (2000))) :lvel (quote ((80 80 80 80) (80) (80 80 80 80) (80))) :loffset (quote ((0 0 0 0) (0) (0 0 0 0) (0))) :lchan (quote ((1 1 1 1) (2) (1 1 1 1) (2))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0) (0 0 0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.2 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (player scale score-mode cursor-mode show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list (quote :midi-player) nil 0 (quote :normal) (quote t) 0 0 2621450 18350450 0 1000 nil 39/100 0 (quote :default) (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote (nil "2021/07/11 19:48:20"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 140 304) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "CHORD-SEQ4" (let ((copy (make-instance (quote ominstance) :name "mm. 2-3" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5900) (5200 6200 6500 7500) (5200 6200 6500 7500) (6800))) :lonset (quote (0 1000 3500 4500 6500)) :ldur (quote ((3000) (2000 2000 2000 2000) (3000 3000 3000 3000) (2000))) :lvel (quote ((80) (80 80 80 80) (80 80 80 80) (80))) :loffset (quote ((0) (0 0 0 0) (0 0 0 0) (0))) :lchan (quote ((2) (1 1 1 1) (1 1 1 1) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0 0 0) (0 0 0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.2 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (player scale score-mode cursor-mode show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list (quote :midi-player) nil 0 (quote :normal) (quote t) 0 0 2621450 18350450 0 1000 nil 39/100 0 (quote :default) (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote (nil "2021/07/11 19:48:20"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 139 230) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "CHORD-SEQ3" (let ((copy (make-instance (quote ominstance) :name "mm. 1-2" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7000 8300 6900 5600) (5000) (8100 9200 7000 5900) (6500))) :lonset (quote (0 1000 3500 4500 6500)) :ldur (quote ((3000 3000 3000 3000) (2000) (3000 3000 3000 3000) (2000))) :lvel (quote ((80 80 80 80) (80) (80 80 80 80) (80))) :loffset (quote ((0 0 0 0) (0) (0 0 0 0) (0))) :lchan (quote ((1 1 1 1) (2) (1 1 1 1) (2))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0) (0 0 0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.2 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (player scale score-mode cursor-mode show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list (quote :midi-player) nil 0 (quote :normal) (quote t) 0 0 2621450 18350450 0 1000 nil 39/100 3 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote (nil "2021/07/11 19:48:20"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 140 162) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "CHORD-SEQ2" (let ((copy (make-instance (quote ominstance) :name "mm. 5-7 " :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (8000 7000 5700 5900) (8000 7000 5700 5900) (7700))) :lonset (quote (0 1000 3500 4500 6500)) :ldur (quote ((3000) (2000 2000 2000 2000) (3000 3000 3000 3000) (2000))) :lvel (quote ((80) (80 80 80 80) (80 80 80 80) (80))) :loffset (quote ((0) (0 0 0 0) (0 0 0 0) (0))) :lchan (quote ((2) (1 1 1 1) (1 1 1 1) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0 0 0) (0 0 0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.2 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (player scale score-mode cursor-mode show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list (quote :midi-player) nil 0 (quote :normal) (quote t) 0 0 2621450 18350450 0 1000 nil 39/100 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2))) (setf (create-info copy) (quote (nil "2021/07/11 19:48:20"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 141 372) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 41 37) (quote "T0") "" (om-make-point 272 595) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 94 41) (quote "===>") "" (om-make-point 258 638) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 95 40) (quote "===>") "" (om-make-point 255 549) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 42 37) (quote "P8") "" (om-make-point 341 639) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 120 37) (quote "mm. 2-5") "" (om-make-point 13 600) nil (om-make-color 4/17 74/255 199/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 22 36) (quote "P") "" (om-make-point 348 548) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 22 36) (quote "P") "" (om-make-point 221 550) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 96 34) (quote " ===>") "" (om-make-point 244 447) nil (om-make-color 27/85 67/85 56/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 111 34) (quote "mm. 5-7 ") "" (om-make-point 21 370) nil (om-make-color 4/17 74/255 199/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 25 36) (quote "p") "" (om-make-point 362 377) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 22 36) (quote "P") "" (om-make-point 202 381) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 93 35) (quote " ===>") "" (om-make-point 242 237) nil (om-make-color 27/85 67/85 56/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 48 39) (quote "p6") "" (om-make-point 356 304) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 42 37) (quote "P6") "" (om-make-point 197 310) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 69 38) (quote "m. 1") "" (om-make-point 27 545) nil (om-make-color 4/17 74/255 199/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 108 35) (quote "mm. 5-7 ") "" (om-make-point 21 301) nil (om-make-color 4/17 74/255 199/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 108 32) (quote "mm. 2-3") "" (om-make-point 21 231) nil (om-make-color 4/17 74/255 199/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 117 36) (quote "mm. 1-2") "" (om-make-point 20 166) nil (om-make-color 4/17 74/255 199/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 42 37) (quote "P8") "" (om-make-point 216 638) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 96 34) (quote " ===>") "" (om-make-point 242 380) nil (om-make-color 27/85 67/85 56/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 48 39) (quote "p8") "" (om-make-point 199 443) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 42 37) (quote "P8") "" (om-make-point 350 439) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 89 34) (quote " ===>") "" (om-make-point 237 170) nil (om-make-color 27/85 67/85 56/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 48 39) (quote "p6") "" (om-make-point 189 233) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 94 35) (quote " ===>") "" (om-make-point 242 306) nil (om-make-color 27/85 67/85 56/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 22 36) (quote "P") "" (om-make-point 190 166) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 78 45) (quote "J=T7I") "" (om-make-point 241 137) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 25 36) (quote "p") "" (om-make-point 361 163) nil (om-make-color 0 0 0) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 42 37) (quote "P6") "" (om-make-point 354 232) nil (om-make-color 209/255 31/255 97/255) (om-make-font "Geneva" 24 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) (list (let ((newpict (make-instance (quote patch-picture) :name "stock1" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "stock1" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 468 133)) (setf (pict-size newpict) (om-make-point 439 283)) newpict) (let ((newpict (make-instance (quote patch-picture) :name "stock2" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "stock2" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 432 410)) (setf (pict-size newpict) (om-make-point 516 338)) newpict)) 6.2))
