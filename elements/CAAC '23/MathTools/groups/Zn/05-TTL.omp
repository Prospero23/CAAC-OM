; OM File Header - Saved 2023/03/13 12:00:10
; (6.2 :patc (om-make-point 93 78) (om-make-point 0 0) (om-make-point 1126 679) "No documentation " 183 0 nil "2023/03/13 12:00:10")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "05-TTL" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 912 278) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 20) "15" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TL-ZN1" (quote tl-zn) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "N" nil))) (om-make-point 867 161) nil nil nil "tl-zn" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment4" (om-make-point 125 57) (quote "<--- the complete list of chords with limited transposition") "" (om-make-point 896 327) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ1" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 767 556) (om-make-point 312 97) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6200 6600 6800) (6000 6600) (6000 6100 6300 6600 6700 6900) (6000 6200 6300 6600 6800 6900) (6000 6100 6600 6700) (6000 6100 6200 6400 6600 6700 6800 7000) (6000 6100 6200 6600 6700 6800) (6000 6100 6200 6300 6600 6700 6800 6900) (6000 6100 6200 6300 6400 6600 6700 6800 6900 7000) (6000 6400 6800) (6000 6100 6400 6500 6800 6900) (6000 6100 6200 6400 6500 6600 6800 6900 7000) (6000 6300 6600 6900) (6000 6100 6300 6400 6600 6700 6900 7000) (6000 6200 6400 6600 6800 7000))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player scale approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list (quote :midi-player) nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C2CHORD-SEQ" (quote c2chord-seq) (quote ((om-load-inputfun (quote input-funbox) "the cercle" "SELF" nil) (om-load-inputfun (quote input-funbox) "initial value" "BASE" 6000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 100))) (om-make-point 847 462) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 961 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 805 124) (om-make-point 33 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 72) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 755 296) (om-make-point 130 129) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 2 6 8) (list 0 6) (list 0 1 3 6 7 9) (list 0 2 3 6 8 9) (list 0 1 6 7) (list 0 1 2 4 6 7 8 10) (list 0 1 2 6 7 8) (list 0 1 2 3 6 7 8 9) (list 0 1 2 3 4 6 7 8 9 10) (list 0 4 8) (list 0 1 4 5 8 9) (list 0 1 2 4 5 6 8 9 10) (list 0 3 6 9) (list 0 1 3 4 6 7 9 10) (list 0 2 4 6 8 10)) :from-file t)) "x" nil (pairlis (quote (winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict show-stems)) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0) (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C2CHORD" (quote c2chord) (quote ((om-load-inputfun (quote input-funbox) "the cercle" "SELF" nil) (om-load-inputfun (quote input-funbox) "index" "INDEX" 0) (om-load-inputfun (quote input-funbox) "initial value" "BASE" 6000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 100))) (om-make-point 488 334) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11" (om-make-point 793 60) (quote "The family of transposition limited chords$") "" (om-make-point 108 6) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 477 553) (om-make-point 210 93) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200 6400 6600 6800 7000 7200) (6400 6600 6800 7000 7200 7400) (6600 6800 7000 7200 7400 7600))) :lonset (quote (0 1000 2000 3000)) :ldur (quote ((1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx show-stems)) (list nil 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 596 444) (om-make-point 98 29) (list 200 400 600) "(200 400 600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "midics" nil) (om-load-inputfun (quote input-funbox) "no documentation" "transpositions" nil))) (om-make-point 566 489) nil nil nil (list (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 178 301) (om-make-point 80 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx show-stems)) (list nil 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 (quote t))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 113 233) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 100 179) (om-make-point 68 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 164 110) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 148 37) "no documentation" "transpositions" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 106 40) "no documentation" "midics" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 168 380) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 93 379) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 1 0 1 nil 0) (2 0 1 0 nil 0) (5 0 2 0 nil 0) (3 0 2 1 nil 0) (4 0 3 0 nil 0) (0 0 6 0 nil 0) (1 0 7 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 475 393) (om-make-point 77 89) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6200 6400 6600 6800 7000)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx show-stems)) (list nil 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 97 81) (quote "<--- It is the greatest value in order to have chords belonging to this family! ") "" (om-make-point 584 77) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment5" (om-make-point 153 56) (quote "<--- Some exachords in the cyclic representation") "" (om-make-point 259 415) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment4" (om-make-point 96 64) (quote "<--- orbites give the complete list of exachords in Z/12Z$") "" (om-make-point 299 291) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment3" (om-make-point 141 57) (quote "<--- Card shows that there are 80 exachords (up to transposition!)") "" (om-make-point 264 204) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2" (om-make-point 132 37) (quote "<--- we are looking for exachords") "" (om-make-point 201 139) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 65 58) (quote "---->$The octave is divided in 12 parts") "" (om-make-point 41 152) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 553 81) (om-make-point 22 29) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 484 81) (om-make-point 32 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 522 81) (om-make-point 24 31) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE1" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 85 361) (om-make-point 166 171) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 2 4 6 8 10) (list 0 1 4 6 8 10) (list 0 1 4 6 7 10) (list 0 1 4 5 8 10) (list 0 1 4 5 8 9) (list 0 1 3 6 8 10) (list 0 1 3 6 8 9) (list 0 1 3 6 7 10) (list 0 1 3 6 7 9) (list 0 1 3 5 8 10) (list 0 1 3 5 8 9) (list 0 1 3 5 7 10) (list 0 1 3 5 7 9) (list 0 1 3 5 7 8) (list 0 1 3 5 6 10) (list 0 1 3 5 6 9) (list 0 1 3 5 6 8) (list 0 1 3 4 8 10) (list 0 1 3 4 8 9) (list 0 1 3 4 7 10) (list 0 1 3 4 7 9) (list 0 1 3 4 7 8) (list 0 1 3 4 6 10) (list 0 1 3 4 6 9) (list 0 1 3 4 6 8) (list 0 1 3 4 6 7) (list 0 1 2 7 9 10) (list 0 1 2 7 8 10) (list 0 1 2 6 9 10) (list 0 1 2 6 8 10) (list 0 1 2 6 8 9) (list 0 1 2 6 7 10) (list 0 1 2 6 7 9) (list 0 1 2 6 7 8) (list 0 1 2 5 9 10) (list 0 1 2 5 8 10) (list 0 1 2 5 8 9) (list 0 1 2 5 7 10) (list 0 1 2 5 7 9) (list 0 1 2 5 7 8) (list 0 1 2 5 6 10) (list 0 1 2 5 6 9) (list 0 1 2 5 6 8) (list 0 1 2 5 6 7) (list 0 1 2 4 9 10) (list 0 1 2 4 8 10) (list 0 1 2 4 8 9) (list 0 1 2 4 7 10) (list 0 1 2 4 7 9) (list 0 1 2 4 7 8) (list 0 1 2 4 6 10) (list 0 1 2 4 6 9) (list 0 1 2 4 6 8) (list 0 1 2 4 6 7) (list 0 1 2 4 5 10) (list 0 1 2 4 5 9) (list 0 1 2 4 5 8) (list 0 1 2 4 5 7) (list 0 1 2 4 5 6) (list 0 1 2 3 9 10) (list 0 1 2 3 8 10) (list 0 1 2 3 8 9) (list 0 1 2 3 7 10) (list 0 1 2 3 7 9) (list 0 1 2 3 7 8) (list 0 1 2 3 6 10) (list 0 1 2 3 6 9) (list 0 1 2 3 6 8) (list 0 1 2 3 6 7) (list 0 1 2 3 5 10) (list 0 1 2 3 5 9) (list 0 1 2 3 5 8) (list 0 1 2 3 5 7) (list 0 1 2 3 5 6) (list 0 1 2 3 4 10) (list 0 1 2 3 4 9) (list 0 1 2 3 4 8) (list 0 1 2 3 4 7) (list 0 1 2 3 4 6) (list 0 1 2 3 4 5)) :from-file t)) nil nil (pairlis (quote (obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems)) (list 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 168 148) (om-make-point 23 27) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 106 153) (om-make-point 37 31) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ORBITES" (quote orbites) (quote ((om-load-inputfun (quote input-funbox) "Zn" "N" 12) (om-load-inputfun (quote input-funbox) "elments" "K" 6) (om-load-inputfun (quote input-funbox) "how many answers" "HOWMANY" 4))) (om-make-point 66 273) (om-make-point 224 61) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CARD" (quote card) (quote ((om-load-inputfun (quote input-funbox) "Zn" "N" 12) (om-load-inputfun (quote input-funbox) "elments" "K" 6))) (om-make-point 220 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 42 22) (quote "TTL") "" (om-make-point 457 134) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 485 190) (om-make-point 109 118) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 2 4 6 8 10) (list 0 1 4 6 7 10) (list 0 1 4 5 8 9) (list 0 1 3 6 7 9) (list 0 1 2 6 7 8)) :from-file t)) nil nil (pairlis (quote (obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems)) (list 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FAMILLE" (quote famille) (quote ((om-load-inputfun (quote input-funbox) "Zn" "N" 12) (om-load-inputfunmenu1 (quote input-funmenu) "familly" "FAMILLY" "ttl" (list (list "tac" "tac") (list "tai" "tai") (list "tic" "tic") (list "ttl" "ttl") (list "tp" "tp") (list "tid" "tid"))) (om-load-inputfun (quote input-funbox) "number of elements" "K" 6) (om-load-inputfun (quote input-funbox) "howmany answers" "HOWMANY" 2))) (om-make-point 508 119) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (6 0 1 0 nil 0) (4 0 3 0 nil 0) (7 0 4 0 nil 0) (1 0 5 0 nil 0) (6 0 7 1 nil 0) (1 0 7 2 nil 0) (29 0 8 0 nil 0) (12 0 10 0 nil 0) (13 1 12 0 nil 0) (11 0 12 1 nil 0) (8 0 13 0 nil 0) (26 0 23 2 nil 0) (25 0 26 0 nil 0) (24 0 26 1 nil 2) (27 0 26 2 nil 0) (25 0 27 0 nil 0) (24 0 27 1 nil 0) (30 0 29 2 nil 0) (21 0 30 0 nil 0) (22 0 30 2 nil 0) (20 0 30 3 nil 0))) nil 6.2))
