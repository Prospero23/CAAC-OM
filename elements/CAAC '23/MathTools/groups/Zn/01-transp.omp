; OM File Header - Saved 2023/03/13 12:00:10
; (7.01 :patc (om-make-point 24 24) (om-make-point 0 25) (om-make-point 739 650) "No documentation " 183 0 nil "2023/03/13 12:00:10")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "01-transp" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 56 58) (quote "----->$In integer $mode") "" (om-make-point 499 418) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 85 60) (quote "<------$Transposition factor") "" (om-make-point 595 378) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 572 384) (om-make-point 22 28) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 476 522) (om-make-point 136 103) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 3 4 5 9 10 0 1)) :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TRANSP" (quote transp) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "no documentation" "VALUE" 3) (om-load-inputfun (quote input-funbox) "no documentation" "SET" (list 0 1 3 4 5 7)))) (om-make-point 561 425) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 275 420) (om-make-point 136 103) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 2 6 7 9 10)) :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 352 332) (om-make-point 24 31) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 366 363) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 590 61) (quote "Transposition classes of chords") "" (om-make-point 68 6) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 239 28) (quote "<--- it calculates the list of the 66 eptachords") "" (om-make-point 257 248) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 110 70) (quote "<--- there are 66 chords of 7 notes (up to transposition!)") "" (om-make-point 215 157) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 123 59) (quote "<--- some eptachords in the cyclic representation$$$$") "" (om-make-point 161 358) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE1" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 32 346) (om-make-point 119 114) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 3 5 6 8 10) (list 0 1 3 4 7 8 10) (list 0 1 3 4 6 8 10) (list 0 1 3 4 6 8 9) (list 0 1 3 4 6 7 10) (list 0 1 3 4 6 7 9) (list 0 1 2 6 7 9 10) (list 0 1 2 5 7 9 10) (list 0 1 2 5 7 8 10) (list 0 1 2 5 6 9 10) (list 0 1 2 5 6 8 10) (list 0 1 2 5 6 8 9) (list 0 1 2 5 6 7 10) (list 0 1 2 4 7 9 10) (list 0 1 2 4 7 8 10) (list 0 1 2 4 7 8 9) (list 0 1 2 4 6 9 10) (list 0 1 2 4 6 8 10) (list 0 1 2 4 6 8 9) (list 0 1 2 4 6 7 10) (list 0 1 2 4 6 7 9) (list 0 1 2 4 6 7 8) (list 0 1 2 4 5 9 10) (list 0 1 2 4 5 8 10) (list 0 1 2 4 5 8 9) (list 0 1 2 4 5 7 10) (list 0 1 2 4 5 7 9) (list 0 1 2 4 5 7 8) (list 0 1 2 4 5 6 10) (list 0 1 2 4 5 6 9) (list 0 1 2 4 5 6 8) (list 0 1 2 3 8 9 10) (list 0 1 2 3 7 9 10) (list 0 1 2 3 7 8 10) (list 0 1 2 3 7 8 9) (list 0 1 2 3 6 9 10) (list 0 1 2 3 6 8 10) (list 0 1 2 3 6 8 9) (list 0 1 2 3 6 7 10) (list 0 1 2 3 6 7 9) (list 0 1 2 3 6 7 8) (list 0 1 2 3 5 9 10) (list 0 1 2 3 5 8 10) (list 0 1 2 3 5 8 9) (list 0 1 2 3 5 7 10) (list 0 1 2 3 5 7 9) (list 0 1 2 3 5 7 8) (list 0 1 2 3 5 6 10) (list 0 1 2 3 5 6 9) (list 0 1 2 3 5 6 8) (list 0 1 2 3 5 6 7) (list 0 1 2 3 4 9 10) (list 0 1 2 3 4 8 10) (list 0 1 2 3 4 8 9) (list 0 1 2 3 4 7 10) (list 0 1 2 3 4 7 9) (list 0 1 2 3 4 7 8) (list 0 1 2 3 4 6 10) (list 0 1 2 3 4 6 9) (list 0 1 2 3 4 6 8) (list 0 1 2 3 4 6 7) (list 0 1 2 3 4 5 10) (list 0 1 2 3 4 5 9) (list 0 1 2 3 4 5 8) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 6)) :from-file t)) nil nil (pairlis (quote (obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems)) (list 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 108 84) (om-make-point 35 27) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 44 63) (om-make-point 51 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ORBITES" (quote orbites) (quote ((om-load-inputfun (quote input-funbox) "Zn" "N" 12) (om-load-inputfun (quote input-funbox) "elments" "K" 6) (om-load-inputfun (quote input-funbox) "how many answers" "HOWMANY" 4))) (om-make-point 12 246) (om-make-point 224 63) (list (list (list 0 1 3 5 6 8 10) (list 0 1 3 4 7 8 10) (list 0 1 3 4 6 8 10) (list 0 1 3 4 6 8 9) (list 0 1 3 4 6 7 10) (list 0 1 3 4 6 7 9) (list 0 1 2 6 7 9 10) (list 0 1 2 5 7 9 10) (list 0 1 2 5 7 8 10) (list 0 1 2 5 6 9 10) (list 0 1 2 5 6 8 10) (list 0 1 2 5 6 8 9) (list 0 1 2 5 6 7 10) (list 0 1 2 4 7 9 10) (list 0 1 2 4 7 8 10) (list 0 1 2 4 7 8 9) (list 0 1 2 4 6 9 10) (list 0 1 2 4 6 8 10) (list 0 1 2 4 6 8 9) (list 0 1 2 4 6 7 10) (list 0 1 2 4 6 7 9) (list 0 1 2 4 6 7 8) (list 0 1 2 4 5 9 10) (list 0 1 2 4 5 8 10) (list 0 1 2 4 5 8 9) (list 0 1 2 4 5 7 10) (list 0 1 2 4 5 7 9) (list 0 1 2 4 5 7 8) (list 0 1 2 4 5 6 10) (list 0 1 2 4 5 6 9) (list 0 1 2 4 5 6 8) (list 0 1 2 3 8 9 10) (list 0 1 2 3 7 9 10) (list 0 1 2 3 7 8 10) (list 0 1 2 3 7 8 9) (list 0 1 2 3 6 9 10) (list 0 1 2 3 6 8 10) (list 0 1 2 3 6 8 9) (list 0 1 2 3 6 7 10) (list 0 1 2 3 6 7 9) (list 0 1 2 3 6 7 8) (list 0 1 2 3 5 9 10) (list 0 1 2 3 5 8 10) (list 0 1 2 3 5 8 9) (list 0 1 2 3 5 7 10) (list 0 1 2 3 5 7 9) (list 0 1 2 3 5 7 8) (list 0 1 2 3 5 6 10) (list 0 1 2 3 5 6 9) (list 0 1 2 3 5 6 8) (list 0 1 2 3 5 6 7) (list 0 1 2 3 4 9 10) (list 0 1 2 3 4 8 10) (list 0 1 2 3 4 8 9) (list 0 1 2 3 4 7 10) (list 0 1 2 3 4 7 9) (list 0 1 2 3 4 7 8) (list 0 1 2 3 4 6 10) (list 0 1 2 3 4 6 9) (list 0 1 2 3 4 6 8) (list 0 1 2 3 4 6 7) (list 0 1 2 3 4 5 10) (list 0 1 2 3 4 5 9) (list 0 1 2 3 4 5 8) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 6))) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CARD" (quote card) (quote ((om-load-inputfun (quote input-funbox) "Zn" "N" 12) (om-load-inputfun (quote input-funbox) "elments" "K" 6))) (om-make-point 166 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 3 2 nil 0) (2 0 4 1 nil 0) (7 0 4 2 nil 0) (7 0 5 2 nil 0) (6 0 7 0 nil 0) (15 0 7 1 nil 0) (15 0 12 2 nil 0) (14 0 15 0 nil 0) (13 0 15 1 nil 2) (16 0 15 2 nil 0) (14 0 16 0 nil 0) (13 0 16 1 nil 0))) nil 7.01))
