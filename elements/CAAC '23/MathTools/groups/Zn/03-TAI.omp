; OM File Header - Saved 2023/03/13 12:00:10
; (7.01 :patc (om-make-point 151 23) (om-make-point 0 25) (om-make-point 1027 567) "No documentation " 183 0 nil "2023/03/13 12:00:10")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "03-TAI" (quote ((let ((box (om-load-boxcall (quote genfun) "C2CHORD-SEQ" (quote c2chord-seq) (quote ((om-load-inputfun (quote input-funbox) "the cercle" "SELF" nil) (om-load-inputfun (quote input-funbox) "initial value" "BASE" 6000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 100))) (om-make-point 657 392) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11" (om-make-point 576 52) (quote "The family of self-invers chords") "" (om-make-point 188 19) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 576 462) (om-make-point 277 101) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6100 6200 6400 6500 6900 7000) (6000 6100 6200 6400 6500 6600 6900) (6000 6100 6200 6300 6400 6700 6900) (6000 6100 6200 6300 6400 6600 7000) (6000 6100 6200 6300 6400 6500 6600))) :lonset (quote (0 1000 2000 3000 4000 5000)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list nil 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 171 77) (quote "<--- These are 5 of the 10 possible self-invers eptachords (up to transposition!)$Note that they have different inversion axis.") "" (om-make-point 782 277) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment6" (om-make-point 82 49) (quote "<--- we ask for five solutions. ") "" (om-make-point 756 105) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 724 112) (om-make-point 24 25) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 688 112) (om-make-point 20 28) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 648 114) (om-make-point 29 33) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment5" (om-make-point 102 75) (quote "<--- Some eptachords in the cyclic representation") "" (om-make-point 292 426) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment4" (om-make-point 96 64) (quote "<--- orbites give the complete list of eptachords in Z/12Z$") "" (om-make-point 356 280) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment3" (om-make-point 141 57) (quote "<--- Card shows that there are 66 eptachords (up to transposition!)") "" (om-make-point 316 217) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2" (om-make-point 132 37) (quote "<--- we are looking for eptachords") "" (om-make-point 269 136) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 65 58) (quote "---->$The octave is divided in 12 parts") "" (om-make-point 78 115) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE1" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 104 391) (om-make-point 169 146) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 3 5 6 8 10) (list 0 1 3 4 7 8 10) (list 0 1 3 4 6 8 10) (list 0 1 3 4 6 8 9) (list 0 1 3 4 6 7 10) (list 0 1 3 4 6 7 9) (list 0 1 2 6 7 9 10) (list 0 1 2 5 7 9 10) (list 0 1 2 5 7 8 10) (list 0 1 2 5 6 9 10) (list 0 1 2 5 6 8 10) (list 0 1 2 5 6 8 9) (list 0 1 2 5 6 7 10) (list 0 1 2 4 7 9 10) (list 0 1 2 4 7 8 10) (list 0 1 2 4 7 8 9) (list 0 1 2 4 6 9 10) (list 0 1 2 4 6 8 10) (list 0 1 2 4 6 8 9) (list 0 1 2 4 6 7 10) (list 0 1 2 4 6 7 9) (list 0 1 2 4 6 7 8) (list 0 1 2 4 5 9 10) (list 0 1 2 4 5 8 10) (list 0 1 2 4 5 8 9) (list 0 1 2 4 5 7 10) (list 0 1 2 4 5 7 9) (list 0 1 2 4 5 7 8) (list 0 1 2 4 5 6 10) (list 0 1 2 4 5 6 9) (list 0 1 2 4 5 6 8) (list 0 1 2 3 8 9 10) (list 0 1 2 3 7 9 10) (list 0 1 2 3 7 8 10) (list 0 1 2 3 7 8 9) (list 0 1 2 3 6 9 10) (list 0 1 2 3 6 8 10) (list 0 1 2 3 6 8 9) (list 0 1 2 3 6 7 10) (list 0 1 2 3 6 7 9) (list 0 1 2 3 6 7 8) (list 0 1 2 3 5 9 10) (list 0 1 2 3 5 8 10) (list 0 1 2 3 5 8 9) (list 0 1 2 3 5 7 10) (list 0 1 2 3 5 7 9) (list 0 1 2 3 5 7 8) (list 0 1 2 3 5 6 10) (list 0 1 2 3 5 6 9) (list 0 1 2 3 5 6 8) (list 0 1 2 3 5 6 7) (list 0 1 2 3 4 9 10) (list 0 1 2 3 4 8 10) (list 0 1 2 3 4 8 9) (list 0 1 2 3 4 7 10) (list 0 1 2 3 4 7 9) (list 0 1 2 3 4 7 8) (list 0 1 2 3 4 6 10) (list 0 1 2 3 4 6 9) (list 0 1 2 3 4 6 8) (list 0 1 2 3 4 6 7) (list 0 1 2 3 4 5 10) (list 0 1 2 3 4 5 9) (list 0 1 2 3 4 5 8) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 6)) :from-file t)) nil nil (pairlis (quote (winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode show-stems)) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 218 136) (om-make-point 33 29) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 156 108) (om-make-point 44 26) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ORBITES" (quote orbites) (quote ((om-load-inputfun (quote input-funbox) "Zn" "N" 12) (om-load-inputfun (quote input-funbox) "elments" "K" 6) (om-load-inputfun (quote input-funbox) "how many answers" "HOWMANY" 4))) (om-make-point 120 278) (om-make-point 224 61) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CARD" (quote card) (quote ((om-load-inputfun (quote input-funbox) "Zn" "N" 12) (om-load-inputfun (quote input-funbox) "elments" "K" 6))) (om-make-point 274 204) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 42 22) (quote "TAI") "" (om-make-point 601 190) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 644 263) (om-make-point 126 109) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 2 4 5 9 10) (list 0 1 2 4 5 6 9) (list 0 1 2 3 4 7 9) (list 0 1 2 3 4 6 10) (list 0 1 2 3 4 5 6)) :from-file t)) nil nil (pairlis (quote (winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode show-stems)) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FAMILLE" (quote famille) (quote ((om-load-inputfun (quote input-funbox) "Zn" "N" 12) (om-load-inputfunmenu1 (quote input-funmenu) "familly" "FAMILLY" "tai" (list (list "tac" "tac") (list "tai" "tai") (list "tic" "tic") (list "ttl" "ttl") (list "tp" "tp") (list "tid" "tid"))) (om-load-inputfun (quote input-funbox) "number of elements" "K" 7) (om-load-inputfun (quote input-funbox) "howmany answers" "HOWMANY" 2))) (om-make-point 642 161) (om-make-point 90 61) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((19 0 0 0 nil 0) (0 0 2 0 nil 0) (16 0 13 2 nil 0) (15 0 16 0 nil 0) (14 0 16 1 nil 2) (17 0 16 2 nil 0) (15 0 17 0 nil 0) (14 0 17 1 nil 0) (20 0 19 2 nil 0) (7 0 20 0 nil 0) (6 0 20 2 nil 0) (5 0 20 3 nil 0))) nil 6.2))
