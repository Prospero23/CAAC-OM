; OM File Header - Saved 2023/03/13 13:51:39
; (7.01 :patc (om-make-point 69 80) (om-make-point 50 50) (om-make-point 671 671) "No documentation " 183 0 nil "2023/03/13 13:51:39")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "17-subcomplex-Kh" (quote ((let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 115 870) (om-make-point 576 107) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6100 6300) (6000 6100 6600) (6000 6200 6600) (6000 6300 6700) (6000 6100 6200 6300 6700) (6000 6100 6200 6400 6800) (6000 6100 6300 6400 6700) (6000 6100 6300 6600 6700) (6000 6100 6300 6700 6800) (6000 6100 6300 6500 6700) (6000 6200 6300 6500 6800) (6000 6200 6300 6600 6800) (6000 6100 6200 6300 6600 6700) (6000 6100 6200 6300 6500 6700) (6000 6100 6300 6400 6500 6700) (6000 6200 6300 6400 6500 6800) (6000 6100 6200 6400 6600 6700) (6000 6100 6200 6300 6600 6800) (6000 6100 6200 6400 6500 6800) (6000 6100 6400 6500 6600 6800) (6000 6100 6200 6400 6700 6800) (6000 6100 6200 6500 6600 6800) (6000 6100 6200 6500 6700 6800) (6000 6200 6300 6400 6600 6800) (6000 6100 6200 6400 6600 6800) (6000 6100 6300 6400 6600 6900) (6000 6100 6300 6600 6700 6900) (6000 6200 6300 6500 6700 6900) (6000 6100 6300 6500 6700 6900))) :lonset (quote (0 750 1500 2250 3000 4250 5500 6750 8000 9250 10500 11750 13000 14500 16000 17500 19000 20500 22000 23500 25000 26500 28000 29500 31000 32500 34000 35500 37000 39250)) :ldur (quote ((1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000))) :lvel (quoteloffset (quote ((0 250 500) (0 250 500) (0 250 500) (0 250 500) (0 250 500 750 1000) (0 250 500 750 1000) (0 250 500 750 1000) (0 250 500 750 1000) (0 250 500 750 1000) (0 250 500 750 1000) (0 250 500 750 1000) (0 250 500 750 1000) (0 250 500 750 1000 1250) (0 250 500 750 1000 1250) (0 250 500 750 1000 1250) (0 250 500 750 1000 1250) (0 250 500 750 1000 1250) (0 250 500 750 1000 1250) (0 250 500 750 1000 1250) (0 250 500 750 1000 1250) (0 250 500 750 1000 1250) (0 250 500 750 1000 1250) (0 250 500 750 1000 1250) (0 250 500 750 1000 1250) (0 250 500 750 1000 1250) (0 250 500 750 1000 1250) (0 250 500 750 1000 1250) (0 250 500 750 1000 1250) (0 250 500 750 1000 1250))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 4 (om-make-point 370 280) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 447 662) (om-make-point 31 30) 250 "250" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "arpeggiator" (om-load-patch-abs1 "arpeggiator" (quote ((let ((box (om-load-boxout "output 2" 1 (om-make-point 256 401) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "connect-to-offsets" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 35 407) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "connect-to-onsets" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "arpeggiator" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "chords" nil) (om-load-inputfun (quote input-funbox) "" "dur" nil))) (om-make-point 85 148) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 40 446) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 176 510) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 83 509) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LAST" (quote last) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 245 378) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 200 202) (om-make-point 32 34) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 141 240) (om-make-point 51 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 133 318) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 140 396) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 84 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "dur" 1 (om-make-point 65 292) "" "dur" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 42 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chords" 0 (om-make-point 5 45) "" "chords" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 182 600) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 39 600) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((7 0 0 0 nil 0) (3 0 1 0 nil 0) (0 0 2 0 nil 0) (7 0 3 0 nil 0) (8 0 5 0 nil 0) (4 0 5 1 nil 0) (9 0 6 0 nil 0) (8 0 6 1 nil 0) (6 0 7 1 nil 0) (10 0 8 0 nil 0) (11 0 10 0 nil 0) (2 1 12 0 nil 0) (1 1 12 1 nil 0) (2 0 13 0 nil 0) (1 0 13 1 nil 0))) 2 "arpeggiator" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 137 215) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 171 298) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "duration" 1 (om-make-point 151 49) "" "duration" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "list-of-chords" 0 (om-make-point 6 49) "" "list-of-chords" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (4 0 1 0 nil 0) (6 0 2 0 nil 0) (5 0 2 1 nil 0) (2 1 3 0 nil 0) (3 0 4 1 nil 0))) 7.01 nil "" (om-make-point 2633 179) (om-make-point 567 571)) (quote ((om-load-inputfun (quote input-funbox) "" "list-of-chords" nil) (om-load-inputfun (quote input-funbox) "" "duration" nil))) (om-make-point 329 738) nil (list (list 0 750 1500 2250 3000 4250 5500 6750 8000 9250 10500 11750 13000 14500 16000 17500 19000 20500 22000 23500 25000 26500 28000 29500 31000 32500 34000 35500 37000 38500) (list (list 0 250 500) (list 0 250 500) (list 0 250 500) (list 0 250 500) (list 0 250 500 750 1000) (list 0 250 500 750 1000) (list 0 250 500 750 1000) (list 0 250 500 750 1000) (list 0 250 500 750 1000) (list 0 250 500 750 1000) (list 0 250 500 750 1000) (list 0 250 500 750 1000) (list 0 250 500 750 1000 1250) (list 0 250 500 750 1000 1250) (list 0 250 500 750 1000 1250) (list 0 250 500 750 1000 1250) (list 0 250 500 750 1000 1250) (list 0 250 500 750 1000 1250) (list 0 250 500 750 1000 1250) (list 0 250 500 750 1000 1250) (list 0 250 500 750 1000 1250) (list 0 250 500 750 1000 1250) (list 0 250 500 750 1000 1250) (list 0 250 500 750 1000 1250) (list 0 250 500 750 1000 1250) (list 0 250 500 750 1000 1250) (list 0 250 500 750 1000 1250) (list 0 250 500 750 1000 1250) (list 0 250 500 750 1000 1250))) nil "arpeggiator"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 52 565) (om-make-point 264 100) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6100 6300) (6000 6100 6600) (6000 6200 6600) (6000 6300 6700) (6000 6100 6200 6300 6700) (6000 6100 6200 6400 6800) (6000 6100 6300 6400 6700) (6000 6100 6300 6600 6700) (6000 6100 6300 6700 6800) (6000 6100 6300 6500 6700) (6000 6200 6300 6500 6800) (6000 6200 6300 6600 6800) (6000 6100 6200 6300 6600 6700) (6000 6100 6200 6300 6500 6700) (6000 6100 6300 6400 6500 6700) (6000 6200 6300 6400 6500 6800) (6000 6100 6200 6400 6600 6700) (6000 6100 6200 6300 6600 6800) (6000 6100 6200 6400 6500 6800) (6000 6100 6400 6500 6600 6800) (6000 6100 6200 6400 6700 6800) (6000 6100 6200 6500 6600 6800) (6000 6100 6200 6500 6700 6800) (6000 6200 6300 6400 6600 6800) (6000 6100 6200 6400 6600 6800) (6000 6100 6300 6400 6600 6900) (6000 6100 6300 6600 6700 6900) (6000 6200 6300 6500 6700 6900) (6000 6100 6300 6500 6700 6900))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000)) :ldur (quote ((1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000))) :lvel (quoteloffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 963 299) (om-make-point 2067 177) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C2CHORD-SEQ" (quote c2chord-seq) (quote ((om-load-inputfun (quote input-funbox) "the cercle" "SELF" nil) (om-load-inputfun (quote input-funbox) "initial value" "BASE" 6000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 100))) (om-make-point 79 442) (om-make-point 158 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 37 19) (quote "nexus$") "" (om-make-point 168 27) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 468 454) (om-make-point 55 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6400 6500 6600 6800 6900 7000 7100)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C2CHORD" (quote c2chord) (quote ((om-load-inputfun (quote input-funbox) "the cercle" "SELF" nil) (om-load-inputfun (quote input-funbox) "index" "INDEX" 0) (om-load-inputfun (quote input-funbox) "initial value" "BASE" 6000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 100))) (om-make-point 569 447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 81 44) (quote "in integral mode$<------------") "" (om-make-point 111 122) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 22 25) (quote "A") "" (om-make-point 151 25) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 462 42) (quote "It gives the collection of sets which are in a subset relation with a given set A (i.e. they are included or they include A) AND its complement. A is called nexus of the sous-complex Kh.$") "" (om-make-point 253 49) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 82 82) (om-make-point 24 25) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 57 82) (om-make-point 19 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 518 222) (om-make-point 180 183) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 2 4 5 6 8 9 10 11)) :from-file t)) nil nil (pairlis (quote (winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict show-stems)) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0) (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "COMP" (quote comp) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "no documentation" "FROM" 4) (om-load-inputfun (quote input-funbox) "no documentation" "TO" 4) (om-load-inputfun (quote input-funbox) "no documentation" "LIST" (list 0 1 2 7)))) (om-make-point 403 114) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 44 243) (om-make-point 108 99) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 3) (list 0 1 6) (list 0 2 6) (list 0 3 7) (list 0 1 2 3 7) (list 0 1 2 4 8) (list 0 1 3 4 7) (list 0 1 3 6 7) (list 0 1 3 7 8) (list 0 1 3 5 7) (list 0 2 3 5 8) (list 0 2 3 6 8) (list 0 1 2 3 6 7) (list 0 1 2 3 5 7) (list 0 1 3 4 5 7) (list 0 2 3 4 5 8) (list 0 1 2 4 6 7) (list 0 1 2 3 6 8) (list 0 1 2 4 5 8) (list 0 1 4 5 6 8) (list 0 1 2 4 7 8) (list 0 1 2 5 6 8) (list 0 1 2 5 7 8) (list 0 2 3 4 6 8) (list 0 1 2 4 6 8) (list 0 1 3 4 6 9) (list 0 1 3 6 7 9) (list 0 2 3 5 7 9) (list 0 1 3 5 7 9)) :from-file t)) nil nil (pairlis (quote (winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict show-stems)) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0) (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 399 452) (om-make-point 55 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6100 6300 6700)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems cursor-mode score-mode player)) (list nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 1 (om-make-point 500 280) (om-make-point 10 40) 0 0 (quote t) (quote :normal) 0 (quote :osc-scoreplayer))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C2CHORD" (quote c2chord) (quote ((om-load-inputfun (quote input-funbox) "the cercle" "SELF" nil) (om-load-inputfun (quote input-funbox) "index" "INDEX" 0) (om-load-inputfun (quote input-funbox) "initial value" "BASE" 6000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 100))) (om-make-point 297 448) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 269 222) (om-make-point 157 186) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 3 7)) :from-file t)) nil nil (pairlis (quote (winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict show-stems)) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0) (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PC-SET1" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "no documentation" "FN-NAME" (quote |6-Z10|)))) (om-make-point 215 92) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 136 50) (om-make-point 54 30) (quote |4-Z29|) "4-Z29" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-COMPLEX" (quote sub-complex) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TYPE" (quote :integer) (list (list "fn" (quote :fn)) (list "integer" (quote :integer)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "no documentation" "LOW" 3) (om-load-inputfun (quote input-funbox) "no documentation" "HIGH" 6) (om-load-inputfun (quote input-funbox) "no documentation" "FN-NAME" (quote |4-6|)))) (om-make-point 43 125) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 356 55) (quote "Sub-Complex Kh ") "" (om-make-point 263 0) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 1 0 1 nil 0) (2 0 0 2 nil 0) (2 1 0 5 nil 0) (3 1 2 0 nil 0) (1 0 2 1 nil 0) (4 0 3 0 nil 0) (15 0 4 0 nil 0) (7 0 6 0 nil 0) (13 0 7 0 nil 0) (14 0 13 2 nil 0) (19 0 14 3 nil 0) (21 0 15 2 nil 0) (17 0 16 0 nil 0) (18 0 17 0 nil 0) (19 0 18 2 nil 0) (20 0 19 1 nil 0) (12 0 21 1 nil 0) (11 0 21 2 nil 0) (20 0 21 3 nil 0))) nil 7.01))
