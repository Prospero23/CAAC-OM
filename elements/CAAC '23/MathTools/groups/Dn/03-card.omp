; OM File Header - Saved 2023/03/13 12:00:10
; (7.01 :patc (om-make-point 213 26) (om-make-point 0 25) (om-make-point 695 625) "No documentation " 183 0 nil "2023/03/13 12:00:10")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "03-card" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 602 28) (quote "There would be 7293 eptachords equivalent under transposition and/or inversion in a quarter-tone division of the octave") "" (om-make-point 219 469) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 255 44) (quote "So there are 38 eptachords which are equivalent under transposition and/or inversion") "" (om-make-point 216 276) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 109 67) (quote "It gives the total number of PC-Sets with 7 elements$<------------") "" (om-make-point 378 192) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 279 345) (om-make-point 53 30) 24 "24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 367 346) (om-make-point 39 28) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DN-CARD" (quote dn-card) (quote ((om-load-inputfun (quote input-funbox) "Zn" "N" 12) (om-load-inputfun (quote input-funbox) "elments" "K" 6))) (om-make-point 333 396) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 53 394) (om-make-point 100 99) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 2 3 4 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 8) (list 0 1 2 3 4 6 7) (list 0 1 2 3 5 6 7) (list 0 1 2 3 4 7 8) (list 0 1 2 3 6 7 8) (list 0 2 3 4 5 6 8) (list 0 1 2 3 4 6 8) (list 0 1 2 3 4 6 9) (list 0 1 3 4 5 6 8) (list 0 1 2 3 4 7 9) (list 0 1 2 4 5 6 8) (list 0 1 2 3 5 7 8) (list 0 1 2 4 6 7 8) (list 0 1 2 3 5 6 9) (list 0 1 2 4 5 6 9) (list 0 1 2 3 5 8 9) (list 0 1 2 3 6 7 9) (list 0 1 2 4 7 8 9) (list 0 1 2 4 5 8 9) (list 0 1 2 5 6 8 9) (list 0 2 3 4 5 7 9) (list 0 1 2 3 5 7 9) (list 0 2 3 4 6 7 9) (list 0 1 3 4 5 7 9) (list 0 1 2 4 5 7 9) (list 0 1 3 5 6 7 9) (list 0 1 2 4 6 7 9) (list 0 1 2 4 6 8 9) (list 0 1 3 4 6 7 9) (list 0 1 3 4 6 8 9) (list 0 1 2 4 6 8 10) (list 0 1 3 4 6 8 10) (list 0 1 3 5 6 8 10) (list 0 1 2 3 5 6 8) (list 0 1 3 4 5 7 8) (list 0 1 2 4 5 7 8)) :from-file t)) nil nil (pairlis (quote (show-stems deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos)) (list (quote t) (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PC-SET" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "no documentation" "FN-NAME" (quote |6-Z10|)))) (om-make-point 50 264) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 103 113) (om-make-point 39 27) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DN-ORBITES" (quote dn-orbites) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" 3))) (om-make-point 106 180) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 403 115) (om-make-point 37 27) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 259 120) (om-make-point 43 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DN-CARD" (quote dn-card) (quote ((om-load-inputfun (quote input-funbox) "Zn" "N" 12) (om-load-inputfun (quote input-funbox) "elments" "K" 6))) (om-make-point 316 197) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 572 57) (quote "Number of PC-Sets of a given cardinality") "" (om-make-point 53 14) nil (om-make-color 10/51 52/255 199/255) (om-make-font "Geneva" 36 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 6 2 nil 0) (9 0 7 1 nil 0) (8 0 9 0 nil 0) (11 0 12 0 nil 0) (10 0 12 1 nil 0))) nil 7.01))
