; OM File Header - Saved 2023/03/13 13:51:39
; (7.01 :patc (om-make-point 46 15) (om-make-point 434 38) (om-make-point 1078 671) "non documentation" 183 0 nil "2023/03/13 13:51:39")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "01-Introduction" (quote ((let ((box (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 610 203) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 913 341) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 20) "34" :font (om-make-font "Helvetica" 11.0D0 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALLCLASSES1" (quote allclasses) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "N" nil) (om-load-inputfun (quote input-funbox) "no documentation" "K" nil))) (om-make-point 837 181) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 96 28) (quote "34 solutions") "" (om-make-point 925 393) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 124 106) (quote "Affine $group") "" (om-make-point 706 263) nil (om-make-color 166/255 11/51 36/85) (om-make-font "Georgia" 36 :family "Georgia" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 707 377) (om-make-point 207 253) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 2 6 7 8) (list 0 1 3 5 6 9) (list 0 1 3 4 7 9) (list 0 1 3 6 7 9) (list 0 1 3 4 6 7) (list 0 1 3 4 6 9) (list 0 2 3 5 6 8) (list 0 1 2 4 5 6) (list 0 1 2 4 6 7) (list 0 1 2 4 5 8) (list 0 1 2 4 6 8) (list 0 1 2 5 6 8) (list 0 1 2 4 7 8) (list 0 1 2 3 6 9) (list 0 1 3 4 7 8) (list 0 1 4 5 6 8) (list 0 2 3 4 6 9) (list 0 2 3 4 6 8) (list 0 1 3 4 5 7) (list 0 1 3 4 5 8) (list 0 1 2 3 5 6) (list 0 1 2 3 5 7) (list 0 1 2 3 6 7) (list 0 1 2 3 4 8) (list 0 1 2 3 6 8) (list 0 1 2 5 6 7) (list 0 2 3 4 5 7) (list 0 2 3 4 5 8) (list 0 1 2 4 5 7) (list 0 1 2 3 4 5) (list 0 1 2 3 4 6) (list 0 1 2 3 4 7) (list 0 2 4 6 8 10) (list 0 2 4 6 8 10)) :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos)) (list (quote t) 0 0 (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 962 282) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 866 132) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 819 133) (om-make-point 30 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DN-ORBITES" (quote dn-orbites) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" 3))) (om-make-point 521 132) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PC-SET" (quote pc-set) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "TYPE" (quote :integer) (list (list "integer" (quote :integer)) (list "vector" (quote :vector)) (list "pitch" (quote :pitch)))) (om-load-inputfun (quote input-funbox) "no documentation" "FN-NAME" (quote |6-Z10|)))) (om-make-point 521 213) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 157 109) (quote "Dihedral group$") "" (om-make-point 383 278) nil (om-make-color 166/255 11/51 36/85) (om-make-font "Georgia" 36 :family "Georgia" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 125 105) (quote "Cyclic group$") "" (om-make-point 132 283) nil (om-make-color 166/255 11/51 36/85) (om-make-font "Georgia" 36 :family "Georgia" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 72 21) (quote "k-chord") "" (om-make-point 571 90) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE1" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 406 386) (om-make-point 178 241) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 2 3 4 5) (list 0 1 2 3 4 6) (list 0 1 2 3 5 6) (list 0 1 2 4 5 6) (list 0 1 2 3 6 7) (list 0 1 2 5 6 7) (list 0 1 2 6 7 8) (list 0 2 3 4 5 7) (list 0 1 2 3 5 7) (list 0 1 3 4 5 7) (list 0 1 2 4 5 7) (list 0 1 2 4 6 7) (list 0 1 3 4 6 7) (list 0 1 3 4 5 8) (list 0 1 2 4 5 8) (list 0 1 4 5 6 8) (list 0 1 2 4 7 8) (list 0 1 2 5 7 8) (list 0 1 3 4 7 8) (list 0 1 4 5 8 9) (list 0 2 3 4 6 8) (list 0 1 2 4 6 8) (list 0 2 3 5 6 8) (list 0 1 3 4 6 8) (list 0 1 3 5 6 8) (list 0 1 3 5 7 8) (list 0 1 3 4 6 9) (list 0 1 3 5 6 9) (list 0 1 3 6 8 9) (list 0 1 3 6 7 9) (list 0 1 3 5 8 9) (list 0 2 4 5 7 9) (list 0 2 3 5 7 9) (list 0 1 3 5 7 9) (list 0 2 4 6 8 10) (list 0 1 2 3 4 7) (list 0 1 2 3 4 8) (list 0 1 2 3 7 8) (list 0 2 3 4 5 8) (list 0 1 2 3 5 8) (list 0 1 2 3 6 8) (list 0 1 2 3 6 9) (list 0 1 2 5 6 8) (list 0 1 2 5 6 9) (list 0 2 3 4 6 9) (list 0 1 2 4 6 9) (list 0 1 2 4 7 9) (list 0 1 2 5 7 9) (list 0 1 3 4 7 9) (list 0 1 4 6 7 9)) :from-file t)) nil nil (pairlis (quote (winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode show-stems)) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 536 95) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 87 27) (quote "50 solutions") "" (om-make-point 590 399) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 82 46) (quote "80 solutions") "" (om-make-point 21 404) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 72 21) (quote "k-chord") "" (om-make-point 296 108) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 103 43) (quote "n-tempered system$") "" (om-make-point 121 137) nil (om-make-color 28/85 41/255 1) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 889 56) (quote "Cyclic, dihedral and affines catalogues of chords") "" (om-make-point 66 11) nil (om-make-color 97/255 47/255 26/85) (om-make-font "Geneva" 36 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE1" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12) (om-load-inputfun (quote input-funbox) "no documentation" "PUNTOS" (list 0 5 7)))) (om-make-point 124 387) (om-make-point 196 248) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 2 4 6 8 10) (list 0 1 4 6 8 10) (list 0 1 4 6 7 10) (list 0 1 4 5 8 10) (list 0 1 4 5 8 9) (list 0 1 3 6 8 10) (list 0 1 3 6 8 9) (list 0 1 3 6 7 10) (list 0 1 3 6 7 9) (list 0 1 3 5 8 10) (list 0 1 3 5 8 9) (list 0 1 3 5 7 10) (list 0 1 3 5 7 9) (list 0 1 3 5 7 8) (list 0 1 3 5 6 10) (list 0 1 3 5 6 9) (list 0 1 3 5 6 8) (list 0 1 3 4 8 10) (list 0 1 3 4 8 9) (list 0 1 3 4 7 10) (list 0 1 3 4 7 9) (list 0 1 3 4 7 8) (list 0 1 3 4 6 10) (list 0 1 3 4 6 9) (list 0 1 3 4 6 8) (list 0 1 3 4 6 7) (list 0 1 2 7 9 10) (list 0 1 2 7 8 10) (list 0 1 2 6 9 10) (list 0 1 2 6 8 10) (list 0 1 2 6 8 9) (list 0 1 2 6 7 10) (list 0 1 2 6 7 9) (list 0 1 2 6 7 8) (list 0 1 2 5 9 10) (list 0 1 2 5 8 10) (list 0 1 2 5 8 9) (list 0 1 2 5 7 10) (list 0 1 2 5 7 9) (list 0 1 2 5 7 8) (list 0 1 2 5 6 10) (list 0 1 2 5 6 9) (list 0 1 2 5 6 8) (list 0 1 2 5 6 7) (list 0 1 2 4 9 10) (list 0 1 2 4 8 10) (list 0 1 2 4 8 9) (list 0 1 2 4 7 10) (list 0 1 2 4 7 9) (list 0 1 2 4 7 8) (list 0 1 2 4 6 10) (list 0 1 2 4 6 9) (list 0 1 2 4 6 8) (list 0 1 2 4 6 7) (list 0 1 2 4 5 10) (list 0 1 2 4 5 9) (list 0 1 2 4 5 8) (list 0 1 2 4 5 7) (list 0 1 2 4 5 6) (list 0 1 2 3 9 10) (list 0 1 2 3 8 10) (list 0 1 2 3 8 9) (list 0 1 2 3 7 10) (list 0 1 2 3 7 9) (list 0 1 2 3 7 8) (list 0 1 2 3 6 10) (list 0 1 2 3 6 9) (list 0 1 2 3 6 8) (list 0 1 2 3 6 7) (list 0 1 2 3 5 10) (list 0 1 2 3 5 9) (list 0 1 2 3 5 8) (list 0 1 2 3 5 7) (list 0 1 2 3 5 6) (list 0 1 2 3 4 10) (list 0 1 2 3 4 9) (list 0 1 2 3 4 8) (list 0 1 2 3 4 7) (list 0 1 2 3 4 6) (list 0 1 2 3 4 5)) :from-file t)) nil nil (pairlis (quote (winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict palette-mode obj-mode show-stems)) (list 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) 0 0 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 262 107) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 212 161) (om-make-point 40 32) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ORBITES" (quote orbites) (quote ((om-load-inputfun (quote input-funbox) "Zn" "N" 12) (om-load-inputfun (quote input-funbox) "elments" "K" 6) (om-load-inputfun (quote input-funbox) "how many answers" "HOWMANY" 4))) (om-make-point 187 230) (om-make-point 172 61) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CARD" (quote card) (quote ((om-load-inputfun (quote input-funbox) "Zn" "N" 12) (om-load-inputfun (quote input-funbox) "elments" "K" 6))) (om-make-point 302 161) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (6 0 1 0 nil 0) (8 0 2 0 nil 0) (7 0 2 1 nil 0) (2 0 5 2 nil 0) (2 0 6 0 nil 0) (15 0 9 0 nil 0) (9 0 10 1 nil 0) (10 0 14 2 nil 0) (24 0 21 2 nil 0) (23 0 24 0 nil 0) (22 0 24 1 nil 2) (25 0 24 2 nil 0) (23 0 25 0 nil 0) (22 0 25 1 nil 0))) nil 7.01))
