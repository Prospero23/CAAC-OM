; OM File Header - Saved 2023/03/13 12:00:10
; (6.2 :patc (om-make-point 123 76) (om-make-point 0 0) (om-make-point 1143 685) "non documentation" 183 0 nil "2023/03/13 12:00:10")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "06-Red-by-addition" (quote ((let ((box (om-load-boxcall (quote genfun) "GROWING-BY-ADD1" (quote growing-by-add) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SERIE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "ENTRIES" nil) (om-load-inputfun (quote input-funbox) "no documentation" "MOD" 12))) (om-make-point 52 350) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GROWING-BY-ADD1" (quote growing-by-add) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SERIE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "ENTRIES" nil) (om-load-inputfun (quote input-funbox) "no documentation" "MOD" 12))) (om-make-point 69 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUITE-REDUCTIBLE2" (quote suite-reductible) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12))) (om-make-point 882 148) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUITE-REDUCTIBLE2" (quote suite-reductible) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12))) (om-make-point 359 141) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUITE-REDUCTIBLE2" (quote suite-reductible) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" 12))) (om-make-point 401 532) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 22 285) (om-make-point 34 30) (list 2) "(2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 63 284) (om-make-point 133 30) (list 3 1 0 3 1 0 3 1 0 3 1 0) "(3 1 0 3 1 0 3 1 0 3 1 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 74 20) (quote "period = 864") "" (om-make-point 551 497) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 970 115) (om-make-point 32 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input0" nil))) (om-make-point 899 224) nil nil nil (list (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 249 155) (om-make-point 130 65) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 197 230) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 6000))) (om-make-point 217 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 137 203) (om-make-point 20 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 121 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 125 47) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 380 312) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 80 301) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 1 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (1 1 6 0 nil 0) (1 0 7 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ1" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "CHORD-SEQS" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 643 291) (om-make-point 458 316) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6100) (6500) (6200) (6600) (6700) (6700) (6800) (6000) (6900) (6100) (6200) (6200) (6300) (6700) (6400) (6800) (6900) (6900) (7000) (6200) (7100) (6300) (6400) (6400) (6500) (6900) (6600) (7000) (7100) (7100) (6000) (6400) (6100) (6500) (6600) (6600) (6700) (7100) (6800) (6000) (6100) (6100) (6200) (6600) (6300) (6700) (6800) (6800) (6900) (6100) (7000) (6200) (6300) (6300) (6400) (6800) (6500) (6900) (7000) (7000) (7100) (6300) (6000) (6400) (6500) (6500) (6600) (7000) (6700) (7100) (6000))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 69000 70000 71000 72000)) :ldur (quotelvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6100) (6400) (6900) (6400) (6100) (6000) (6100) (6400) (6900) (6400) (6100) (6000) (6100) (6400) (6900) (6400) (6100) (6000) (6100) (6400) (6900) (6400) (6100) (6000) (6100) (6400) (6900) (6400) (6100) (6000) (6100) (6400) (6900) (6400) (6100) (6000) (6100) (6400) (6900) (6400) (6100) (6000) (6100) (6400) (6900) (6400) (6100) (6000) (6100) (6400) (6900) (6400) (6100) (6000) (6100) (6400) (6900) (6400) (6100) (6000) (6100) (6400) (6900) (6400) (6100) (6000) (6100) (6400) (6900) (6400) (6100) (6000))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 69000 70000 71000 72000)) :ldur (quotelvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (6500) (6700) (6900) (7100) (6100) (6300) (6500) (6700) (6900) (7100) (6100) (6300) (6500) (6700) (6900) (7100) (6100) (6300) (6500) (6700) (6900) (7100) (6100) (6300) (6500) (6700) (6900) (7100) (6100) (6300) (6500) (6700) (6900) (7100) (6100) (6300) (6500) (6700) (6900) (7100) (6100) (6300) (6500) (6700) (6900) (7100) (6100) (6300) (6500) (6700) (6900) (7100) (6100) (6300) (6500) (6700) (6900) (7100) (6100) (6300) (6500) (6700) (6900) (7100) (6100) (6300) (6500) (6700) (6900) (7100) (6100))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 69000 70000 71000 72000)) :ldur (quotelvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quotelonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 69000 70000 71000 72000)) :ldur (quotelvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quotelonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 69000 70000 71000 72000)) :ldur (quotelvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.2 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (score-mode cursor-mode player scale show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode)) (list 0 (quote :normal) (quote :midi-player) nil (quote t) 2 24 (list (quote g) (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 1 1 nil 1000 0 (om-make-point 995 400) (om-make-point 0 0) 0 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 779 66) (om-make-point 265 49) (list 0 1 5 2 6 7 7 8 0 9 1 2 2 3 7 4 8 9 9 10 2 11 3 4 4 5 9 6 10 11 11 0 4 1 5 6 6 7 11 8 0 1 1 2 6 3 7 8 8 9 1 10 2 3 3 4 8 5 9 10 10 11 3 0 4 5 5 6 10 7 11 0) "(0 1 5 2 6 7 7 8 0 9 1 2 2 3 7 4 8 9 9 10 2 11 3 4 4 5 9 6 10 11 11 0 4 1 5 6 6 7 11 8 0 1 1 2 6 3 7 8 8 9 1 10 2 3 3 4 8 5 9 10 10 11 3 0 4 5 5 6 10 7 11 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 665 57) (quote "Reducibility by successive additions") "" (om-make-point 180 0) nil (om-make-color 5/17 41/255 143/255) (om-make-font "Geneva" 36 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 231 80) (om-make-point 368 46) (list 0 1 5 2 6 7 7 8 0 9 1 2 2 3 7 4 8 9 9 10 2 11 3 4 4 5 9 6 10 11 11 0 4 1 5 6 6 7 11 8 0 1 1 2 6 3 7 8 8 9 1 10 2 3 3 4 8 5 9 10 10 11 3 0 4 5 5 6 10 7 11 0) "(0 1 5 2 6 7 7 8 0 9 1 2 2 3 7 4 8 9 9 10 2 11 3 4 4 5 9 6 10 11 11 0 4 1 5 6 6 7 11 8 0 1 1 2 6 3 7 8 8 9 1 10 2 3 3 4 8 5 9 10 10 11 3 0 4 5 5 6 10 7 11 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 115 33) (quote "period = 72") "" (om-make-point 450 130) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 141 83) (om-make-point 52 30) (list 3 1 0) "(3 1 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 41 85) (om-make-point 34 30) (list 2) "(2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 228 246) (om-make-point 404 258) (list 0 1 5 0 11 7 0 1 5 0 11 7 2 2 2 4 6 11 9 6 9 1 8 3 11 2 11 9 4 8 6 2 4 9 1 8 3 11 4 5 5 8 7 3 2 6 6 0 10 11 9 2 5 5 0 7 11 6 11 1 0 4 2 6 8 1 5 8 11 7 0 5 9 0 3 7 2 6 2 8 2 3 1 2 9 5 4 3 7 2 3 5 4 8 2 2 4 9 5 0 3 3 4 5 9 8 11 11 6 10 2 0 2 7 9 10 5 9 8 7 11 2 11 1 0 8 6 6 0 1 5 0 11 11 8 9 1 8 3 11 10 6 10 8 6 11 1 2 5 5 4 3 11 6 3 9 4 8 6 2 8 5 9 4 11 3 8 1 9 4 11 3 2 10 2 8 2 7 9 2 9 9 0 7 11 6 11 5 8 0 10 2 0 5 1 0 7 11 0 5 1 8 11 11 10 6 2 0 6 3 1 2 9 5 8 11 3 10 11 9 8 4 6 10 8 9 5 4 11 11 8 1 9 8 3 3 6 10 2 0 2 11 5 6 1 5 0 11 7 6 7 5 0 8 10 2 8 5 1 0 11 3 0 9 1 8 3 11 2 2 6 4 2 3 5 10 9 1 8 3 11 10 11 5 8 4 6 2 0 9 9 4 11 3 8 5 5 0 7 11 6 2 10 0 10 11 9 2 1 5 8 11 7 6 11 9 0 0 10 2 0 5 5 8 3 7 8 9 5 4 3 7 2 6 2 4 2 11 5 10 9 5 0 3 3 10 11 9 8 8 2 6 4 5 9 8 7 3 4 5 9 8 7 11 2 2 10 0 2 3 9 6 1 5 0 11 11 2 3 1 8 0 2 10 0 1 5 0 11 7 8 5 5 4 3 11 6 6 6 4 2 3 5 2 5 9 4 11 3 2 7 9 4 8 6 2 4 5 5 8 7 3 8 9 9 0 7 11 6 2 2 8 6 7 5 6 5 1 0 7 11 6 11 1 8 8 2 10 0 5 9 0 3 7 8 9 5 8 11 3 10 2 6 8 10 3 1 2 9 5 4 11 11 2 7 9 8 0 6 6 4 5 9 8 11 11 0 1 5 0 11 7 6 10 2 0 2 7 5 2 5 1 0 11 3 6 3 1 8 0 2 2 8 9 1 8 3 11 4 9 1 8 3 11 10 2 2 8 10 3 5 6 9 9 4 11 3 2 11 5 0 4 2 6 8 1 9 4 11 3 8 1 5 8 11 7 6 2 6 0 6 7 5 6 5 5 8 3 7 2 3 5 4 0 10 2 0 5 1 8 11 11 4 9 5 0 3 3 10 2 6 8 2 11 9 10 5 9 8 7 3 10 11 9 8 4 2 2 8 1 9 8 3 3 0 1 5 0 11 11 2 6 10 8 6 11 1 6 1 5 0 11 7 2 11 5 4 0 2 6 0 9 1 8 3 11 8 5 9 4 11 3 2 10 6 4 2 3 5 10 5 5 8 7 3 2 3 9 0 4 2 6 8 5 5 0 7 11 0 5 1 0 7 11 6 2 10 8 2 11 1 6 5 9 0 3 7 2 3 5 8 8 6 10 8 9 5 4 3 7 8 9 5 4 11 11 2 10 6 8 6 3 9 10 5 9 8 11 11 6 7 5 0 8 10 6 4 5 9 8 7 11 8 5 1 0 11 3 6 6 10 8 6 11 5 2 9 1 8 3 11 10 3 1 8 0 2 10 8 5 5 4 3 11 0 9 9 4 11 3 2 2 2 0 10 11 9 2 1 9 4 11 3 2 7 5 8 8 10 6 8 9 9 0 7 11 0 5 5 8 3 7 2 6 2 4 6 7 5 6 5 1 8 11 11 10 3 5 0 0 6 10 8 9 5 8 11 3 4 5 9 8 7 3 10 2 6 8 10 11 5 2 1 9 8 3 3 6 7 5 0 8 2 2) "(0 1 5 0 11 7 0 1 5 0 11 7 2 2 2 4 6 11 9 6 9 1 8 3 11 2 11 9 4 8 6 2 4 9 1 8 3 11 4 5 5 8 7 3 2 6 6 0 10 11 9 2 5 5 0 7 11 6 11 1 0 4 2 6 8 1 5 8 11 7 0 5 9 0 3 7 2 6 2 8 2 3 1 2 9 5 4 3 7 2 3 5 4 8 2 2 4 9 5 0 3 3 4 5 9 8 11 11 6 10 2 0 2 7 9 10 5 9 8 7 11 2 11 1 0 8 6 6 0 1 5 0 11 11 8 9 1 8 3 11 10 6 10 8 6 11 1 2 5 5 4 3 11 6 3 9 4 8 6 2 8 5 9 4 11 3 8 1 9 4 11 3 2 10 2 8 2 7 9 2 9 9 0 7 11 6 11 5 8 0 10 2 0 5 1 0 7 11 0 5 1 8 11 11 10 6 2 0 6 3 1 2 9 5 8 11 3 10 11 9 8 4 6 10 8 9 5 4 11 11 8 1 9 8 3 3 6 10 2 0 2 11 5 6 1 5 0 11 7 6 7 5 0 8 10 2 8 5 1 0 11 3 0 9 1 8 3 11 2 2 6 4 2 3 5 10 9 1 8 3 11 10 11 5 8 4 6 2 0 9 9 4 11 3 8 5 5 0 7 11 6 2 10 0 10 11 9 2 1 5 8 11 7 6 11 9 0 0 10 2 0 5 5 8 3 7 8 9 5 4 3 7 2 6 2 4 2 11 5 10 9 5 0 3 3 10 11 9 8 8 2 6 4 5 9 8 7 3 4 5 9 8 7 11 2 2 10 0 2 3 9 6 1 5 0 11 11 2 3 1 8 0 2 10 0 1 5 0 11 7 8 5 5 4 3 11 6 6 6 4 2 3 5 2 5 9 4 11 3 2 7 9 4 8 6 2 4 5 5 8 7 3 8 9 9 0 7 11 6 2 2 8 6 7 5 6 5 1 0 7 11 6 11 1 8 8 2 10 0 5 9 0 3 7 8 9 5 8 11 3 10 2 6 8 10 3 1 2 9 5 4 11 11 2 7 9 8 0 6 6 4 5 9 8 11 11 0 1 5 0 11 7 6 10 2 0 2 7 5 2 5 1 0 11 3 6 3 1 8 0 2 2 8 9 1 8 3 11 4 9 1 8 3 11 10 2 2 8 10 3 5 6 9 9 4 11 3 2 11 5 0 4 2 6 8 1 9 4 11 3 8 1 5 8 11 7 6 2 6 0 6 7 5 6 5 5 8 3 7 2 3 5 4 0 10 2 0 5 1 8 11 11 4 9 5 0 3 3 10 2 6 8 2 11 9 10 5 9 8 7 3 10 11 9 8 4 2 2 8 1 9 8 3 3 0 1 5 0 11 11 2 6 10 8 6 11 1 6 1 5 0 11 7 2 11 5 4 0 2 6 0 9 1 8 3 11 8 5 9 4 11 3 2 10 6 4 2 3 5 10 5 5 8 7 3 2 3 9 0 4 2 6 8 5 5 0 7 11 0 5 1 0 7 11 6 2 10 8 2 11 1 6 5 9 0 3 7 2 3 5 8 8 6 10 8 9 5 4 3 7 8 9 5 4 11 11 2 10 6 8 6 3 9 10 5 9 8 11 11 6 7 5 0 8 10 6 4 5 9 8 7 11 8 5 1 0 11 3 6 6 10 8 6 11 5 2 9 1 8 3 11 10 3 1 8 0 2 10 8 5 5 4 3 11 0 9 9 4 11 3 2 2 2 0 10 11 9 2 1 9 4 11 3 2 7 5 8 8 10 6 8 9 9 0 7 11 0 5 5 8 3 7 2 6 2 4 6 7 5 6 5 1 8 11 11 10 3 5 0 0 6 10 8 9 5 8 11 3 4 5 9 8 7 3 10 2 6 8 10 11 5 2 1 9 8 3 3 6 7 5 0 8 2 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (6 0 0 1 nil 0) (16 0 1 0 nil 0) (15 0 1 1 nil 0) (11 0 2 0 nil 0) (8 0 2 1 nil 0) (13 0 3 0 nil 0) (17 0 4 0 nil 0) (2 0 9 0 nil 0) (9 0 10 1 nil 0))) nil 6.2))
